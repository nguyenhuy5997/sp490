<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\AppSkeleton.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\AppSkeleton.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Mon Oct 31 14:06:41 2022
<BR><P>
<H3>Maximum Stack Usage =        288 bytes + Unknown(Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; MeasCompPrint_SupplyVoltage &rArr; round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsl
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[0]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_sp49.o(RESET)
 <LI><a href="#[2]">fputc</a> from devlib.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[1]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[0]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_sp49.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[3]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[7]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3e]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[3f]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[40]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[5]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_fini_ (Weak Reference)
</UL>

<P><STRONG><a name="[41]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[42]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[4]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[43]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[44]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[45]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[46]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[47]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[9]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Baudrate_Calib
</UL>

<P><STRONG><a name="[48]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasCompPrint_SupplyVoltage
</UL>

<P><STRONG><a name="[33]"></a>__aeabi_uwrite4</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uwrite4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[49]"></a>__rt_uwrite4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uwrite4.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>_uwrite4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uwrite4.o(.text), UNUSED)

<P><STRONG><a name="[a]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasCompPrint_SupplyVoltage
</UL>

<P><STRONG><a name="[c]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2uiz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasCompPrint_SupplyVoltage
</UL>

<P><STRONG><a name="[e]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[d]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[4b]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[11]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[b]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[12]"></a>__aeabi_dadd</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[14]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[15]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[16]"></a>_drnd</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, drnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _drnd &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[4d]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>__aeabi_cdcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[3c]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[f]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[4e]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[13]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[4f]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[1c]"></a>Lib_Comp_Acceleration</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, Lib_Comp_Acceleration.o(Lib_Comp_Acceleration_))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasCompPrint_Acceleration
</UL>

<P><STRONG><a name="[1b]"></a>Lib_Comp_Auto_Acc_Offset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, Lib_Comp_Auto_Acc_Offset.o(Lib_Comp_Auto_Acc_Offset_))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasCompPrint_Acceleration
</UL>

<P><STRONG><a name="[1f]"></a>Lib_Comp_Pressure</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, Lib_Comp_Pressure.o(Lib_Comp_Pressure_))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasCompPrint_Pressure
</UL>

<P><STRONG><a name="[38]"></a>Lib_Diag_RC_Osc_Chk</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, Lib_Diag_RC_Osc_Chk.o(Lib_Diag_RC_Osc_Chk_))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21]"></a>Lib_Meas_Comp_SupplyV</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, Lib_Meas_Comp_SupplyV.o(Lib_Meas_Comp_SupplyV_))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasCompPrint_SupplyVoltage
</UL>

<P><STRONG><a name="[18]"></a>Lib_Meas_Comp_Temp</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, Lib_Meas_Comp_Temp.o(Lib_Meas_Comp_Temp_))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasCompPrint_Temperature
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasCompPrint_Acceleration
</UL>

<P><STRONG><a name="[1a]"></a>Lib_Meas_Raw_Acceleration</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, Lib_Meas_Raw_Acceleration.o(Lib_Meas_Raw_Acceleration_))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasCompPrint_Acceleration
</UL>

<P><STRONG><a name="[1e]"></a>Lib_Meas_Raw_Pressure</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, Lib_Meas_Raw_Pressure.o(Lib_Meas_Raw_Pressure_))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasCompPrint_Pressure
</UL>

<P><STRONG><a name="[35]"></a>Lib_Serv_Start_Xtal_Osc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, Lib_Serv_Start_Xtal_Osc.o(Lib_Serv_Start_Xtal_Osc_))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[37]"></a>Lib_Serv_Stop_Xtal_Osc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, Lib_Serv_Stop_Xtal_Osc.o(Lib_Serv_Stop_Xtal_Osc_))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3a]"></a>Lib_State_Low_Power</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, Lib_State_Low_Power.o(Lib_State_Low_Power_))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[36]"></a>ErrorHandling</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.ErrorHandling))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17]"></a>MeasCompPrint_Acceleration</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, main.o(i.MeasCompPrint_Acceleration))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MeasCompPrint_Acceleration &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lib_Meas_Raw_Acceleration
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lib_Meas_Comp_Temp
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lib_Comp_Auto_Acc_Offset
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lib_Comp_Acceleration
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d]"></a>MeasCompPrint_Pressure</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, main.o(i.MeasCompPrint_Pressure))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MeasCompPrint_Pressure &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lib_Meas_Raw_Pressure
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lib_Comp_Pressure
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20]"></a>MeasCompPrint_SupplyVoltage</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, main.o(i.MeasCompPrint_SupplyVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = MeasCompPrint_SupplyVoltage &rArr; round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lib_Meas_Comp_SupplyV
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[23]"></a>MeasCompPrint_Temperature</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, main.o(i.MeasCompPrint_Temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MeasCompPrint_Temperature &rArr; Uart_SendHex32 &rArr; Uart_SendString &rArr; Uart_Putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendHex32
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lib_Meas_Comp_Temp
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25]"></a>Uart_Baudrate_Calib</STRONG> (Thumb, 352 bytes, Stack size 24 bytes, devlib.o(i.Uart_Baudrate_Calib))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Uart_Baudrate_Calib &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[34]"></a>Uart_Init</STRONG> (Thumb, 234 bytes, Stack size 0 bytes, devlib.o(i.Uart_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[27]"></a>Uart_Putchar</STRONG> (Thumb, 224 bytes, Stack size 20 bytes, devlib.o(i.Uart_Putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Uart_Putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendString
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendHex8
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendHex32
</UL>

<P><STRONG><a name="[24]"></a>Uart_SendHex32</STRONG> (Thumb, 282 bytes, Stack size 20 bytes, devlib.o(i.Uart_SendHex32))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Uart_SendHex32 &rArr; Uart_SendString &rArr; Uart_Putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Putchar
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendString
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasCompPrint_Temperature
</UL>

<P><STRONG><a name="[28]"></a>Uart_SendHex8</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, devlib.o(i.Uart_SendHex8))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Uart_SendHex8 &rArr; Uart_SendString &rArr; Uart_Putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Putchar
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendString
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[26]"></a>Uart_SendString</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, devlib.o(i.Uart_SendString))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Uart_SendString &rArr; Uart_Putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendHex8
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendHex32
</UL>

<P><STRONG><a name="[29]"></a>__0printf$8</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[50]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[19]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasCompPrint_Temperature
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasCompPrint_SupplyVoltage
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasCompPrint_Pressure
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasCompPrint_Acceleration
</UL>

<P><STRONG><a name="[10]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[32]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hamming.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hamming_8_4_enc
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hamming_8_4_dec
</UL>

<P><STRONG><a name="[2]"></a>fputc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, devlib.o(i.fputc))
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[2d]"></a>hamming_8_4_array_dec</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, hamming.o(i.hamming_8_4_array_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = hamming_8_4_array_dec &rArr; hamming_8_4_dec &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hamming_8_4_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2f]"></a>hamming_8_4_array_enc</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, hamming.o(i.hamming_8_4_array_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = hamming_8_4_array_enc &rArr; hamming_8_4_enc &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hamming_8_4_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2e]"></a>hamming_8_4_dec</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, hamming.o(i.hamming_8_4_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hamming_8_4_dec &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inter_byte_xor
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hamming_8_4_array_dec
</UL>

<P><STRONG><a name="[30]"></a>hamming_8_4_enc</STRONG> (Thumb, 106 bytes, Stack size 4 bytes, hamming.o(i.hamming_8_4_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = hamming_8_4_enc &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hamming_8_4_array_enc
</UL>

<P><STRONG><a name="[31]"></a>inter_byte_xor</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hamming.o(i.inter_byte_xor))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hamming_8_4_dec
</UL>

<P><STRONG><a name="[1]"></a>main</STRONG> (Thumb, 982 bytes, Stack size 96 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = main &rArr; MeasCompPrint_SupplyVoltage &rArr; round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapBytes
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hamming_8_4_array_enc
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hamming_8_4_array_dec
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendHex8
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Baudrate_Calib
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lib_State_Low_Power
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lib_Serv_Stop_Xtal_Osc
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lib_Serv_Start_Xtal_Osc
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lib_Diag_RC_Osc_Chk
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasCompPrint_Temperature
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasCompPrint_SupplyVoltage
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasCompPrint_Pressure
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasCompPrint_Acceleration
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandling
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[22]"></a>round</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, round.o(i.round))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasCompPrint_SupplyVoltage
</UL>

<P><STRONG><a name="[39]"></a>swapBytes</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, common.o(i.swapBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = swapBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[2a]"></a>_printf_core</STRONG> (Thumb, 1020 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[2c]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2b]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[6]"></a>__arm_fini_</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_fini
</UL>
<HR></body></html>
