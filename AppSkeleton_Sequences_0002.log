/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : C:\Users\adminlocal\Desktop\STS\Workspace\SP49\sp490_rep2\AppSkeleton_Sequences_0002.log
 *  Created     : 16:26:14 (13/12/2022)
 *  Device      : SP49_B21
 *  PDSC File   : C:\Users\adminlocal\AppData\Local\Arm\Packs\Infineon\SP49_B2\3.0.4\Infineon.SP49_B2.pdsc
 *
 */

[16:26:14.613]  **********  Sequence "ResetHardware"  (Context="Connect", Pname="", info="")
[16:26:14.613]  
[16:26:14.636]  <debugvars>
[16:26:14.654]    // Pre-defined
[16:26:14.677]    __protocol=0x00000002      (Protocol="SWD", SWJ-DP="False")
[16:26:14.678]    __connection=0x00020201    (Connection Type="Debug", Reset Type="System Reset", Pre-Connect HW Reset)
[16:26:14.679]    __dp=0x00000000
[16:26:14.680]    __ap=0x00000000
[16:26:14.680]    __traceout=0x00000000      (Trace Disabled)
[16:26:14.681]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:26:14.683]    __FlashAddr=0x00000000
[16:26:14.683]    __FlashLen=0x00000000
[16:26:14.683]    __FlashArg=0x00000000
[16:26:14.684]    __FlashOp=0x00000000
[16:26:14.685]    __Result=0x00000000
[16:26:14.686]  </debugvars>
[16:26:14.686]  
[16:26:14.687]  <sequence name="ResetHardware" Pname="" disable="false" info="">
[16:26:14.688]    <block atomic="false" info="">
[16:26:14.688]      __var nReset      = 0x80;
[16:26:14.689]        // -> [nReset <= 0x00000080]
[16:26:14.690]      DAP_SWJ_Pins(0x00, nReset, 0);
[16:26:14.692]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0xFF]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=1, TDO=1, nTRST=1, nRESET=1)
[16:26:14.692]    </block>
[16:26:14.693]    <control if="" while="1" timeout="50000" info="">
[16:26:14.693]      // while "1"  (timeout="50000")
[16:26:14.693]      // while-condition  =>  TRUE
[16:26:14.694]      // while "1"  (timeout="50000")
[16:26:14.694]      // while-condition  =>  TRUE
[16:26:14.694]      // while "1"  (timeout="50000")
[16:26:14.695]      // while-condition  =>  TRUE
[16:26:14.696]      // while "1"  (timeout="50000")
[16:26:14.696]      // while-condition  =>  TRUE
[16:26:14.696]      // while "1"  (timeout="50000")
[16:26:14.696]      // while-condition  =>  TRUE
[16:26:14.697]      // while "1"  (timeout="50000")
[16:26:14.697]      // while-condition  =>  TRUE
[16:26:14.697]      // while "1"  (timeout="50000")
[16:26:14.697]      // while-condition  =>  TRUE
[16:26:14.698]      // while "1"  (timeout="50000")
[16:26:14.698]      // while-condition  =>  TRUE
[16:26:14.698]      // while "1"  (timeout="50000")
[16:26:14.699]      // while-condition  =>  TRUE
[16:26:14.699]      // while "1"  (timeout="50000")
[16:26:14.699]      // while-condition  =>  TRUE
[16:26:14.700]      // while "1"  (timeout="50000")
[16:26:14.700]      // while-condition  =>  TRUE
[16:26:14.700]      // while "1"  (timeout="50000")
[16:26:14.700]      // while-condition  =>  TRUE
[16:26:14.701]      // while "1"  (timeout="50000")
[16:26:14.701]      // while-condition  =>  TRUE
[16:26:14.701]      // while "1"  (timeout="50000")
[16:26:14.701]      // while-condition  =>  TRUE
[16:26:14.701]      // while "1"  (timeout="50000")
[16:26:14.702]      // while-condition  =>  TRUE
[16:26:14.702]      // while "1"  (timeout="50000")
[16:26:14.702]      // while-condition  =>  TRUE
[16:26:14.702]      // while "1"  (timeout="50000")
[16:26:14.702]      // while-condition  =>  TRUE
[16:26:14.702]      // while "1"  (timeout="50000")
[16:26:14.703]      // while-condition  =>  TRUE
[16:26:14.704]      // while "1"  (timeout="50000")
[16:26:14.704]      // while-condition  =>  TRUE
[16:26:14.704]      // while "1"  (timeout="50000")
[16:26:14.704]      // while-condition  =>  TRUE
[16:26:14.704]      // while "1"  (timeout="50000")
[16:26:14.705]      // while-condition  =>  TRUE
[16:26:14.705]      // while "1"  (timeout="50000")
[16:26:14.705]      // while-condition  =>  TRUE
[16:26:14.705]      // while "1"  (timeout="50000")
[16:26:14.706]      // while-condition  =>  TRUE
[16:26:14.706]      // while "1"  (timeout="50000")
[16:26:14.706]      // while-condition  =>  TRUE
[16:26:14.706]      // while "1"  (timeout="50000")
[16:26:14.707]      // while-condition  =>  TRUE
[16:26:14.707]      // while "1"  (timeout="50000")
[16:26:14.707]      // while-condition  =>  TRUE
[16:26:14.708]      // while "1"  (timeout="50000")
[16:26:14.708]      // while-condition  =>  TRUE
[16:26:14.708]      // while "1"  (timeout="50000")
[16:26:14.708]      // while-condition  =>  TRUE
[16:26:14.708]      // while "1"  (timeout="50000")
[16:26:14.708]      // while-condition  =>  TRUE
[16:26:14.709]      // while "1"  (timeout="50000")
[16:26:14.709]      // while-condition  =>  TRUE
[16:26:14.709]      // while "1"  (timeout="50000")
[16:26:14.709]      // while-condition  =>  TRUE
[16:26:14.709]      // while "1"  (timeout="50000")
[16:26:14.710]      // while-condition  =>  TRUE
[16:26:14.710]      // while "1"  (timeout="50000")
[16:26:14.710]      // while-condition  =>  TRUE
[16:26:14.710]      // while "1"  (timeout="50000")
[16:26:14.710]      // while-condition  =>  TRUE
[16:26:14.711]      // while "1"  (timeout="50000")
[16:26:14.711]      // while-condition  =>  TRUE
[16:26:14.711]      // while "1"  (timeout="50000")
[16:26:14.711]      // while-condition  =>  TRUE
[16:26:14.711]      // while "1"  (timeout="50000")
[16:26:14.711]      // while-condition  =>  TRUE
[16:26:14.712]      // while "1"  (timeout="50000")
[16:26:14.712]      // while-condition  =>  TRUE
[16:26:14.712]      // while "1"  (timeout="50000")
[16:26:14.712]      // while-condition  =>  TRUE
[16:26:14.712]      // while "1"  (timeout="50000")
[16:26:14.713]      // while-condition  =>  TRUE
[16:26:14.713]      // while "1"  (timeout="50000")
[16:26:14.713]      // while-condition  =>  TRUE
[16:26:14.713]      // while "1"  (timeout="50000")
[16:26:14.713]      // while-condition  =>  TRUE
[16:26:14.714]      // while "1"  (timeout="50000")
[16:26:14.714]      // while-condition  =>  TRUE
[16:26:14.714]      // while "1"  (timeout="50000")
[16:26:14.714]      // while-condition  =>  TRUE
[16:26:14.714]      // while "1"  (timeout="50000")
[16:26:14.715]      // while-condition  =>  TRUE
[16:26:14.715]      // while "1"  (timeout="50000")
[16:26:14.715]      // while-condition  =>  TRUE
[16:26:14.715]      // while "1"  (timeout="50000")
[16:26:14.715]      // while-condition  =>  TRUE
[16:26:14.716]      // while "1"  (timeout="50000")
[16:26:14.716]      // while-condition  =>  TRUE
[16:26:14.716]      // while "1"  (timeout="50000")
[16:26:14.716]      // while-condition  =>  TRUE
[16:26:14.716]      // while "1"  (timeout="50000")
[16:26:14.716]      // while-condition  =>  TRUE
[16:26:14.717]      // while "1"  (timeout="50000")
[16:26:14.717]      // while-condition  =>  TRUE
[16:26:14.717]      // while "1"  (timeout="50000")
[16:26:14.717]      // while-condition  =>  TRUE
[16:26:14.718]      // while "1"  (timeout="50000")
[16:26:14.718]      // while-condition  =>  TRUE
[16:26:14.718]      // while "1"  (timeout="50000")
[16:26:14.718]      // while-condition  =>  TRUE
[16:26:14.718]      // while "1"  (timeout="50000")
[16:26:14.718]      // while-condition  =>  TRUE
[16:26:14.718]      // while "1"  (timeout="50000")
[16:26:14.718]      // while-condition  =>  TRUE
[16:26:14.718]      // while "1"  (timeout="50000")
[16:26:14.719]      // while-condition  =>  TRUE
[16:26:14.719]      // while "1"  (timeout="50000")
[16:26:14.720]      // while-condition  =>  TRUE
[16:26:14.720]      // while "1"  (timeout="50000")
[16:26:14.720]      // while-condition  =>  TRUE
[16:26:14.720]      // while "1"  (timeout="50000")
[16:26:14.720]      // while-condition  =>  TRUE
[16:26:14.721]      // while "1"  (timeout="50000")
[16:26:14.721]      // while-condition  =>  TRUE
[16:26:14.721]      // while "1"  (timeout="50000")
[16:26:14.721]      // while-condition  =>  TRUE
[16:26:14.721]      // while "1"  (timeout="50000")
[16:26:14.722]      // while-condition  =>  TRUE
[16:26:14.722]      // while "1"  (timeout="50000")
[16:26:14.722]      // while-condition  =>  TRUE
[16:26:14.722]      // while "1"  (timeout="50000")
[16:26:14.722]      // while-condition  =>  TRUE
[16:26:14.723]      // while "1"  (timeout="50000")
[16:26:14.723]      // while-condition  =>  TRUE
[16:26:14.723]      // while "1"  (timeout="50000")
[16:26:14.723]      // while-condition  =>  TRUE
[16:26:14.723]      // while "1"  (timeout="50000")
[16:26:14.724]      // while-condition  =>  TRUE
[16:26:14.724]      // while "1"  (timeout="50000")
[16:26:14.724]      // while-condition  =>  TRUE
[16:26:14.724]      // while "1"  (timeout="50000")
[16:26:14.724]      // while-condition  =>  TRUE
[16:26:14.725]      // while "1"  (timeout="50000")
[16:26:14.725]      // while-condition  =>  TRUE
[16:26:14.725]      // while "1"  (timeout="50000")
[16:26:14.725]      // while-condition  =>  TRUE
[16:26:14.725]      // while "1"  (timeout="50000")
[16:26:14.725]      // while-condition  =>  TRUE
[16:26:14.725]      // while "1"  (timeout="50000")
[16:26:14.725]      // while-condition  =>  TRUE
[16:26:14.725]      // while "1"  (timeout="50000")
[16:26:14.726]      // while-condition  =>  TRUE
[16:26:14.726]      // while "1"  (timeout="50000")
[16:26:14.726]      // while-condition  =>  TRUE
[16:26:14.726]      // while "1"  (timeout="50000")
[16:26:14.726]      // while-condition  =>  TRUE
[16:26:14.727]      // while "1"  (timeout="50000")
[16:26:14.728]      // while-condition  =>  TRUE
[16:26:14.728]      // while "1"  (timeout="50000")
[16:26:14.728]      // while-condition  =>  TRUE
[16:26:14.728]      // while "1"  (timeout="50000")
[16:26:14.728]      // while-condition  =>  TRUE
[16:26:14.729]      // while "1"  (timeout="50000")
[16:26:14.729]      // while-condition  =>  TRUE
[16:26:14.729]      // while "1"  (timeout="50000")
[16:26:14.729]      // while-condition  =>  TRUE
[16:26:14.729]      // while "1"  (timeout="50000")
[16:26:14.729]      // while-condition  =>  TRUE
[16:26:14.730]      // while "1"  (timeout="50000")
[16:26:14.730]      // while-condition  =>  TRUE
[16:26:14.730]      // while "1"  (timeout="50000")
[16:26:14.730]      // while-condition  =>  TRUE
[16:26:14.731]      // while "1"  (timeout="50000")
[16:26:14.731]      // while-condition  =>  TRUE
[16:26:14.731]      // while "1"  (timeout="50000")
[16:26:14.731]      // while-condition  =>  TRUE
[16:26:14.731]      // while "1"  (timeout="50000")
[16:26:14.731]      // while-condition  =>  TRUE
[16:26:14.731]      // while "1"  (timeout="50000")
[16:26:14.732]      // while-condition  =>  TRUE
[16:26:14.732]      // while "1"  (timeout="50000")
[16:26:14.732]      // while-condition  =>  TRUE
[16:26:14.732]      // while "1"  (timeout="50000")
[16:26:14.732]      // while-condition  =>  TRUE
[16:26:14.733]      // while "1"  (timeout="50000")
[16:26:14.733]      // while-condition  =>  TRUE
[16:26:14.733]      // while "1"  (timeout="50000")
[16:26:14.733]      // while-condition  =>  TRUE
[16:26:14.734]      // while "1"  (timeout="50000")
[16:26:14.734]      // while-condition  =>  TRUE
[16:26:14.734]      // while "1"  (timeout="50000")
[16:26:14.734]      // while-condition  =>  TRUE
[16:26:14.734]      // while "1"  (timeout="50000")
[16:26:14.734]      // while-condition  =>  TRUE
[16:26:14.734]      // while "1"  (timeout="50000")
[16:26:14.734]      // while-condition  =>  TRUE
[16:26:14.735]      // while "1"  (timeout="50000")
[16:26:14.735]      // while-condition  =>  TRUE
[16:26:14.735]      // while "1"  (timeout="50000")
[16:26:14.735]      // while-condition  =>  TRUE
[16:26:14.735]      // while "1"  (timeout="50000")
[16:26:14.736]      // while-condition  =>  TRUE
[16:26:14.736]      // while "1"  (timeout="50000")
[16:26:14.737]      // while-condition  =>  TRUE
[16:26:14.737]      // while "1"  (timeout="50000")
[16:26:14.737]      // while-condition  =>  TRUE
[16:26:14.737]      // while "1"  (timeout="50000")
[16:26:14.737]      // while-condition  =>  TRUE
[16:26:14.738]      // while "1"  (timeout="50000")
[16:26:14.738]      // while-condition  =>  TRUE
[16:26:14.738]      // while "1"  (timeout="50000")
[16:26:14.738]      // while-condition  =>  TRUE
[16:26:14.738]      // while "1"  (timeout="50000")
[16:26:14.739]      // while-condition  =>  TRUE
[16:26:14.739]      // while "1"  (timeout="50000")
[16:26:14.739]      // while-condition  =>  TRUE
[16:26:14.739]      // while "1"  (timeout="50000")
[16:26:14.739]      // while-condition  =>  TRUE
[16:26:14.739]      // while "1"  (timeout="50000")
[16:26:14.740]      // while-condition  =>  TRUE
[16:26:14.740]      // while "1"  (timeout="50000")
[16:26:14.740]      // while-condition  =>  TRUE
[16:26:14.740]      // while "1"  (timeout="50000")
[16:26:14.741]      // while-condition  =>  TRUE
[16:26:14.741]      // while "1"  (timeout="50000")
[16:26:14.741]      // while-condition  =>  TRUE
[16:26:14.741]      // while "1"  (timeout="50000")
[16:26:14.742]      // while-condition  =>  TRUE
[16:26:14.742]      // while "1"  (timeout="50000")
[16:26:14.742]      // while-condition  =>  TRUE
[16:26:14.742]      // while "1"  (timeout="50000")
[16:26:14.742]      // while-condition  =>  TRUE
[16:26:14.742]      // while "1"  (timeout="50000")
[16:26:14.742]      // while-condition  =>  TRUE
[16:26:14.742]      // while "1"  (timeout="50000")
[16:26:14.742]      // while-condition  =>  TRUE
[16:26:14.743]      // while "1"  (timeout="50000")
[16:26:14.743]      // while-condition  =>  TRUE
[16:26:14.744]      // while "1"  (timeout="50000")
[16:26:14.744]      // while-condition  =>  TRUE
[16:26:14.744]      // while "1"  (timeout="50000")
[16:26:14.744]      // while-condition  =>  TRUE
[16:26:14.744]      // while "1"  (timeout="50000")
[16:26:14.745]      // while-condition  =>  TRUE
[16:26:14.745]      // while "1"  (timeout="50000")
[16:26:14.745]      // while-condition  =>  TRUE
[16:26:14.745]      // while "1"  (timeout="50000")
[16:26:14.745]      // while-condition  =>  TRUE
[16:26:14.746]      // while "1"  (timeout="50000")
[16:26:14.746]      // while-condition  =>  TRUE
[16:26:14.746]      // while "1"  (timeout="50000")
[16:26:14.746]      // while-condition  =>  TRUE
[16:26:14.746]      // while "1"  (timeout="50000")
[16:26:14.747]      // while-condition  =>  TRUE
[16:26:14.747]      // while "1"  (timeout="50000")
[16:26:14.747]      // while-condition  =>  TRUE
[16:26:14.747]      // while "1"  (timeout="50000")
[16:26:14.747]      // while-condition  =>  TRUE
[16:26:14.747]      // while "1"  (timeout="50000")
[16:26:14.748]      // while-condition  =>  TRUE
[16:26:14.748]      // while "1"  (timeout="50000")
[16:26:14.748]      // while-condition  =>  TRUE
[16:26:14.748]      // while "1"  (timeout="50000")
[16:26:14.748]      // while-condition  =>  TRUE
[16:26:14.748]      // while "1"  (timeout="50000")
[16:26:14.749]      // while-condition  =>  TRUE
[16:26:14.749]      // while "1"  (timeout="50000")
[16:26:14.749]      // while-condition  =>  TRUE
[16:26:14.749]      // while "1"  (timeout="50000")
[16:26:14.750]      // while-condition  =>  TRUE
[16:26:14.750]      // while "1"  (timeout="50000")
[16:26:14.750]      // while-condition  =>  TRUE
[16:26:14.750]      // while "1"  (timeout="50000")
[16:26:14.751]      // while-condition  =>  TRUE
[16:26:14.751]      // while "1"  (timeout="50000")
[16:26:14.751]      // while-condition  =>  TRUE
[16:26:14.751]      // while "1"  (timeout="50000")
[16:26:14.752]      // while-condition  =>  TRUE
[16:26:14.752]      // while "1"  (timeout="50000")
[16:26:14.752]      // while-condition  =>  TRUE
[16:26:14.752]      // while "1"  (timeout="50000")
[16:26:14.752]      // while-condition  =>  TRUE
[16:26:14.753]      // while "1"  (timeout="50000")
[16:26:14.753]      // while-condition  =>  TRUE
[16:26:14.753]      // while "1"  (timeout="50000")
[16:26:14.754]      // while-condition  =>  TRUE
[16:26:14.754]      // while "1"  (timeout="50000")
[16:26:14.754]      // while-condition  =>  TRUE
[16:26:14.754]      // while "1"  (timeout="50000")
[16:26:14.755]      // while-condition  =>  TRUE
[16:26:14.755]      // while "1"  (timeout="50000")
[16:26:14.755]      // while  =>  TIMEOUT
[16:26:14.755]      // end while "1"
[16:26:14.756]    </control>
[16:26:14.756]    <block atomic="false" info="">
[16:26:14.756]      DAP_SWJ_Pins(nReset, nReset, 0);
[16:26:14.767]        // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0xFF]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=1, TDO=1, nTRST=1, nRESET=1)
[16:26:14.768]    </block>
[16:26:14.768]    <control if="" while="1" timeout="10000" info="">
[16:26:14.769]      // while "1"  (timeout="10000")
[16:26:14.769]      // while-condition  =>  TRUE
[16:26:14.771]      // while "1"  (timeout="10000")
[16:26:14.771]      // while  =>  TIMEOUT
[16:26:14.772]      // end while "1"
[16:26:14.772]    </control>
[16:26:14.773]    <block atomic="true" info="">
[16:26:14.774]      // ATOMIC SEQUENCE - EXECUTE
[16:26:14.775]      DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  // 50 cycles SWDIO/TMS High
[16:26:14.776]        // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:26:14.777]      DAP_SWJ_Sequence(3,  0x00);                // At least 3 idle cycles (SWDIO/TMS Low)
[16:26:14.777]        // -> [DAP_SWJ_Sequence(3, 0x0000000000000000)]
[16:26:14.778]      // ATOMIC SEQUENCE - DONE
[16:26:14.779]    </block>
[16:26:14.780]    <block atomic="false" info="">
[16:26:14.780]      __errorcontrol = 0x00000001;
[16:26:14.781]        // -> [__errorcontrol <= 0x00000001]  (Skip Errors="True")
[16:26:14.781]      ReadDP(0x0);
[16:26:14.782]        // -> [ReadDP(0x00000000) => 0x0BC11477]   (__dp=0x00000000)
[16:26:14.782]      __errorcontrol = 0x00000000;
[16:26:14.783]        // -> [__errorcontrol <= 0x00000000]  (Skip Errors="False")
[16:26:14.783]    </block>
[16:26:14.784]  </sequence>
[16:26:14.785]  
[16:26:14.786]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:26:14.786]  
[16:26:14.786]  <debugvars>
[16:26:14.786]    // Pre-defined
[16:26:14.786]    __protocol=0x00000002      (Protocol="SWD", SWJ-DP="False")
[16:26:14.787]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[16:26:14.788]    __dp=0x00000000
[16:26:14.788]    __ap=0x00000000
[16:26:14.788]    __traceout=0x00000000      (Trace Disabled)
[16:26:14.788]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:26:14.790]    __FlashAddr=0x00000000
[16:26:14.790]    __FlashLen=0x00000000
[16:26:14.790]    __FlashArg=0x00000000
[16:26:14.791]    __FlashOp=0x00000000
[16:26:14.791]    __Result=0x00000000
[16:26:14.791]  </debugvars>
[16:26:14.791]  
[16:26:14.792]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:26:14.792]  </sequence>
[16:26:14.792]  
[16:27:34.497]  **********  Sequence "ResetHardware"  (Context="Connect", Pname="", info="")
[16:27:34.497]  
[16:27:34.497]  <debugvars>
[16:27:34.498]    // Pre-defined
[16:27:34.498]    __protocol=0x00000002      (Protocol="SWD", SWJ-DP="False")
[16:27:34.499]    __connection=0x00020202    (Connection Type="Flash", Reset Type="System Reset", Pre-Connect HW Reset)
[16:27:34.499]    __dp=0x00000000
[16:27:34.500]    __ap=0x00000000
[16:27:34.500]    __traceout=0x00000000      (Trace Disabled)
[16:27:34.501]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:27:34.501]    __FlashAddr=0x00000000
[16:27:34.502]    __FlashLen=0x00000000
[16:27:34.502]    __FlashArg=0x00000000
[16:27:34.503]    __FlashOp=0x00000000
[16:27:34.503]    __Result=0x00000000
[16:27:34.504]  </debugvars>
[16:27:34.504]  
[16:27:34.505]  <sequence name="ResetHardware" Pname="" disable="false" info="">
[16:27:34.505]    <block atomic="false" info="">
[16:27:34.505]      __var nReset      = 0x80;
[16:27:34.506]        // -> [nReset <= 0x00000080]
[16:27:34.506]      DAP_SWJ_Pins(0x00, nReset, 0);
[16:27:34.507]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0xFF]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=1, TDO=1, nTRST=1, nRESET=1)
[16:27:34.508]    </block>
[16:27:34.508]    <control if="" while="1" timeout="50000" info="">
[16:27:34.508]      // while "1"  (timeout="50000")
[16:27:34.509]      // while-condition  =>  TRUE
[16:27:34.509]      // while "1"  (timeout="50000")
[16:27:34.509]      // while-condition  =>  TRUE
[16:27:34.509]      // while "1"  (timeout="50000")
[16:27:34.510]      // while-condition  =>  TRUE
[16:27:34.510]      // while "1"  (timeout="50000")
[16:27:34.510]      // while-condition  =>  TRUE
[16:27:34.510]      // while "1"  (timeout="50000")
[16:27:34.511]      // while-condition  =>  TRUE
[16:27:34.511]      // while "1"  (timeout="50000")
[16:27:34.511]      // while-condition  =>  TRUE
[16:27:34.512]      // while "1"  (timeout="50000")
[16:27:34.512]      // while-condition  =>  TRUE
[16:27:34.512]      // while "1"  (timeout="50000")
[16:27:34.512]      // while-condition  =>  TRUE
[16:27:34.512]      // while "1"  (timeout="50000")
[16:27:34.513]      // while-condition  =>  TRUE
[16:27:34.513]      // while "1"  (timeout="50000")
[16:27:34.513]      // while-condition  =>  TRUE
[16:27:34.513]      // while "1"  (timeout="50000")
[16:27:34.514]      // while-condition  =>  TRUE
[16:27:34.514]      // while "1"  (timeout="50000")
[16:27:34.514]      // while-condition  =>  TRUE
[16:27:34.514]      // while "1"  (timeout="50000")
[16:27:34.514]      // while-condition  =>  TRUE
[16:27:34.515]      // while "1"  (timeout="50000")
[16:27:34.515]      // while-condition  =>  TRUE
[16:27:34.515]      // while "1"  (timeout="50000")
[16:27:34.515]      // while-condition  =>  TRUE
[16:27:34.515]      // while "1"  (timeout="50000")
[16:27:34.516]      // while-condition  =>  TRUE
[16:27:34.516]      // while "1"  (timeout="50000")
[16:27:34.516]      // while-condition  =>  TRUE
[16:27:34.516]      // while "1"  (timeout="50000")
[16:27:34.516]      // while-condition  =>  TRUE
[16:27:34.517]      // while "1"  (timeout="50000")
[16:27:34.517]      // while-condition  =>  TRUE
[16:27:34.517]      // while "1"  (timeout="50000")
[16:27:34.517]      // while-condition  =>  TRUE
[16:27:34.517]      // while "1"  (timeout="50000")
[16:27:34.518]      // while-condition  =>  TRUE
[16:27:34.518]      // while "1"  (timeout="50000")
[16:27:34.518]      // while-condition  =>  TRUE
[16:27:34.518]      // while "1"  (timeout="50000")
[16:27:34.518]      // while-condition  =>  TRUE
[16:27:34.519]      // while "1"  (timeout="50000")
[16:27:34.519]      // while-condition  =>  TRUE
[16:27:34.519]      // while "1"  (timeout="50000")
[16:27:34.519]      // while-condition  =>  TRUE
[16:27:34.519]      // while "1"  (timeout="50000")
[16:27:34.519]      // while-condition  =>  TRUE
[16:27:34.520]      // while "1"  (timeout="50000")
[16:27:34.520]      // while-condition  =>  TRUE
[16:27:34.520]      // while "1"  (timeout="50000")
[16:27:34.520]      // while-condition  =>  TRUE
[16:27:34.520]      // while "1"  (timeout="50000")
[16:27:34.521]      // while-condition  =>  TRUE
[16:27:34.521]      // while "1"  (timeout="50000")
[16:27:34.521]      // while-condition  =>  TRUE
[16:27:34.521]      // while "1"  (timeout="50000")
[16:27:34.521]      // while-condition  =>  TRUE
[16:27:34.522]      // while "1"  (timeout="50000")
[16:27:34.522]      // while-condition  =>  TRUE
[16:27:34.522]      // while "1"  (timeout="50000")
[16:27:34.522]      // while-condition  =>  TRUE
[16:27:34.522]      // while "1"  (timeout="50000")
[16:27:34.523]      // while-condition  =>  TRUE
[16:27:34.523]      // while "1"  (timeout="50000")
[16:27:34.523]      // while-condition  =>  TRUE
[16:27:34.523]      // while "1"  (timeout="50000")
[16:27:34.523]      // while-condition  =>  TRUE
[16:27:34.524]      // while "1"  (timeout="50000")
[16:27:34.524]      // while-condition  =>  TRUE
[16:27:34.524]      // while "1"  (timeout="50000")
[16:27:34.524]      // while-condition  =>  TRUE
[16:27:34.524]      // while "1"  (timeout="50000")
[16:27:34.524]      // while-condition  =>  TRUE
[16:27:34.525]      // while "1"  (timeout="50000")
[16:27:34.525]      // while-condition  =>  TRUE
[16:27:34.525]      // while "1"  (timeout="50000")
[16:27:34.526]      // while-condition  =>  TRUE
[16:27:34.526]      // while "1"  (timeout="50000")
[16:27:34.526]      // while-condition  =>  TRUE
[16:27:34.526]      // while "1"  (timeout="50000")
[16:27:34.526]      // while-condition  =>  TRUE
[16:27:34.527]      // while "1"  (timeout="50000")
[16:27:34.527]      // while-condition  =>  TRUE
[16:27:34.527]      // while "1"  (timeout="50000")
[16:27:34.527]      // while-condition  =>  TRUE
[16:27:34.527]      // while "1"  (timeout="50000")
[16:27:34.528]      // while-condition  =>  TRUE
[16:27:34.528]      // while "1"  (timeout="50000")
[16:27:34.528]      // while-condition  =>  TRUE
[16:27:34.528]      // while "1"  (timeout="50000")
[16:27:34.528]      // while-condition  =>  TRUE
[16:27:34.529]      // while "1"  (timeout="50000")
[16:27:34.529]      // while-condition  =>  TRUE
[16:27:34.529]      // while "1"  (timeout="50000")
[16:27:34.529]      // while-condition  =>  TRUE
[16:27:34.530]      // while "1"  (timeout="50000")
[16:27:34.530]      // while-condition  =>  TRUE
[16:27:34.530]      // while "1"  (timeout="50000")
[16:27:34.530]      // while-condition  =>  TRUE
[16:27:34.530]      // while "1"  (timeout="50000")
[16:27:34.531]      // while-condition  =>  TRUE
[16:27:34.531]      // while "1"  (timeout="50000")
[16:27:34.531]      // while-condition  =>  TRUE
[16:27:34.531]      // while "1"  (timeout="50000")
[16:27:34.532]      // while-condition  =>  TRUE
[16:27:34.532]      // while "1"  (timeout="50000")
[16:27:34.532]      // while-condition  =>  TRUE
[16:27:34.532]      // while "1"  (timeout="50000")
[16:27:34.533]      // while-condition  =>  TRUE
[16:27:34.533]      // while "1"  (timeout="50000")
[16:27:34.533]      // while-condition  =>  TRUE
[16:27:34.533]      // while "1"  (timeout="50000")
[16:27:34.533]      // while-condition  =>  TRUE
[16:27:34.534]      // while "1"  (timeout="50000")
[16:27:34.534]      // while-condition  =>  TRUE
[16:27:34.534]      // while "1"  (timeout="50000")
[16:27:34.535]      // while-condition  =>  TRUE
[16:27:34.535]      // while "1"  (timeout="50000")
[16:27:34.535]      // while-condition  =>  TRUE
[16:27:34.535]      // while "1"  (timeout="50000")
[16:27:34.536]      // while-condition  =>  TRUE
[16:27:34.536]      // while "1"  (timeout="50000")
[16:27:34.536]      // while-condition  =>  TRUE
[16:27:34.536]      // while "1"  (timeout="50000")
[16:27:34.536]      // while-condition  =>  TRUE
[16:27:34.537]      // while "1"  (timeout="50000")
[16:27:34.537]      // while-condition  =>  TRUE
[16:27:34.537]      // while "1"  (timeout="50000")
[16:27:34.537]      // while-condition  =>  TRUE
[16:27:34.538]      // while "1"  (timeout="50000")
[16:27:34.538]      // while-condition  =>  TRUE
[16:27:34.538]      // while "1"  (timeout="50000")
[16:27:34.538]      // while-condition  =>  TRUE
[16:27:34.538]      // while "1"  (timeout="50000")
[16:27:34.539]      // while-condition  =>  TRUE
[16:27:34.539]      // while "1"  (timeout="50000")
[16:27:34.539]      // while-condition  =>  TRUE
[16:27:34.539]      // while "1"  (timeout="50000")
[16:27:34.539]      // while-condition  =>  TRUE
[16:27:34.540]      // while "1"  (timeout="50000")
[16:27:34.540]      // while-condition  =>  TRUE
[16:27:34.540]      // while "1"  (timeout="50000")
[16:27:34.540]      // while-condition  =>  TRUE
[16:27:34.540]      // while "1"  (timeout="50000")
[16:27:34.541]      // while-condition  =>  TRUE
[16:27:34.541]      // while "1"  (timeout="50000")
[16:27:34.541]      // while-condition  =>  TRUE
[16:27:34.541]      // while "1"  (timeout="50000")
[16:27:34.541]      // while-condition  =>  TRUE
[16:27:34.541]      // while "1"  (timeout="50000")
[16:27:34.541]      // while-condition  =>  TRUE
[16:27:34.541]      // while "1"  (timeout="50000")
[16:27:34.541]      // while-condition  =>  TRUE
[16:27:34.541]      // while "1"  (timeout="50000")
[16:27:34.542]      // while-condition  =>  TRUE
[16:27:34.542]      // while "1"  (timeout="50000")
[16:27:34.542]      // while-condition  =>  TRUE
[16:27:34.542]      // while "1"  (timeout="50000")
[16:27:34.542]      // while-condition  =>  TRUE
[16:27:34.543]      // while "1"  (timeout="50000")
[16:27:34.543]      // while-condition  =>  TRUE
[16:27:34.543]      // while "1"  (timeout="50000")
[16:27:34.543]      // while-condition  =>  TRUE
[16:27:34.544]      // while "1"  (timeout="50000")
[16:27:34.544]      // while-condition  =>  TRUE
[16:27:34.544]      // while "1"  (timeout="50000")
[16:27:34.544]      // while-condition  =>  TRUE
[16:27:34.544]      // while "1"  (timeout="50000")
[16:27:34.545]      // while-condition  =>  TRUE
[16:27:34.546]      // while "1"  (timeout="50000")
[16:27:34.546]      // while-condition  =>  TRUE
[16:27:34.546]      // while "1"  (timeout="50000")
[16:27:34.546]      // while-condition  =>  TRUE
[16:27:34.547]      // while "1"  (timeout="50000")
[16:27:34.547]      // while-condition  =>  TRUE
[16:27:34.547]      // while "1"  (timeout="50000")
[16:27:34.547]      // while-condition  =>  TRUE
[16:27:34.547]      // while "1"  (timeout="50000")
[16:27:34.548]      // while-condition  =>  TRUE
[16:27:34.548]      // while "1"  (timeout="50000")
[16:27:34.548]      // while-condition  =>  TRUE
[16:27:34.548]      // while "1"  (timeout="50000")
[16:27:34.548]      // while-condition  =>  TRUE
[16:27:34.549]      // while "1"  (timeout="50000")
[16:27:34.550]      // while-condition  =>  TRUE
[16:27:34.550]      // while "1"  (timeout="50000")
[16:27:34.550]      // while-condition  =>  TRUE
[16:27:34.550]      // while "1"  (timeout="50000")
[16:27:34.551]      // while-condition  =>  TRUE
[16:27:34.551]      // while "1"  (timeout="50000")
[16:27:34.551]      // while-condition  =>  TRUE
[16:27:34.551]      // while "1"  (timeout="50000")
[16:27:34.551]      // while-condition  =>  TRUE
[16:27:34.552]      // while "1"  (timeout="50000")
[16:27:34.552]      // while-condition  =>  TRUE
[16:27:34.552]      // while "1"  (timeout="50000")
[16:27:34.552]      // while-condition  =>  TRUE
[16:27:34.552]      // while "1"  (timeout="50000")
[16:27:34.553]      // while-condition  =>  TRUE
[16:27:34.553]      // while "1"  (timeout="50000")
[16:27:34.553]      // while-condition  =>  TRUE
[16:27:34.553]      // while "1"  (timeout="50000")
[16:27:34.553]      // while-condition  =>  TRUE
[16:27:34.554]      // while "1"  (timeout="50000")
[16:27:34.554]      // while-condition  =>  TRUE
[16:27:34.554]      // while "1"  (timeout="50000")
[16:27:34.554]      // while-condition  =>  TRUE
[16:27:34.554]      // while "1"  (timeout="50000")
[16:27:34.555]      // while-condition  =>  TRUE
[16:27:34.555]      // while "1"  (timeout="50000")
[16:27:34.555]      // while-condition  =>  TRUE
[16:27:34.555]      // while "1"  (timeout="50000")
[16:27:34.555]      // while-condition  =>  TRUE
[16:27:34.556]      // while "1"  (timeout="50000")
[16:27:34.556]      // while-condition  =>  TRUE
[16:27:34.556]      // while "1"  (timeout="50000")
[16:27:34.556]      // while-condition  =>  TRUE
[16:27:34.557]      // while "1"  (timeout="50000")
[16:27:34.557]      // while-condition  =>  TRUE
[16:27:34.557]      // while "1"  (timeout="50000")
[16:27:34.557]      // while-condition  =>  TRUE
[16:27:34.557]      // while "1"  (timeout="50000")
[16:27:34.557]      // while-condition  =>  TRUE
[16:27:34.557]      // while "1"  (timeout="50000")
[16:27:34.557]      // while-condition  =>  TRUE
[16:27:34.558]      // while "1"  (timeout="50000")
[16:27:34.558]      // while-condition  =>  TRUE
[16:27:34.558]      // while "1"  (timeout="50000")
[16:27:34.558]      // while-condition  =>  TRUE
[16:27:34.558]      // while "1"  (timeout="50000")
[16:27:34.559]      // while-condition  =>  TRUE
[16:27:34.559]      // while "1"  (timeout="50000")
[16:27:34.559]      // while-condition  =>  TRUE
[16:27:34.559]      // while "1"  (timeout="50000")
[16:27:34.559]      // while-condition  =>  TRUE
[16:27:34.560]      // while "1"  (timeout="50000")
[16:27:34.560]      // while-condition  =>  TRUE
[16:27:34.560]      // while "1"  (timeout="50000")
[16:27:34.560]      // while-condition  =>  TRUE
[16:27:34.561]      // while "1"  (timeout="50000")
[16:27:34.562]      // while-condition  =>  TRUE
[16:27:34.562]      // while "1"  (timeout="50000")
[16:27:34.562]      // while-condition  =>  TRUE
[16:27:34.562]      // while "1"  (timeout="50000")
[16:27:34.563]      // while-condition  =>  TRUE
[16:27:34.563]      // while "1"  (timeout="50000")
[16:27:34.563]      // while-condition  =>  TRUE
[16:27:34.563]      // while "1"  (timeout="50000")
[16:27:34.563]      // while-condition  =>  TRUE
[16:27:34.564]      // while "1"  (timeout="50000")
[16:27:34.564]      // while-condition  =>  TRUE
[16:27:34.564]      // while "1"  (timeout="50000")
[16:27:34.564]      // while-condition  =>  TRUE
[16:27:34.564]      // while "1"  (timeout="50000")
[16:27:34.565]      // while-condition  =>  TRUE
[16:27:34.565]      // while "1"  (timeout="50000")
[16:27:34.565]      // while-condition  =>  TRUE
[16:27:34.565]      // while "1"  (timeout="50000")
[16:27:34.565]      // while-condition  =>  TRUE
[16:27:34.566]      // while "1"  (timeout="50000")
[16:27:34.566]      // while-condition  =>  TRUE
[16:27:34.566]      // while "1"  (timeout="50000")
[16:27:34.566]      // while-condition  =>  TRUE
[16:27:34.566]      // while "1"  (timeout="50000")
[16:27:34.567]      // while-condition  =>  TRUE
[16:27:34.567]      // while "1"  (timeout="50000")
[16:27:34.567]      // while-condition  =>  TRUE
[16:27:34.567]      // while "1"  (timeout="50000")
[16:27:34.567]      // while  =>  TIMEOUT
[16:27:34.568]      // end while "1"
[16:27:34.568]    </control>
[16:27:34.568]    <block atomic="false" info="">
[16:27:34.568]      DAP_SWJ_Pins(nReset, nReset, 0);
[16:27:34.578]        // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0xFF]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=1, TDO=1, nTRST=1, nRESET=1)
[16:27:34.578]    </block>
[16:27:34.579]    <control if="" while="1" timeout="10000" info="">
[16:27:34.579]      // while "1"  (timeout="10000")
[16:27:34.579]      // while-condition  =>  TRUE
[16:27:34.580]      // while "1"  (timeout="10000")
[16:27:34.581]      // while-condition  =>  TRUE
[16:27:34.581]      // while "1"  (timeout="10000")
[16:27:34.581]      // while-condition  =>  TRUE
[16:27:34.581]      // while "1"  (timeout="10000")
[16:27:34.581]      // while-condition  =>  TRUE
[16:27:34.582]      // while "1"  (timeout="10000")
[16:27:34.582]      // while-condition  =>  TRUE
[16:27:34.582]      // while "1"  (timeout="10000")
[16:27:34.583]      // while-condition  =>  TRUE
[16:27:34.584]      // while "1"  (timeout="10000")
[16:27:34.584]      // while  =>  TIMEOUT
[16:27:34.585]      // end while "1"
[16:27:34.585]    </control>
[16:27:34.585]    <block atomic="true" info="">
[16:27:34.586]      // ATOMIC SEQUENCE - EXECUTE
[16:27:34.587]      DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  // 50 cycles SWDIO/TMS High
[16:27:34.588]        // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:27:34.588]      DAP_SWJ_Sequence(3,  0x00);                // At least 3 idle cycles (SWDIO/TMS Low)
[16:27:34.588]        // -> [DAP_SWJ_Sequence(3, 0x0000000000000000)]
[16:27:34.589]      // ATOMIC SEQUENCE - DONE
[16:27:34.589]    </block>
[16:27:34.589]    <block atomic="false" info="">
[16:27:34.590]      __errorcontrol = 0x00000001;
[16:27:34.590]        // -> [__errorcontrol <= 0x00000001]  (Skip Errors="True")
[16:27:34.590]      ReadDP(0x0);
[16:27:34.591]        // -> [ReadDP(0x00000000) => 0x0BC11477]   (__dp=0x00000000)
[16:27:34.592]      __errorcontrol = 0x00000000;
[16:27:34.592]        // -> [__errorcontrol <= 0x00000000]  (Skip Errors="False")
[16:27:34.592]    </block>
[16:27:34.592]  </sequence>
[16:27:34.593]  
[16:27:34.593]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:27:34.593]  
[16:27:34.593]  <debugvars>
[16:27:34.594]    // Pre-defined
[16:27:34.594]    __protocol=0x00000002      (Protocol="SWD", SWJ-DP="False")
[16:27:34.594]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:27:34.594]    __dp=0x00000000
[16:27:34.595]    __ap=0x00000000
[16:27:34.595]    __traceout=0x00000000      (Trace Disabled)
[16:27:34.595]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:27:34.596]    __FlashAddr=0x00000000
[16:27:34.596]    __FlashLen=0x00000000
[16:27:34.596]    __FlashArg=0x00000000
[16:27:34.597]    __FlashOp=0x00000000
[16:27:34.597]    __Result=0x00000000
[16:27:34.597]  </debugvars>
[16:27:34.597]  
[16:27:34.597]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:27:34.597]  </sequence>
[16:27:34.597]  
[16:27:34.600]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:27:34.600]  
[16:27:34.601]  <debugvars>
[16:27:34.601]    // Pre-defined
[16:27:34.601]    __protocol=0x00000002      (Protocol="SWD", SWJ-DP="False")
[16:27:34.602]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:27:34.602]    __dp=0x00000000
[16:27:34.602]    __ap=0x00000000
[16:27:34.602]    __traceout=0x00000000      (Trace Disabled)
[16:27:34.603]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:27:34.603]    __FlashAddr=0x00000000
[16:27:34.603]    __FlashLen=0x00000000
[16:27:34.604]    __FlashArg=0x00000000
[16:27:34.604]    __FlashOp=0x00000000
[16:27:34.604]    __Result=0x00000000
[16:27:34.604]  </debugvars>
[16:27:34.605]  
[16:27:34.605]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:27:34.605]    <block atomic="false" info="">
[16:27:34.605]      __var SW_DP_ABORT  = 0x0;
[16:27:34.605]        // -> [SW_DP_ABORT <= 0x00000000]
[16:27:34.606]      __var DP_CTRL_STAT = 0x4;
[16:27:34.606]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:27:34.606]      __var DP_SELECT    = 0x8;
[16:27:34.606]        // -> [DP_SELECT <= 0x00000008]
[16:27:34.606]      __var powered_down = 0;
[16:27:34.606]        // -> [powered_down <= 0x00000000]
[16:27:34.607]      WriteDP(DP_SELECT, 0x00000000);
[16:27:34.608]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:27:34.609]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:27:34.609]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:27:34.610]        // -> [powered_down <= 0x00000001]
[16:27:34.610]    </block>
[16:27:34.610]    <control if="powered_down" while="" timeout="0" info="">
[16:27:34.610]      // if-block "powered_down"
[16:27:34.610]        // =>  TRUE
[16:27:34.611]      <block atomic="false" info="">
[16:27:34.611]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:27:34.612]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:27:34.613]      </block>
[16:27:34.613]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:27:34.613]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:27:34.614]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:27:34.615]        // while-condition  =>  FALSE
[16:27:34.615]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:27:34.615]      </control>
[16:27:34.615]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:27:34.615]        // if-block "(__protocol & 0xFFFF) == 1"
[16:27:34.616]          // =>  FALSE
[16:27:34.616]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:27:34.616]      </control>
[16:27:34.616]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:27:34.616]        // if-block "(__protocol & 0xFFFF) == 2"
[16:27:34.617]          // =>  TRUE
[16:27:34.617]        <block atomic="false" info="">
[16:27:34.617]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:27:34.618]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:27:34.619]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:27:34.620]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:27:34.621]        </block>
[16:27:34.621]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:27:34.621]      </control>
[16:27:34.621]      // end if-block "powered_down"
[16:27:34.621]    </control>
[16:27:34.622]  </sequence>
[16:27:34.622]  
[16:27:34.672]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[16:27:34.672]  
[16:27:34.673]  <debugvars>
[16:27:34.673]    // Pre-defined
[16:27:34.674]    __protocol=0x00000002      (Protocol="SWD", SWJ-DP="False")
[16:27:34.674]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:27:34.674]    __dp=0x00000000
[16:27:34.675]    __ap=0x00000000
[16:27:34.675]    __traceout=0x00000000      (Trace Disabled)
[16:27:34.675]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:27:34.676]    __FlashAddr=0x00000000
[16:27:34.676]    __FlashLen=0x00000000
[16:27:34.676]    __FlashArg=0x00000000
[16:27:34.676]    __FlashOp=0x00000000
[16:27:34.677]    __Result=0x00000000
[16:27:34.677]  </debugvars>
[16:27:34.677]  
[16:27:34.677]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[16:27:34.677]    <block atomic="true" info="">
[16:27:34.690]      // ATOMIC SEQUENCE - EXECUTE
[16:27:34.693]      __var DP_R_IDCODE    = 0x0;
[16:27:34.693]        // -> [DP_R_IDCODE <= 0x00000000]
[16:27:34.693]      __var DP_W_ABORT    = 0x0;
[16:27:34.693]        // -> [DP_W_ABORT <= 0x00000000]
[16:27:34.694]      __var DP_CTRLSTAT = 0x4;
[16:27:34.694]        // -> [DP_CTRLSTAT <= 0x00000004]
[16:27:34.695]      __var DP_W_SELECT    = 0x8;
[16:27:34.696]        // -> [DP_W_SELECT <= 0x00000008]
[16:27:34.696]      __var AP_TAR		= 0x4;
[16:27:34.696]        // -> [AP_TAR <= 0x00000004]
[16:27:34.697]      __var AP_BD0		= 0x0;
[16:27:34.697]        // -> [AP_BD0 <= 0x00000000]
[16:27:34.697]      __var AP_BD1		= 0x4;
[16:27:34.698]        // -> [AP_BD1 <= 0x00000004]
[16:27:34.698]      __var AP_BD2		= 0x8;
[16:27:34.699]        // -> [AP_BD2 <= 0x00000008]
[16:27:34.699]      __var PCWithinFlash = 0;
[16:27:34.699]        // -> [PCWithinFlash <= 0x00000000]
[16:27:34.700]      Write32(0xE000EDF0, 0xA05F0003);	// Halt the CORE
[16:27:34.700]        // -> [Write32(0xE000EDF0, 0xA05F0003)]   (__dp=0x00000000, __ap=0x00000000)
[16:27:34.700]      // ATOMIC SEQUENCE - DONE
[16:27:34.700]    </block>
[16:27:34.701]    <control if="" while="(Read32(0xE000EDF0) & 0x00020000) != 0x00020000" timeout="1000000" info="">
[16:27:34.726]      // while "(Read32(0xE000EDF0) & 0x00020000) != 0x00020000"  (timeout="1000000")
[16:27:34.730]        // -> [Read32(0xE000EDF0) => 0x03030003]   (__dp=0x00000000, __ap=0x00000000)
[16:27:34.730]      // while-condition  =>  FALSE
[16:27:34.731]      // end while "(Read32(0xE000EDF0) & 0x00020000) != 0x00020000"
[16:27:34.732]    </control>
[16:27:34.733]    <block atomic="true" info="">
[16:27:34.734]      // ATOMIC SEQUENCE - EXECUTE
[16:27:34.738]      WriteDP(DP_W_SELECT, 0x00000000);	//Select 0x00
[16:27:34.739]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:27:34.739]      WriteAP(AP_TAR, 0xE000EDF0);		//Set TAR to DHCSR
[16:27:34.740]        // -> [WriteAP(0x00000004, 0xE000EDF0)]   (__dp=0x00000000, __ap=0x00000000)
[16:27:34.740]      WriteDP(DP_W_SELECT, 0x00000010);	//Select 0x10
[16:27:34.741]        // -> [WriteDP(0x00000008, 0x00000010)]   (__dp=0x00000000)
[16:27:34.742]      WriteAP(AP_BD1, 0x0000000F);		//Trigger read of PC
[16:27:34.742]        // -> [WriteAP(0x00000004, 0x0000000F)]   (__dp=0x00000000, __ap=0x00000000)
[16:27:34.743]      // ATOMIC SEQUENCE - DONE
[16:27:34.744]    </block>
[16:27:34.745]    <control if="" while="(ReadAP(AP_BD0) & 0x00010000) != 0x00010000" timeout="100000" info="">
[16:27:34.745]      // while "(ReadAP(AP_BD0) & 0x00010000) != 0x00010000"  (timeout="100000")
[16:27:34.748]        // -> [ReadAP(0x00000000) => 0x01030003]   (__dp=0x00000000, __ap=0x00000000)
[16:27:34.748]      // while-condition  =>  FALSE
[16:27:34.749]      // end while "(ReadAP(AP_BD0) & 0x00010000) != 0x00010000"
[16:27:34.750]    </control>
[16:27:34.750]    <block atomic="false" info="">
[16:27:34.751]      PCWithinFlash = (ReadAP(AP_BD2) >= 0x10000800);
[16:27:34.752]        // -> [ReadAP(0x00000008) => 0x10000820]   (__dp=0x00000000, __ap=0x00000000)
[16:27:34.753]        // -> [PCWithinFlash <= 0x00000001]
[16:27:34.754]      WriteDP(DP_W_SELECT, 0x00000000);	//Select 0x00
[16:27:34.755]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:27:34.756]    </block>
[16:27:34.757]    <control if="PCWithinFlash == 0" while="" timeout="0" info="">
[16:27:34.757]      // if-block "PCWithinFlash == 0"
[16:27:34.758]        // =>  FALSE
[16:27:34.758]      // skip if-block "PCWithinFlash == 0"
[16:27:34.759]    </control>
[16:27:34.759]  </sequence>
[16:27:34.760]  
[16:27:34.783]  **********  Sequence "ResetCatchSet"  (Context="Reset", Pname="", info="")
[16:27:34.783]  
[16:27:34.784]  <debugvars>
[16:27:34.784]    // Pre-defined
[16:27:34.786]    __protocol=0x00000002      (Protocol="SWD", SWJ-DP="False")
[16:27:34.786]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:27:34.786]    __dp=0x00000000
[16:27:34.786]    __ap=0x00000000
[16:27:34.788]    __traceout=0x00000000      (Trace Disabled)
[16:27:34.788]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:27:34.789]    __FlashAddr=0x00000000
[16:27:34.789]    __FlashLen=0x00000000
[16:27:34.789]    __FlashArg=0x00000000
[16:27:34.790]    __FlashOp=0x00000000
[16:27:34.790]    __Result=0x00000000
[16:27:34.791]  </debugvars>
[16:27:34.791]  
[16:27:34.791]  <sequence name="ResetCatchSet" Pname="" disable="false" info="">
[16:27:34.791]    <block atomic="false" info="">
[16:27:34.791]    </block>
[16:27:34.792]  </sequence>
[16:27:34.793]  
[16:27:34.794]  **********  Sequence "ResetHardware"  (Context="Reset", Pname="", info="")
[16:27:34.794]  
[16:27:34.794]  <debugvars>
[16:27:34.794]    // Pre-defined
[16:27:34.795]    __protocol=0x00000002      (Protocol="SWD", SWJ-DP="False")
[16:27:34.796]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:27:34.796]    __dp=0x00000000
[16:27:34.797]    __ap=0x00000000
[16:27:34.797]    __traceout=0x00000000      (Trace Disabled)
[16:27:34.797]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:27:34.797]    __FlashAddr=0x00000000
[16:27:34.797]    __FlashLen=0x00000000
[16:27:34.797]    __FlashArg=0x00000000
[16:27:34.798]    __FlashOp=0x00000000
[16:27:34.798]    __Result=0x00000000
[16:27:34.798]  </debugvars>
[16:27:34.798]  
[16:27:34.799]  <sequence name="ResetHardware" Pname="" disable="false" info="">
[16:27:34.800]    <block atomic="false" info="">
[16:27:34.800]      __var nReset      = 0x80;
[16:27:34.800]        // -> [nReset <= 0x00000080]
[16:27:34.801]      DAP_SWJ_Pins(0x00, nReset, 0);
[16:27:34.801]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0xFF]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=1, TDO=1, nTRST=1, nRESET=1)
[16:27:34.802]    </block>
[16:27:34.802]    <control if="" while="1" timeout="50000" info="">
[16:27:34.802]      // while "1"  (timeout="50000")
[16:27:34.802]      // while-condition  =>  TRUE
[16:27:34.803]      // while "1"  (timeout="50000")
[16:27:34.803]      // while-condition  =>  TRUE
[16:27:34.803]      // while "1"  (timeout="50000")
[16:27:34.803]      // while-condition  =>  TRUE
[16:27:34.804]      // while "1"  (timeout="50000")
[16:27:34.804]      // while-condition  =>  TRUE
[16:27:34.804]      // while "1"  (timeout="50000")
[16:27:34.804]      // while-condition  =>  TRUE
[16:27:34.805]      // while "1"  (timeout="50000")
[16:27:34.805]      // while-condition  =>  TRUE
[16:27:34.805]      // while "1"  (timeout="50000")
[16:27:34.805]      // while-condition  =>  TRUE
[16:27:34.805]      // while "1"  (timeout="50000")
[16:27:34.806]      // while-condition  =>  TRUE
[16:27:34.806]      // while "1"  (timeout="50000")
[16:27:34.806]      // while-condition  =>  TRUE
[16:27:34.806]      // while "1"  (timeout="50000")
[16:27:34.806]      // while-condition  =>  TRUE
[16:27:34.806]      // while "1"  (timeout="50000")
[16:27:34.806]      // while-condition  =>  TRUE
[16:27:34.806]      // while "1"  (timeout="50000")
[16:27:34.806]      // while-condition  =>  TRUE
[16:27:34.806]      // while "1"  (timeout="50000")
[16:27:34.807]      // while-condition  =>  TRUE
[16:27:34.807]      // while "1"  (timeout="50000")
[16:27:34.807]      // while-condition  =>  TRUE
[16:27:34.807]      // while "1"  (timeout="50000")
[16:27:34.807]      // while-condition  =>  TRUE
[16:27:34.808]      // while "1"  (timeout="50000")
[16:27:34.808]      // while-condition  =>  TRUE
[16:27:34.809]      // while "1"  (timeout="50000")
[16:27:34.809]      // while-condition  =>  TRUE
[16:27:34.809]      // while "1"  (timeout="50000")
[16:27:34.809]      // while-condition  =>  TRUE
[16:27:34.809]      // while "1"  (timeout="50000")
[16:27:34.809]      // while-condition  =>  TRUE
[16:27:34.809]      // while "1"  (timeout="50000")
[16:27:34.809]      // while-condition  =>  TRUE
[16:27:34.809]      // while "1"  (timeout="50000")
[16:27:34.810]      // while-condition  =>  TRUE
[16:27:34.810]      // while "1"  (timeout="50000")
[16:27:34.810]      // while-condition  =>  TRUE
[16:27:34.810]      // while "1"  (timeout="50000")
[16:27:34.810]      // while-condition  =>  TRUE
[16:27:34.811]      // while "1"  (timeout="50000")
[16:27:34.812]      // while-condition  =>  TRUE
[16:27:34.812]      // while "1"  (timeout="50000")
[16:27:34.812]      // while-condition  =>  TRUE
[16:27:34.812]      // while "1"  (timeout="50000")
[16:27:34.813]      // while-condition  =>  TRUE
[16:27:34.813]      // while "1"  (timeout="50000")
[16:27:34.813]      // while-condition  =>  TRUE
[16:27:34.813]      // while "1"  (timeout="50000")
[16:27:34.813]      // while-condition  =>  TRUE
[16:27:34.813]      // while "1"  (timeout="50000")
[16:27:34.813]      // while-condition  =>  TRUE
[16:27:34.813]      // while "1"  (timeout="50000")
[16:27:34.813]      // while-condition  =>  TRUE
[16:27:34.813]      // while "1"  (timeout="50000")
[16:27:34.814]      // while-condition  =>  TRUE
[16:27:34.814]      // while "1"  (timeout="50000")
[16:27:34.814]      // while-condition  =>  TRUE
[16:27:34.814]      // while "1"  (timeout="50000")
[16:27:34.814]      // while-condition  =>  TRUE
[16:27:34.815]      // while "1"  (timeout="50000")
[16:27:34.815]      // while-condition  =>  TRUE
[16:27:34.815]      // while "1"  (timeout="50000")
[16:27:34.815]      // while-condition  =>  TRUE
[16:27:34.815]      // while "1"  (timeout="50000")
[16:27:34.817]      // while-condition  =>  TRUE
[16:27:34.817]      // while "1"  (timeout="50000")
[16:27:34.817]      // while-condition  =>  TRUE
[16:27:34.817]      // while "1"  (timeout="50000")
[16:27:34.817]      // while-condition  =>  TRUE
[16:27:34.818]      // while "1"  (timeout="50000")
[16:27:34.818]      // while-condition  =>  TRUE
[16:27:34.818]      // while "1"  (timeout="50000")
[16:27:34.818]      // while-condition  =>  TRUE
[16:27:34.818]      // while "1"  (timeout="50000")
[16:27:34.819]      // while-condition  =>  TRUE
[16:27:34.819]      // while "1"  (timeout="50000")
[16:27:34.819]      // while-condition  =>  TRUE
[16:27:34.819]      // while "1"  (timeout="50000")
[16:27:34.819]      // while-condition  =>  TRUE
[16:27:34.820]      // while "1"  (timeout="50000")
[16:27:34.820]      // while-condition  =>  TRUE
[16:27:34.820]      // while "1"  (timeout="50000")
[16:27:34.820]      // while-condition  =>  TRUE
[16:27:34.820]      // while "1"  (timeout="50000")
[16:27:34.821]      // while-condition  =>  TRUE
[16:27:34.821]      // while "1"  (timeout="50000")
[16:27:34.821]      // while-condition  =>  TRUE
[16:27:34.821]      // while "1"  (timeout="50000")
[16:27:34.821]      // while-condition  =>  TRUE
[16:27:34.822]      // while "1"  (timeout="50000")
[16:27:34.822]      // while-condition  =>  TRUE
[16:27:34.822]      // while "1"  (timeout="50000")
[16:27:34.822]      // while-condition  =>  TRUE
[16:27:34.822]      // while "1"  (timeout="50000")
[16:27:34.822]      // while-condition  =>  TRUE
[16:27:34.822]      // while "1"  (timeout="50000")
[16:27:34.822]      // while-condition  =>  TRUE
[16:27:34.822]      // while "1"  (timeout="50000")
[16:27:34.822]      // while-condition  =>  TRUE
[16:27:34.823]      // while "1"  (timeout="50000")
[16:27:34.823]      // while-condition  =>  TRUE
[16:27:34.823]      // while "1"  (timeout="50000")
[16:27:34.823]      // while-condition  =>  TRUE
[16:27:34.824]      // while "1"  (timeout="50000")
[16:27:34.825]      // while-condition  =>  TRUE
[16:27:34.825]      // while "1"  (timeout="50000")
[16:27:34.825]      // while-condition  =>  TRUE
[16:27:34.825]      // while "1"  (timeout="50000")
[16:27:34.825]      // while-condition  =>  TRUE
[16:27:34.826]      // while "1"  (timeout="50000")
[16:27:34.826]      // while-condition  =>  TRUE
[16:27:34.826]      // while "1"  (timeout="50000")
[16:27:34.826]      // while-condition  =>  TRUE
[16:27:34.826]      // while "1"  (timeout="50000")
[16:27:34.826]      // while-condition  =>  TRUE
[16:27:34.827]      // while "1"  (timeout="50000")
[16:27:34.827]      // while-condition  =>  TRUE
[16:27:34.827]      // while "1"  (timeout="50000")
[16:27:34.827]      // while-condition  =>  TRUE
[16:27:34.828]      // while "1"  (timeout="50000")
[16:27:34.828]      // while-condition  =>  TRUE
[16:27:34.828]      // while "1"  (timeout="50000")
[16:27:34.828]      // while-condition  =>  TRUE
[16:27:34.829]      // while "1"  (timeout="50000")
[16:27:34.829]      // while-condition  =>  TRUE
[16:27:34.829]      // while "1"  (timeout="50000")
[16:27:34.829]      // while-condition  =>  TRUE
[16:27:34.830]      // while "1"  (timeout="50000")
[16:27:34.830]      // while-condition  =>  TRUE
[16:27:34.830]      // while "1"  (timeout="50000")
[16:27:34.830]      // while-condition  =>  TRUE
[16:27:34.830]      // while "1"  (timeout="50000")
[16:27:34.831]      // while-condition  =>  TRUE
[16:27:34.831]      // while "1"  (timeout="50000")
[16:27:34.831]      // while-condition  =>  TRUE
[16:27:34.831]      // while "1"  (timeout="50000")
[16:27:34.831]      // while-condition  =>  TRUE
[16:27:34.832]      // while "1"  (timeout="50000")
[16:27:34.832]      // while-condition  =>  TRUE
[16:27:34.832]      // while "1"  (timeout="50000")
[16:27:34.832]      // while-condition  =>  TRUE
[16:27:34.832]      // while "1"  (timeout="50000")
[16:27:34.832]      // while-condition  =>  TRUE
[16:27:34.832]      // while "1"  (timeout="50000")
[16:27:34.832]      // while-condition  =>  TRUE
[16:27:34.833]      // while "1"  (timeout="50000")
[16:27:34.833]      // while-condition  =>  TRUE
[16:27:34.833]      // while "1"  (timeout="50000")
[16:27:34.833]      // while-condition  =>  TRUE
[16:27:34.833]      // while "1"  (timeout="50000")
[16:27:34.835]      // while-condition  =>  TRUE
[16:27:34.835]      // while "1"  (timeout="50000")
[16:27:34.835]      // while-condition  =>  TRUE
[16:27:34.835]      // while "1"  (timeout="50000")
[16:27:34.835]      // while-condition  =>  TRUE
[16:27:34.836]      // while "1"  (timeout="50000")
[16:27:34.836]      // while-condition  =>  TRUE
[16:27:34.836]      // while "1"  (timeout="50000")
[16:27:34.836]      // while-condition  =>  TRUE
[16:27:34.836]      // while "1"  (timeout="50000")
[16:27:34.837]      // while-condition  =>  TRUE
[16:27:34.837]      // while "1"  (timeout="50000")
[16:27:34.837]      // while-condition  =>  TRUE
[16:27:34.837]      // while "1"  (timeout="50000")
[16:27:34.837]      // while-condition  =>  TRUE
[16:27:34.838]      // while "1"  (timeout="50000")
[16:27:34.838]      // while-condition  =>  TRUE
[16:27:34.838]      // while "1"  (timeout="50000")
[16:27:34.838]      // while-condition  =>  TRUE
[16:27:34.838]      // while "1"  (timeout="50000")
[16:27:34.838]      // while-condition  =>  TRUE
[16:27:34.838]      // while "1"  (timeout="50000")
[16:27:34.838]      // while-condition  =>  TRUE
[16:27:34.838]      // while "1"  (timeout="50000")
[16:27:34.839]      // while-condition  =>  TRUE
[16:27:34.840]      // while "1"  (timeout="50000")
[16:27:34.840]      // while-condition  =>  TRUE
[16:27:34.840]      // while "1"  (timeout="50000")
[16:27:34.840]      // while-condition  =>  TRUE
[16:27:34.841]      // while "1"  (timeout="50000")
[16:27:34.841]      // while-condition  =>  TRUE
[16:27:34.841]      // while "1"  (timeout="50000")
[16:27:34.841]      // while-condition  =>  TRUE
[16:27:34.841]      // while "1"  (timeout="50000")
[16:27:34.841]      // while-condition  =>  TRUE
[16:27:34.842]      // while "1"  (timeout="50000")
[16:27:34.842]      // while-condition  =>  TRUE
[16:27:34.842]      // while "1"  (timeout="50000")
[16:27:34.842]      // while-condition  =>  TRUE
[16:27:34.843]      // while "1"  (timeout="50000")
[16:27:34.843]      // while-condition  =>  TRUE
[16:27:34.843]      // while "1"  (timeout="50000")
[16:27:34.843]      // while-condition  =>  TRUE
[16:27:34.843]      // while "1"  (timeout="50000")
[16:27:34.844]      // while-condition  =>  TRUE
[16:27:34.844]      // while "1"  (timeout="50000")
[16:27:34.844]      // while-condition  =>  TRUE
[16:27:34.844]      // while "1"  (timeout="50000")
[16:27:34.844]      // while-condition  =>  TRUE
[16:27:34.845]      // while "1"  (timeout="50000")
[16:27:34.845]      // while-condition  =>  TRUE
[16:27:34.845]      // while "1"  (timeout="50000")
[16:27:34.845]      // while-condition  =>  TRUE
[16:27:34.846]      // while "1"  (timeout="50000")
[16:27:34.846]      // while-condition  =>  TRUE
[16:27:34.846]      // while "1"  (timeout="50000")
[16:27:34.846]      // while-condition  =>  TRUE
[16:27:34.846]      // while "1"  (timeout="50000")
[16:27:34.846]      // while-condition  =>  TRUE
[16:27:34.847]      // while "1"  (timeout="50000")
[16:27:34.847]      // while-condition  =>  TRUE
[16:27:34.847]      // while "1"  (timeout="50000")
[16:27:34.847]      // while-condition  =>  TRUE
[16:27:34.848]      // while "1"  (timeout="50000")
[16:27:34.848]      // while-condition  =>  TRUE
[16:27:34.848]      // while "1"  (timeout="50000")
[16:27:34.848]      // while-condition  =>  TRUE
[16:27:34.848]      // while "1"  (timeout="50000")
[16:27:34.849]      // while-condition  =>  TRUE
[16:27:34.849]      // while "1"  (timeout="50000")
[16:27:34.849]      // while-condition  =>  TRUE
[16:27:34.849]      // while "1"  (timeout="50000")
[16:27:34.849]      // while-condition  =>  TRUE
[16:27:34.850]      // while "1"  (timeout="50000")
[16:27:34.850]      // while-condition  =>  TRUE
[16:27:34.850]      // while "1"  (timeout="50000")
[16:27:34.850]      // while-condition  =>  TRUE
[16:27:34.850]      // while "1"  (timeout="50000")
[16:27:34.851]      // while-condition  =>  TRUE
[16:27:34.851]      // while "1"  (timeout="50000")
[16:27:34.851]      // while-condition  =>  TRUE
[16:27:34.851]      // while "1"  (timeout="50000")
[16:27:34.851]      // while-condition  =>  TRUE
[16:27:34.852]      // while "1"  (timeout="50000")
[16:27:34.852]      // while-condition  =>  TRUE
[16:27:34.852]      // while "1"  (timeout="50000")
[16:27:34.852]      // while-condition  =>  TRUE
[16:27:34.852]      // while "1"  (timeout="50000")
[16:27:34.853]      // while-condition  =>  TRUE
[16:27:34.853]      // while "1"  (timeout="50000")
[16:27:34.853]      // while-condition  =>  TRUE
[16:27:34.853]      // while "1"  (timeout="50000")
[16:27:34.853]      // while-condition  =>  TRUE
[16:27:34.854]      // while "1"  (timeout="50000")
[16:27:34.854]      // while-condition  =>  TRUE
[16:27:34.855]      // while "1"  (timeout="50000")
[16:27:34.855]      // while-condition  =>  TRUE
[16:27:34.855]      // while "1"  (timeout="50000")
[16:27:34.855]      // while-condition  =>  TRUE
[16:27:34.856]      // while "1"  (timeout="50000")
[16:27:34.856]      // while-condition  =>  TRUE
[16:27:34.856]      // while "1"  (timeout="50000")
[16:27:34.856]      // while-condition  =>  TRUE
[16:27:34.856]      // while "1"  (timeout="50000")
[16:27:34.856]      // while-condition  =>  TRUE
[16:27:34.856]      // while "1"  (timeout="50000")
[16:27:34.857]      // while-condition  =>  TRUE
[16:27:34.857]      // while "1"  (timeout="50000")
[16:27:34.857]      // while-condition  =>  TRUE
[16:27:34.857]      // while "1"  (timeout="50000")
[16:27:34.857]      // while-condition  =>  TRUE
[16:27:34.858]      // while "1"  (timeout="50000")
[16:27:34.858]      // while-condition  =>  TRUE
[16:27:34.858]      // while "1"  (timeout="50000")
[16:27:34.858]      // while-condition  =>  TRUE
[16:27:34.858]      // while "1"  (timeout="50000")
[16:27:34.859]      // while-condition  =>  TRUE
[16:27:34.859]      // while "1"  (timeout="50000")
[16:27:34.859]      // while-condition  =>  TRUE
[16:27:34.859]      // while "1"  (timeout="50000")
[16:27:34.860]      // while-condition  =>  TRUE
[16:27:34.860]      // while "1"  (timeout="50000")
[16:27:34.860]      // while-condition  =>  TRUE
[16:27:34.860]      // while "1"  (timeout="50000")
[16:27:34.861]      // while-condition  =>  TRUE
[16:27:34.861]      // while "1"  (timeout="50000")
[16:27:34.861]      // while-condition  =>  TRUE
[16:27:34.861]      // while "1"  (timeout="50000")
[16:27:34.861]      // while-condition  =>  TRUE
[16:27:34.862]      // while "1"  (timeout="50000")
[16:27:34.862]      // while-condition  =>  TRUE
[16:27:34.863]      // while "1"  (timeout="50000")
[16:27:34.863]      // while-condition  =>  TRUE
[16:27:34.863]      // while "1"  (timeout="50000")
[16:27:34.863]      // while-condition  =>  TRUE
[16:27:34.864]      // while "1"  (timeout="50000")
[16:27:34.864]      // while-condition  =>  TRUE
[16:27:34.864]      // while "1"  (timeout="50000")
[16:27:34.864]      // while  =>  TIMEOUT
[16:27:34.864]      // end while "1"
[16:27:34.865]    </control>
[16:27:34.865]    <block atomic="false" info="">
[16:27:34.865]      DAP_SWJ_Pins(nReset, nReset, 0);
[16:27:34.876]        // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0xFF]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=1, TDO=1, nTRST=1, nRESET=1)
[16:27:34.885]    </block>
[16:27:34.886]    <control if="" while="1" timeout="10000" info="">
[16:27:34.886]      // while "1"  (timeout="10000")
[16:27:34.887]      // while-condition  =>  TRUE
[16:27:34.887]      // while "1"  (timeout="10000")
[16:27:34.888]      // while-condition  =>  TRUE
[16:27:34.888]      // while "1"  (timeout="10000")
[16:27:34.889]      // while-condition  =>  TRUE
[16:27:34.890]      // while "1"  (timeout="10000")
[16:27:34.890]      // while-condition  =>  TRUE
[16:27:34.890]      // while "1"  (timeout="10000")
[16:27:34.891]      // while-condition  =>  TRUE
[16:27:34.892]      // while "1"  (timeout="10000")
[16:27:34.892]      // while-condition  =>  TRUE
[16:27:34.893]      // while "1"  (timeout="10000")
[16:27:34.893]      // while-condition  =>  TRUE
[16:27:34.894]      // while "1"  (timeout="10000")
[16:27:34.894]      // while-condition  =>  TRUE
[16:27:34.895]      // while "1"  (timeout="10000")
[16:27:34.895]      // while-condition  =>  TRUE
[16:27:34.896]      // while "1"  (timeout="10000")
[16:27:34.896]      // while  =>  TIMEOUT
[16:27:34.897]      // end while "1"
[16:27:34.897]    </control>
[16:27:34.898]    <block atomic="true" info="">
[16:27:34.898]      // ATOMIC SEQUENCE - EXECUTE
[16:27:34.899]      DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  // 50 cycles SWDIO/TMS High
[16:27:34.900]        // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:27:34.901]      DAP_SWJ_Sequence(3,  0x00);                // At least 3 idle cycles (SWDIO/TMS Low)
[16:27:34.901]        // -> [DAP_SWJ_Sequence(3, 0x0000000000000000)]
[16:27:34.901]      // ATOMIC SEQUENCE - DONE
[16:27:34.901]    </block>
[16:27:34.902]    <block atomic="false" info="">
[16:27:34.902]      __errorcontrol = 0x00000001;
[16:27:34.902]        // -> [__errorcontrol <= 0x00000001]  (Skip Errors="True")
[16:27:34.903]      ReadDP(0x0);
[16:27:34.904]        // -> [ReadDP(0x00000000) => 0x0BC11477]   (__dp=0x00000000)
[16:27:34.905]      __errorcontrol = 0x00000000;
[16:27:34.905]        // -> [__errorcontrol <= 0x00000000]  (Skip Errors="False")
[16:27:34.905]    </block>
[16:27:34.906]  </sequence>
[16:27:34.906]  
[16:27:34.911]  **********  Sequence "DebugPortStart"  (Context="Reset", Pname="", info="")
[16:27:34.911]  
[16:27:34.911]  <debugvars>
[16:27:34.911]    // Pre-defined
[16:27:34.912]    __protocol=0x00000002      (Protocol="SWD", SWJ-DP="False")
[16:27:34.912]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:27:34.912]    __dp=0x00000000
[16:27:34.913]    __ap=0x00000000
[16:27:34.913]    __traceout=0x00000000      (Trace Disabled)
[16:27:34.914]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:27:34.914]    __FlashAddr=0x00000000
[16:27:34.914]    __FlashLen=0x00000000
[16:27:34.915]    __FlashArg=0x00000000
[16:27:34.915]    __FlashOp=0x00000000
[16:27:34.915]    __Result=0x00000000
[16:27:34.916]  </debugvars>
[16:27:34.916]  
[16:27:34.916]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:27:34.916]    <block atomic="false" info="">
[16:27:34.917]      __var SW_DP_ABORT  = 0x0;
[16:27:34.917]        // -> [SW_DP_ABORT <= 0x00000000]
[16:27:34.917]      __var DP_CTRL_STAT = 0x4;
[16:27:34.918]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:27:34.918]      __var DP_SELECT    = 0x8;
[16:27:34.918]        // -> [DP_SELECT <= 0x00000008]
[16:27:34.918]      __var powered_down = 0;
[16:27:34.919]        // -> [powered_down <= 0x00000000]
[16:27:34.920]      WriteDP(DP_SELECT, 0x00000000);
[16:27:34.922]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:27:34.922]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:27:34.924]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:27:34.924]        // -> [powered_down <= 0x00000001]
[16:27:34.924]    </block>
[16:27:34.924]    <control if="powered_down" while="" timeout="0" info="">
[16:27:34.925]      // if-block "powered_down"
[16:27:34.925]        // =>  TRUE
[16:27:34.925]      <block atomic="false" info="">
[16:27:34.926]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:27:34.926]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:27:34.927]      </block>
[16:27:34.927]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:27:34.927]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:27:34.928]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:27:34.929]        // while-condition  =>  FALSE
[16:27:34.929]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:27:34.929]      </control>
[16:27:34.929]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:27:34.930]        // if-block "(__protocol & 0xFFFF) == 1"
[16:27:34.930]          // =>  FALSE
[16:27:34.930]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:27:34.931]      </control>
[16:27:34.931]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:27:34.931]        // if-block "(__protocol & 0xFFFF) == 2"
[16:27:34.931]          // =>  TRUE
[16:27:34.932]        <block atomic="false" info="">
[16:27:34.932]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:27:34.933]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:27:34.933]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:27:34.935]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:27:34.936]        </block>
[16:27:34.936]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:27:34.936]      </control>
[16:27:34.937]      // end if-block "powered_down"
[16:27:34.937]    </control>
[16:27:34.937]  </sequence>
[16:27:34.937]  
[16:27:34.942]  **********  Sequence "DebugCoreStart"  (Context="Reset", Pname="", info="")
[16:27:34.942]  
[16:27:34.943]  <debugvars>
[16:27:34.943]    // Pre-defined
[16:27:34.943]    __protocol=0x00000002      (Protocol="SWD", SWJ-DP="False")
[16:27:34.944]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:27:34.944]    __dp=0x00000000
[16:27:34.944]    __ap=0x00000000
[16:27:34.944]    __traceout=0x00000000      (Trace Disabled)
[16:27:34.945]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:27:34.945]    __FlashAddr=0x00000000
[16:27:34.946]    __FlashLen=0x00000000
[16:27:34.946]    __FlashArg=0x00000000
[16:27:34.946]    __FlashOp=0x00000000
[16:27:34.947]    __Result=0x00000000
[16:27:34.947]  </debugvars>
[16:27:34.947]  
[16:27:34.947]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[16:27:34.948]    <block atomic="true" info="">
[16:27:34.948]      // ATOMIC SEQUENCE - EXECUTE
[16:27:34.950]      __var DP_R_IDCODE    = 0x0;
[16:27:34.950]        // -> [DP_R_IDCODE <= 0x00000000]
[16:27:34.950]      __var DP_W_ABORT    = 0x0;
[16:27:34.950]        // -> [DP_W_ABORT <= 0x00000000]
[16:27:34.951]      __var DP_CTRLSTAT = 0x4;
[16:27:34.951]        // -> [DP_CTRLSTAT <= 0x00000004]
[16:27:34.951]      __var DP_W_SELECT    = 0x8;
[16:27:34.952]        // -> [DP_W_SELECT <= 0x00000008]
[16:27:34.952]      __var AP_TAR		= 0x4;
[16:27:34.952]        // -> [AP_TAR <= 0x00000004]
[16:27:34.952]      __var AP_BD0		= 0x0;
[16:27:34.953]        // -> [AP_BD0 <= 0x00000000]
[16:27:34.953]      __var AP_BD1		= 0x4;
[16:27:34.953]        // -> [AP_BD1 <= 0x00000004]
[16:27:34.954]      __var AP_BD2		= 0x8;
[16:27:34.954]        // -> [AP_BD2 <= 0x00000008]
[16:27:34.954]      __var PCWithinFlash = 0;
[16:27:34.954]        // -> [PCWithinFlash <= 0x00000000]
[16:27:34.955]      Write32(0xE000EDF0, 0xA05F0003);	// Halt the CORE
[16:27:34.955]        // -> [Write32(0xE000EDF0, 0xA05F0003)]   (__dp=0x00000000, __ap=0x00000000)
[16:27:34.955]      // ATOMIC SEQUENCE - DONE
[16:27:34.956]    </block>
[16:27:34.956]    <control if="" while="(Read32(0xE000EDF0) & 0x00020000) != 0x00020000" timeout="1000000" info="">
[16:27:34.956]      // while "(Read32(0xE000EDF0) & 0x00020000) != 0x00020000"  (timeout="1000000")
[16:27:34.959]        // -> [Read32(0xE000EDF0) => 0x01030003]   (__dp=0x00000000, __ap=0x00000000)
[16:27:34.960]      // while-condition  =>  FALSE
[16:27:34.960]      // end while "(Read32(0xE000EDF0) & 0x00020000) != 0x00020000"
[16:27:34.960]    </control>
[16:27:34.961]    <block atomic="true" info="">
[16:27:34.961]      // ATOMIC SEQUENCE - EXECUTE
[16:27:34.964]      WriteDP(DP_W_SELECT, 0x00000000);	//Select 0x00
[16:27:34.964]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:27:34.964]      WriteAP(AP_TAR, 0xE000EDF0);		//Set TAR to DHCSR
[16:27:34.964]        // -> [WriteAP(0x00000004, 0xE000EDF0)]   (__dp=0x00000000, __ap=0x00000000)
[16:27:34.965]      WriteDP(DP_W_SELECT, 0x00000010);	//Select 0x10
[16:27:34.965]        // -> [WriteDP(0x00000008, 0x00000010)]   (__dp=0x00000000)
[16:27:34.965]      WriteAP(AP_BD1, 0x0000000F);		//Trigger read of PC
[16:27:34.966]        // -> [WriteAP(0x00000004, 0x0000000F)]   (__dp=0x00000000, __ap=0x00000000)
[16:27:34.966]      // ATOMIC SEQUENCE - DONE
[16:27:34.966]    </block>
[16:27:34.966]    <control if="" while="(ReadAP(AP_BD0) & 0x00010000) != 0x00010000" timeout="100000" info="">
[16:27:34.967]      // while "(ReadAP(AP_BD0) & 0x00010000) != 0x00010000"  (timeout="100000")
[16:27:34.968]        // -> [ReadAP(0x00000000) => 0x01030003]   (__dp=0x00000000, __ap=0x00000000)
[16:27:34.969]      // while-condition  =>  FALSE
[16:27:34.969]      // end while "(ReadAP(AP_BD0) & 0x00010000) != 0x00010000"
[16:27:34.969]    </control>
[16:27:34.970]    <block atomic="false" info="">
[16:27:34.970]      PCWithinFlash = (ReadAP(AP_BD2) >= 0x10000800);
[16:27:34.972]        // -> [ReadAP(0x00000008) => 0x10000820]   (__dp=0x00000000, __ap=0x00000000)
[16:27:34.972]        // -> [PCWithinFlash <= 0x00000001]
[16:27:34.972]      WriteDP(DP_W_SELECT, 0x00000000);	//Select 0x00
[16:27:34.973]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:27:34.974]    </block>
[16:27:34.974]    <control if="PCWithinFlash == 0" while="" timeout="0" info="">
[16:27:34.974]      // if-block "PCWithinFlash == 0"
[16:27:34.974]        // =>  FALSE
[16:27:34.975]      // skip if-block "PCWithinFlash == 0"
[16:27:34.975]    </control>
[16:27:34.975]  </sequence>
[16:27:34.975]  
[16:27:34.997]  **********  Sequence "ResetCatchClear"  (Context="Reset", Pname="", info="")
[16:27:34.997]  
[16:27:34.997]  <debugvars>
[16:27:34.998]    // Pre-defined
[16:27:34.998]    __protocol=0x00000002      (Protocol="SWD", SWJ-DP="False")
[16:27:34.999]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:27:34.999]    __dp=0x00000000
[16:27:35.000]    __ap=0x00000000
[16:27:35.000]    __traceout=0x00000000      (Trace Disabled)
[16:27:35.001]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:27:35.001]    __FlashAddr=0x00000000
[16:27:35.002]    __FlashLen=0x00000000
[16:27:35.003]    __FlashArg=0x00000000
[16:27:35.003]    __FlashOp=0x00000000
[16:27:35.003]    __Result=0x00000000
[16:27:35.004]  </debugvars>
[16:27:35.004]  
[16:27:35.004]  <sequence name="ResetCatchClear" Pname="" disable="false" info="">
[16:27:35.005]    <block atomic="false" info="">
[16:27:35.005]    </block>
[16:27:35.006]  </sequence>
[16:27:35.006]  
[16:27:35.187]  **********  Sequence "FlashEraseDone"  (Context="Flash Erase", Pname="", info="")
[16:27:35.187]  
[16:27:35.188]  <debugvars>
[16:27:35.189]    // Pre-defined
[16:27:35.189]    __protocol=0x00000002      (Protocol="SWD", SWJ-DP="False")
[16:27:35.190]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:27:35.190]    __dp=0x00000000
[16:27:35.191]    __ap=0x00000000
[16:27:35.191]    __traceout=0x00000000      (Trace Disabled)
[16:27:35.192]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:27:35.192]    __FlashAddr=0x00000000
[16:27:35.192]    __FlashLen=0x00000000
[16:27:35.193]    __FlashArg=0x00000000
[16:27:35.193]    __FlashOp=0x00000000
[16:27:35.193]    __Result=0x00000000
[16:27:35.194]  </debugvars>
[16:27:35.195]  
[16:27:35.195]  <sequence name="FlashEraseDone" Pname="" disable="false" info="">
[16:27:35.196]    <block atomic="false" info="">
[16:27:35.196]      Sequence("ResetHardware");
[16:27:35.197]        <sequence name="ResetHardware" Pname="" disable="false" info="">
[16:27:35.197]          <block atomic="false" info="">
[16:27:35.197]            __var nReset      = 0x80;
[16:27:35.199]              // -> [nReset <= 0x00000080]
[16:27:35.200]            DAP_SWJ_Pins(0x00, nReset, 0);
[16:27:35.202]              // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0xFF]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=1, TDO=1, nTRST=1, nRESET=1)
[16:27:35.202]          </block>
[16:27:35.203]          <control if="" while="1" timeout="50000" info="">
[16:27:35.203]            // while "1"  (timeout="50000")
[16:27:35.204]            // while-condition  =>  TRUE
[16:27:35.204]            // while "1"  (timeout="50000")
[16:27:35.205]            // while-condition  =>  TRUE
[16:27:35.205]            // while "1"  (timeout="50000")
[16:27:35.206]            // while-condition  =>  TRUE
[16:27:35.206]            // while "1"  (timeout="50000")
[16:27:35.206]            // while-condition  =>  TRUE
[16:27:35.207]            // while "1"  (timeout="50000")
[16:27:35.208]            // while-condition  =>  TRUE
[16:27:35.208]            // while "1"  (timeout="50000")
[16:27:35.208]            // while-condition  =>  TRUE
[16:27:35.208]            // while "1"  (timeout="50000")
[16:27:35.209]            // while-condition  =>  TRUE
[16:27:35.209]            // while "1"  (timeout="50000")
[16:27:35.209]            // while-condition  =>  TRUE
[16:27:35.210]            // while "1"  (timeout="50000")
[16:27:35.210]            // while-condition  =>  TRUE
[16:27:35.210]            // while "1"  (timeout="50000")
[16:27:35.210]            // while-condition  =>  TRUE
[16:27:35.211]            // while "1"  (timeout="50000")
[16:27:35.211]            // while-condition  =>  TRUE
[16:27:35.211]            // while "1"  (timeout="50000")
[16:27:35.212]            // while-condition  =>  TRUE
[16:27:35.212]            // while "1"  (timeout="50000")
[16:27:35.212]            // while-condition  =>  TRUE
[16:27:35.212]            // while "1"  (timeout="50000")
[16:27:35.213]            // while-condition  =>  TRUE
[16:27:35.213]            // while "1"  (timeout="50000")
[16:27:35.213]            // while-condition  =>  TRUE
[16:27:35.213]            // while "1"  (timeout="50000")
[16:27:35.213]            // while-condition  =>  TRUE
[16:27:35.213]            // while "1"  (timeout="50000")
[16:27:35.213]            // while-condition  =>  TRUE
[16:27:35.214]            // while "1"  (timeout="50000")
[16:27:35.215]            // while-condition  =>  TRUE
[16:27:35.215]            // while "1"  (timeout="50000")
[16:27:35.215]            // while-condition  =>  TRUE
[16:27:35.215]            // while "1"  (timeout="50000")
[16:27:35.216]            // while-condition  =>  TRUE
[16:27:35.216]            // while "1"  (timeout="50000")
[16:27:35.216]            // while-condition  =>  TRUE
[16:27:35.216]            // while "1"  (timeout="50000")
[16:27:35.216]            // while-condition  =>  TRUE
[16:27:35.217]            // while "1"  (timeout="50000")
[16:27:35.217]            // while-condition  =>  TRUE
[16:27:35.217]            // while "1"  (timeout="50000")
[16:27:35.217]            // while-condition  =>  TRUE
[16:27:35.217]            // while "1"  (timeout="50000")
[16:27:35.218]            // while-condition  =>  TRUE
[16:27:35.218]            // while "1"  (timeout="50000")
[16:27:35.218]            // while-condition  =>  TRUE
[16:27:35.218]            // while "1"  (timeout="50000")
[16:27:35.218]            // while-condition  =>  TRUE
[16:27:35.219]            // while "1"  (timeout="50000")
[16:27:35.219]            // while-condition  =>  TRUE
[16:27:35.219]            // while "1"  (timeout="50000")
[16:27:35.219]            // while-condition  =>  TRUE
[16:27:35.219]            // while "1"  (timeout="50000")
[16:27:35.220]            // while-condition  =>  TRUE
[16:27:35.220]            // while "1"  (timeout="50000")
[16:27:35.220]            // while-condition  =>  TRUE
[16:27:35.220]            // while "1"  (timeout="50000")
[16:27:35.220]            // while-condition  =>  TRUE
[16:27:35.221]            // while "1"  (timeout="50000")
[16:27:35.221]            // while-condition  =>  TRUE
[16:27:35.221]            // while "1"  (timeout="50000")
[16:27:35.221]            // while-condition  =>  TRUE
[16:27:35.221]            // while "1"  (timeout="50000")
[16:27:35.222]            // while-condition  =>  TRUE
[16:27:35.222]            // while "1"  (timeout="50000")
[16:27:35.222]            // while-condition  =>  TRUE
[16:27:35.222]            // while "1"  (timeout="50000")
[16:27:35.222]            // while-condition  =>  TRUE
[16:27:35.222]            // while "1"  (timeout="50000")
[16:27:35.222]            // while-condition  =>  TRUE
[16:27:35.222]            // while "1"  (timeout="50000")
[16:27:35.222]            // while-condition  =>  TRUE
[16:27:35.223]            // while "1"  (timeout="50000")
[16:27:35.223]            // while-condition  =>  TRUE
[16:27:35.224]            // while "1"  (timeout="50000")
[16:27:35.224]            // while-condition  =>  TRUE
[16:27:35.224]            // while "1"  (timeout="50000")
[16:27:35.224]            // while-condition  =>  TRUE
[16:27:35.224]            // while "1"  (timeout="50000")
[16:27:35.225]            // while-condition  =>  TRUE
[16:27:35.225]            // while "1"  (timeout="50000")
[16:27:35.225]            // while-condition  =>  TRUE
[16:27:35.225]            // while "1"  (timeout="50000")
[16:27:35.225]            // while-condition  =>  TRUE
[16:27:35.226]            // while "1"  (timeout="50000")
[16:27:35.226]            // while-condition  =>  TRUE
[16:27:35.226]            // while "1"  (timeout="50000")
[16:27:35.226]            // while-condition  =>  TRUE
[16:27:35.226]            // while "1"  (timeout="50000")
[16:27:35.227]            // while-condition  =>  TRUE
[16:27:35.227]            // while "1"  (timeout="50000")
[16:27:35.227]            // while-condition  =>  TRUE
[16:27:35.227]            // while "1"  (timeout="50000")
[16:27:35.227]            // while-condition  =>  TRUE
[16:27:35.228]            // while "1"  (timeout="50000")
[16:27:35.228]            // while-condition  =>  TRUE
[16:27:35.228]            // while "1"  (timeout="50000")
[16:27:35.228]            // while-condition  =>  TRUE
[16:27:35.228]            // while "1"  (timeout="50000")
[16:27:35.228]            // while-condition  =>  TRUE
[16:27:35.228]            // while "1"  (timeout="50000")
[16:27:35.228]            // while-condition  =>  TRUE
[16:27:35.228]            // while "1"  (timeout="50000")
[16:27:35.228]            // while-condition  =>  TRUE
[16:27:35.229]            // while "1"  (timeout="50000")
[16:27:35.229]            // while-condition  =>  TRUE
[16:27:35.229]            // while "1"  (timeout="50000")
[16:27:35.229]            // while-condition  =>  TRUE
[16:27:35.229]            // while "1"  (timeout="50000")
[16:27:35.230]            // while-condition  =>  TRUE
[16:27:35.230]            // while "1"  (timeout="50000")
[16:27:35.230]            // while-condition  =>  TRUE
[16:27:35.230]            // while "1"  (timeout="50000")
[16:27:35.231]            // while-condition  =>  TRUE
[16:27:35.231]            // while "1"  (timeout="50000")
[16:27:35.231]            // while-condition  =>  TRUE
[16:27:35.231]            // while "1"  (timeout="50000")
[16:27:35.231]            // while-condition  =>  TRUE
[16:27:35.232]            // while "1"  (timeout="50000")
[16:27:35.232]            // while-condition  =>  TRUE
[16:27:35.232]            // while "1"  (timeout="50000")
[16:27:35.232]            // while-condition  =>  TRUE
[16:27:35.233]            // while "1"  (timeout="50000")
[16:27:35.233]            // while-condition  =>  TRUE
[16:27:35.233]            // while "1"  (timeout="50000")
[16:27:35.233]            // while-condition  =>  TRUE
[16:27:35.234]            // while "1"  (timeout="50000")
[16:27:35.234]            // while-condition  =>  TRUE
[16:27:35.234]            // while "1"  (timeout="50000")
[16:27:35.234]            // while-condition  =>  TRUE
[16:27:35.235]            // while "1"  (timeout="50000")
[16:27:35.236]            // while-condition  =>  TRUE
[16:27:35.236]            // while "1"  (timeout="50000")
[16:27:35.236]            // while-condition  =>  TRUE
[16:27:35.236]            // while "1"  (timeout="50000")
[16:27:35.237]            // while-condition  =>  TRUE
[16:27:35.237]            // while "1"  (timeout="50000")
[16:27:35.237]            // while-condition  =>  TRUE
[16:27:35.237]            // while "1"  (timeout="50000")
[16:27:35.237]            // while-condition  =>  TRUE
[16:27:35.237]            // while "1"  (timeout="50000")
[16:27:35.237]            // while-condition  =>  TRUE
[16:27:35.238]            // while "1"  (timeout="50000")
[16:27:35.238]            // while-condition  =>  TRUE
[16:27:35.238]            // while "1"  (timeout="50000")
[16:27:35.238]            // while-condition  =>  TRUE
[16:27:35.238]            // while "1"  (timeout="50000")
[16:27:35.239]            // while-condition  =>  TRUE
[16:27:35.239]            // while "1"  (timeout="50000")
[16:27:35.239]            // while-condition  =>  TRUE
[16:27:35.240]            // while "1"  (timeout="50000")
[16:27:35.240]            // while-condition  =>  TRUE
[16:27:35.240]            // while "1"  (timeout="50000")
[16:27:35.240]            // while-condition  =>  TRUE
[16:27:35.240]            // while "1"  (timeout="50000")
[16:27:35.240]            // while-condition  =>  TRUE
[16:27:35.240]            // while "1"  (timeout="50000")
[16:27:35.240]            // while-condition  =>  TRUE
[16:27:35.241]            // while "1"  (timeout="50000")
[16:27:35.241]            // while-condition  =>  TRUE
[16:27:35.241]            // while "1"  (timeout="50000")
[16:27:35.241]            // while-condition  =>  TRUE
[16:27:35.241]            // while "1"  (timeout="50000")
[16:27:35.242]            // while-condition  =>  TRUE
[16:27:35.242]            // while "1"  (timeout="50000")
[16:27:35.242]            // while-condition  =>  TRUE
[16:27:35.243]            // while "1"  (timeout="50000")
[16:27:35.243]            // while-condition  =>  TRUE
[16:27:35.243]            // while "1"  (timeout="50000")
[16:27:35.243]            // while-condition  =>  TRUE
[16:27:35.243]            // while "1"  (timeout="50000")
[16:27:35.244]            // while-condition  =>  TRUE
[16:27:35.244]            // while "1"  (timeout="50000")
[16:27:35.244]            // while-condition  =>  TRUE
[16:27:35.244]            // while "1"  (timeout="50000")
[16:27:35.244]            // while-condition  =>  TRUE
[16:27:35.245]            // while "1"  (timeout="50000")
[16:27:35.245]            // while-condition  =>  TRUE
[16:27:35.245]            // while "1"  (timeout="50000")
[16:27:35.245]            // while-condition  =>  TRUE
[16:27:35.245]            // while "1"  (timeout="50000")
[16:27:35.246]            // while-condition  =>  TRUE
[16:27:35.246]            // while "1"  (timeout="50000")
[16:27:35.246]            // while-condition  =>  TRUE
[16:27:35.246]            // while "1"  (timeout="50000")
[16:27:35.246]            // while-condition  =>  TRUE
[16:27:35.247]            // while "1"  (timeout="50000")
[16:27:35.247]            // while-condition  =>  TRUE
[16:27:35.247]            // while "1"  (timeout="50000")
[16:27:35.247]            // while-condition  =>  TRUE
[16:27:35.247]            // while "1"  (timeout="50000")
[16:27:35.248]            // while-condition  =>  TRUE
[16:27:35.248]            // while "1"  (timeout="50000")
[16:27:35.248]            // while-condition  =>  TRUE
[16:27:35.248]            // while "1"  (timeout="50000")
[16:27:35.248]            // while-condition  =>  TRUE
[16:27:35.249]            // while "1"  (timeout="50000")
[16:27:35.249]            // while-condition  =>  TRUE
[16:27:35.249]            // while "1"  (timeout="50000")
[16:27:35.249]            // while-condition  =>  TRUE
[16:27:35.249]            // while "1"  (timeout="50000")
[16:27:35.250]            // while-condition  =>  TRUE
[16:27:35.250]            // while "1"  (timeout="50000")
[16:27:35.250]            // while-condition  =>  TRUE
[16:27:35.250]            // while "1"  (timeout="50000")
[16:27:35.250]            // while-condition  =>  TRUE
[16:27:35.251]            // while "1"  (timeout="50000")
[16:27:35.251]            // while-condition  =>  TRUE
[16:27:35.251]            // while "1"  (timeout="50000")
[16:27:35.251]            // while-condition  =>  TRUE
[16:27:35.251]            // while "1"  (timeout="50000")
[16:27:35.251]            // while-condition  =>  TRUE
[16:27:35.252]            // while "1"  (timeout="50000")
[16:27:35.252]            // while-condition  =>  TRUE
[16:27:35.252]            // while "1"  (timeout="50000")
[16:27:35.252]            // while-condition  =>  TRUE
[16:27:35.252]            // while "1"  (timeout="50000")
[16:27:35.253]            // while-condition  =>  TRUE
[16:27:35.253]            // while "1"  (timeout="50000")
[16:27:35.253]            // while-condition  =>  TRUE
[16:27:35.253]            // while "1"  (timeout="50000")
[16:27:35.254]            // while-condition  =>  TRUE
[16:27:35.254]            // while "1"  (timeout="50000")
[16:27:35.254]            // while-condition  =>  TRUE
[16:27:35.254]            // while "1"  (timeout="50000")
[16:27:35.254]            // while-condition  =>  TRUE
[16:27:35.254]            // while "1"  (timeout="50000")
[16:27:35.255]            // while-condition  =>  TRUE
[16:27:35.255]            // while "1"  (timeout="50000")
[16:27:35.255]            // while-condition  =>  TRUE
[16:27:35.255]            // while "1"  (timeout="50000")
[16:27:35.255]            // while-condition  =>  TRUE
[16:27:35.256]            // while "1"  (timeout="50000")
[16:27:35.256]            // while  =>  TIMEOUT
[16:27:35.256]            // end while "1"
[16:27:35.256]          </control>
[16:27:35.256]          <block atomic="false" info="">
[16:27:35.257]            DAP_SWJ_Pins(nReset, nReset, 0);
[16:27:35.268]              // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0xFF]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=1, TDO=1, nTRST=1, nRESET=1)
[16:27:35.273]          </block>
[16:27:35.274]          <control if="" while="1" timeout="10000" info="">
[16:27:35.274]            // while "1"  (timeout="10000")
[16:27:35.275]            // while-condition  =>  TRUE
[16:27:35.275]            // while "1"  (timeout="10000")
[16:27:35.275]            // while-condition  =>  TRUE
[16:27:35.276]            // while "1"  (timeout="10000")
[16:27:35.277]            // while-condition  =>  TRUE
[16:27:35.278]            // while "1"  (timeout="10000")
[16:27:35.278]            // while-condition  =>  TRUE
[16:27:35.279]            // while "1"  (timeout="10000")
[16:27:35.279]            // while-condition  =>  TRUE
[16:27:35.279]            // while "1"  (timeout="10000")
[16:27:35.280]            // while-condition  =>  TRUE
[16:27:35.281]            // while "1"  (timeout="10000")
[16:27:35.281]            // while-condition  =>  TRUE
[16:27:35.281]            // while "1"  (timeout="10000")
[16:27:35.282]            // while-condition  =>  TRUE
[16:27:35.282]            // while "1"  (timeout="10000")
[16:27:35.282]            // while-condition  =>  TRUE
[16:27:35.282]            // while "1"  (timeout="10000")
[16:27:35.283]            // while-condition  =>  TRUE
[16:27:35.283]            // while "1"  (timeout="10000")
[16:27:35.283]            // while-condition  =>  TRUE
[16:27:35.284]            // while "1"  (timeout="10000")
[16:27:35.284]            // while-condition  =>  TRUE
[16:27:35.284]            // while "1"  (timeout="10000")
[16:27:35.284]            // while-condition  =>  TRUE
[16:27:35.285]            // while "1"  (timeout="10000")
[16:27:35.285]            // while-condition  =>  TRUE
[16:27:35.285]            // while "1"  (timeout="10000")
[16:27:35.286]            // while-condition  =>  TRUE
[16:27:35.286]            // while "1"  (timeout="10000")
[16:27:35.286]            // while  =>  TIMEOUT
[16:27:35.286]            // end while "1"
[16:27:35.287]          </control>
[16:27:35.287]          <block atomic="true" info="">
[16:27:35.287]            // ATOMIC SEQUENCE - EXECUTE
[16:27:35.289]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  // 50 cycles SWDIO/TMS High
[16:27:35.290]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:27:35.290]            DAP_SWJ_Sequence(3,  0x00);                // At least 3 idle cycles (SWDIO/TMS Low)
[16:27:35.290]              // -> [DAP_SWJ_Sequence(3, 0x0000000000000000)]
[16:27:35.291]            // ATOMIC SEQUENCE - DONE
[16:27:35.291]          </block>
[16:27:35.291]          <block atomic="false" info="">
[16:27:35.291]            __errorcontrol = 0x00000001;
[16:27:35.291]              // -> [__errorcontrol <= 0x00000001]  (Skip Errors="True")
[16:27:35.292]            ReadDP(0x0);
[16:27:35.293]              // -> [ReadDP(0x00000000) => 0x0BC11477]   (__dp=0x00000000)
[16:27:35.294]            __errorcontrol = 0x00000000;
[16:27:35.294]              // -> [__errorcontrol <= 0x00000000]  (Skip Errors="False")
[16:27:35.294]          </block>
[16:27:35.295]        </sequence>
[16:27:35.295]      Sequence("DebugPortSetup");
[16:27:35.295]        <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:27:35.295]        </sequence>
[16:27:35.295]      Sequence("DebugPortStart");
[16:27:35.295]        <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:27:35.297]          <block atomic="false" info="">
[16:27:35.297]            __var SW_DP_ABORT  = 0x0;
[16:27:35.297]              // -> [SW_DP_ABORT <= 0x00000000]
[16:27:35.297]            __var DP_CTRL_STAT = 0x4;
[16:27:35.298]              // -> [DP_CTRL_STAT <= 0x00000004]
[16:27:35.299]            __var DP_SELECT    = 0x8;
[16:27:35.299]              // -> [DP_SELECT <= 0x00000008]
[16:27:35.299]            __var powered_down = 0;
[16:27:35.300]              // -> [powered_down <= 0x00000000]
[16:27:35.300]            WriteDP(DP_SELECT, 0x00000000);
[16:27:35.302]              // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:27:35.302]            powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:27:35.304]              // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:27:35.304]              // -> [powered_down <= 0x00000001]
[16:27:35.304]          </block>
[16:27:35.305]          <control if="powered_down" while="" timeout="0" info="">
[16:27:35.305]            // if-block "powered_down"
[16:27:35.305]              // =>  TRUE
[16:27:35.306]            <block atomic="false" info="">
[16:27:35.306]              WriteDP(DP_CTRL_STAT, 0x50000000);
[16:27:35.307]                // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:27:35.307]            </block>
[16:27:35.307]            <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:27:35.307]              // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:27:35.310]                // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:27:35.310]              // while-condition  =>  FALSE
[16:27:35.310]              // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:27:35.310]            </control>
[16:27:35.311]            <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:27:35.311]              // if-block "(__protocol & 0xFFFF) == 1"
[16:27:35.311]                // =>  FALSE
[16:27:35.311]              // skip if-block "(__protocol & 0xFFFF) == 1"
[16:27:35.312]            </control>
[16:27:35.312]            <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:27:35.312]              // if-block "(__protocol & 0xFFFF) == 2"
[16:27:35.313]                // =>  TRUE
[16:27:35.313]              <block atomic="false" info="">
[16:27:35.313]                WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:27:35.315]                  // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:27:35.315]                WriteDP(SW_DP_ABORT, 0x0000001E);
[16:27:35.317]                  // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:27:35.317]              </block>
[16:27:35.317]              // end if-block "(__protocol & 0xFFFF) == 2"
[16:27:35.317]            </control>
[16:27:35.318]            // end if-block "powered_down"
[16:27:35.318]          </control>
[16:27:35.318]        </sequence>
[16:27:35.319]      Sequence("DebugCoreStart");
[16:27:35.319]        <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[16:27:35.319]          <block atomic="true" info="">
[16:27:35.319]            // ATOMIC SEQUENCE - EXECUTE
[16:27:35.322]            __var DP_R_IDCODE    = 0x0;
[16:27:35.322]              // -> [DP_R_IDCODE <= 0x00000000]
[16:27:35.322]            __var DP_W_ABORT    = 0x0;
[16:27:35.322]              // -> [DP_W_ABORT <= 0x00000000]
[16:27:35.322]            __var DP_CTRLSTAT = 0x4;
[16:27:35.322]              // -> [DP_CTRLSTAT <= 0x00000004]
[16:27:35.323]            __var DP_W_SELECT    = 0x8;
[16:27:35.323]              // -> [DP_W_SELECT <= 0x00000008]
[16:27:35.323]            __var AP_TAR		= 0x4;
[16:27:35.323]              // -> [AP_TAR <= 0x00000004]
[16:27:35.325]            __var AP_BD0		= 0x0;
[16:27:35.325]              // -> [AP_BD0 <= 0x00000000]
[16:27:35.325]            __var AP_BD1		= 0x4;
[16:27:35.325]              // -> [AP_BD1 <= 0x00000004]
[16:27:35.325]            __var AP_BD2		= 0x8;
[16:27:35.325]              // -> [AP_BD2 <= 0x00000008]
[16:27:35.325]            __var PCWithinFlash = 0;
[16:27:35.326]              // -> [PCWithinFlash <= 0x00000000]
[16:27:35.326]            Write32(0xE000EDF0, 0xA05F0003);	// Halt the CORE
[16:27:35.326]              // -> [Write32(0xE000EDF0, 0xA05F0003)]   (__dp=0x00000000, __ap=0x00000000)
[16:27:35.326]            // ATOMIC SEQUENCE - DONE
[16:27:35.326]          </block>
[16:27:35.327]          <control if="" while="(Read32(0xE000EDF0) & 0x00020000) != 0x00020000" timeout="1000000" info="">
[16:27:35.327]            // while "(Read32(0xE000EDF0) & 0x00020000) != 0x00020000"  (timeout="1000000")
[16:27:35.331]              // -> [Read32(0xE000EDF0) => 0x03030003]   (__dp=0x00000000, __ap=0x00000000)
[16:27:35.332]            // while-condition  =>  FALSE
[16:27:35.332]            // end while "(Read32(0xE000EDF0) & 0x00020000) != 0x00020000"
[16:27:35.332]          </control>
[16:27:35.333]          <block atomic="true" info="">
[16:27:35.333]            // ATOMIC SEQUENCE - EXECUTE
[16:27:35.334]            WriteDP(DP_W_SELECT, 0x00000000);	//Select 0x00
[16:27:35.334]              // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:27:35.334]            WriteAP(AP_TAR, 0xE000EDF0);		//Set TAR to DHCSR
[16:27:35.334]              // -> [WriteAP(0x00000004, 0xE000EDF0)]   (__dp=0x00000000, __ap=0x00000000)
[16:27:35.335]            WriteDP(DP_W_SELECT, 0x00000010);	//Select 0x10
[16:27:35.335]              // -> [WriteDP(0x00000008, 0x00000010)]   (__dp=0x00000000)
[16:27:35.335]            WriteAP(AP_BD1, 0x0000000F);		//Trigger read of PC
[16:27:35.335]              // -> [WriteAP(0x00000004, 0x0000000F)]   (__dp=0x00000000, __ap=0x00000000)
[16:27:35.337]            // ATOMIC SEQUENCE - DONE
[16:27:35.337]          </block>
[16:27:35.337]          <control if="" while="(ReadAP(AP_BD0) & 0x00010000) != 0x00010000" timeout="100000" info="">
[16:27:35.338]            // while "(ReadAP(AP_BD0) & 0x00010000) != 0x00010000"  (timeout="100000")
[16:27:35.339]              // -> [ReadAP(0x00000000) => 0x01030003]   (__dp=0x00000000, __ap=0x00000000)
[16:27:35.339]            // while-condition  =>  FALSE
[16:27:35.340]            // end while "(ReadAP(AP_BD0) & 0x00010000) != 0x00010000"
[16:27:35.340]          </control>
[16:27:35.341]          <block atomic="false" info="">
[16:27:35.341]            PCWithinFlash = (ReadAP(AP_BD2) >= 0x10000800);
[16:27:35.343]              // -> [ReadAP(0x00000008) => 0x10000820]   (__dp=0x00000000, __ap=0x00000000)
[16:27:35.343]              // -> [PCWithinFlash <= 0x00000001]
[16:27:35.343]            WriteDP(DP_W_SELECT, 0x00000000);	//Select 0x00
[16:27:35.345]              // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:27:35.345]          </block>
[16:27:35.345]          <control if="PCWithinFlash == 0" while="" timeout="0" info="">
[16:27:35.345]            // if-block "PCWithinFlash == 0"
[16:27:35.346]              // =>  FALSE
[16:27:35.346]            // skip if-block "PCWithinFlash == 0"
[16:27:35.346]          </control>
[16:27:35.347]        </sequence>
[16:27:35.347]    </block>
[16:27:35.347]  </sequence>
[16:27:35.347]  
[16:27:42.736]  **********  Sequence "DebugPortStop"  (Context="Disconnect", Pname="", info="")
[16:27:42.736]  
[16:27:42.737]  <debugvars>
[16:27:42.737]    // Pre-defined
[16:27:42.738]    __protocol=0x00000002      (Protocol="SWD", SWJ-DP="False")
[16:27:42.739]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:27:42.739]    __dp=0x00000000
[16:27:42.740]    __ap=0x00000000
[16:27:42.740]    __traceout=0x00000000      (Trace Disabled)
[16:27:42.741]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:27:42.742]    __FlashAddr=0x00000000
[16:27:42.742]    __FlashLen=0x00000000
[16:27:42.742]    __FlashArg=0x00000000
[16:27:42.743]    __FlashOp=0x00000000
[16:27:42.744]    __Result=0x00000000
[16:27:42.745]  </debugvars>
[16:27:42.745]  
[16:27:42.745]  <sequence name="DebugPortStop" Pname="" disable="false" info="">
[16:27:42.746]    <block atomic="false" info="">
[16:27:42.747]      __var nReset      = 0x80;
[16:27:42.747]        // -> [nReset <= 0x00000080]
[16:27:42.748]      DAP_SWJ_Pins(0x00, nReset, 0);
[16:27:42.749]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0xFF]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=1, TDO=1, nTRST=1, nRESET=1)
[16:27:42.750]    </block>
[16:27:42.750]    <control if="" while="1" timeout="50000" info="">
[16:27:42.750]      // while "1"  (timeout="50000")
[16:27:42.751]      // while-condition  =>  TRUE
[16:27:42.751]      // while "1"  (timeout="50000")
[16:27:42.752]      // while-condition  =>  TRUE
[16:27:42.752]      // while "1"  (timeout="50000")
[16:27:42.753]      // while-condition  =>  TRUE
[16:27:42.753]      // while "1"  (timeout="50000")
[16:27:42.753]      // while-condition  =>  TRUE
[16:27:42.754]      // while "1"  (timeout="50000")
[16:27:42.754]      // while-condition  =>  TRUE
[16:27:42.755]      // while "1"  (timeout="50000")
[16:27:42.755]      // while-condition  =>  TRUE
[16:27:42.756]      // while "1"  (timeout="50000")
[16:27:42.756]      // while-condition  =>  TRUE
[16:27:42.756]      // while "1"  (timeout="50000")
[16:27:42.757]      // while-condition  =>  TRUE
[16:27:42.757]      // while "1"  (timeout="50000")
[16:27:42.757]      // while-condition  =>  TRUE
[16:27:42.758]      // while "1"  (timeout="50000")
[16:27:42.758]      // while-condition  =>  TRUE
[16:27:42.758]      // while "1"  (timeout="50000")
[16:27:42.759]      // while-condition  =>  TRUE
[16:27:42.760]      // while "1"  (timeout="50000")
[16:27:42.760]      // while-condition  =>  TRUE
[16:27:42.760]      // while "1"  (timeout="50000")
[16:27:42.760]      // while-condition  =>  TRUE
[16:27:42.761]      // while "1"  (timeout="50000")
[16:27:42.761]      // while-condition  =>  TRUE
[16:27:42.761]      // while "1"  (timeout="50000")
[16:27:42.762]      // while-condition  =>  TRUE
[16:27:42.762]      // while "1"  (timeout="50000")
[16:27:42.762]      // while-condition  =>  TRUE
[16:27:42.762]      // while "1"  (timeout="50000")
[16:27:42.763]      // while-condition  =>  TRUE
[16:27:42.763]      // while "1"  (timeout="50000")
[16:27:42.763]      // while-condition  =>  TRUE
[16:27:42.763]      // while "1"  (timeout="50000")
[16:27:42.764]      // while-condition  =>  TRUE
[16:27:42.764]      // while "1"  (timeout="50000")
[16:27:42.764]      // while-condition  =>  TRUE
[16:27:42.765]      // while "1"  (timeout="50000")
[16:27:42.765]      // while-condition  =>  TRUE
[16:27:42.765]      // while "1"  (timeout="50000")
[16:27:42.765]      // while-condition  =>  TRUE
[16:27:42.765]      // while "1"  (timeout="50000")
[16:27:42.765]      // while-condition  =>  TRUE
[16:27:42.765]      // while "1"  (timeout="50000")
[16:27:42.765]      // while-condition  =>  TRUE
[16:27:42.767]      // while "1"  (timeout="50000")
[16:27:42.767]      // while-condition  =>  TRUE
[16:27:42.767]      // while "1"  (timeout="50000")
[16:27:42.767]      // while-condition  =>  TRUE
[16:27:42.767]      // while "1"  (timeout="50000")
[16:27:42.768]      // while-condition  =>  TRUE
[16:27:42.768]      // while "1"  (timeout="50000")
[16:27:42.768]      // while-condition  =>  TRUE
[16:27:42.768]      // while "1"  (timeout="50000")
[16:27:42.769]      // while-condition  =>  TRUE
[16:27:42.769]      // while "1"  (timeout="50000")
[16:27:42.769]      // while-condition  =>  TRUE
[16:27:42.769]      // while "1"  (timeout="50000")
[16:27:42.769]      // while-condition  =>  TRUE
[16:27:42.769]      // while "1"  (timeout="50000")
[16:27:42.770]      // while-condition  =>  TRUE
[16:27:42.770]      // while "1"  (timeout="50000")
[16:27:42.770]      // while-condition  =>  TRUE
[16:27:42.770]      // while "1"  (timeout="50000")
[16:27:42.770]      // while-condition  =>  TRUE
[16:27:42.771]      // while "1"  (timeout="50000")
[16:27:42.771]      // while-condition  =>  TRUE
[16:27:42.771]      // while "1"  (timeout="50000")
[16:27:42.771]      // while-condition  =>  TRUE
[16:27:42.771]      // while "1"  (timeout="50000")
[16:27:42.772]      // while-condition  =>  TRUE
[16:27:42.772]      // while "1"  (timeout="50000")
[16:27:42.772]      // while-condition  =>  TRUE
[16:27:42.772]      // while "1"  (timeout="50000")
[16:27:42.773]      // while-condition  =>  TRUE
[16:27:42.773]      // while "1"  (timeout="50000")
[16:27:42.773]      // while-condition  =>  TRUE
[16:27:42.773]      // while "1"  (timeout="50000")
[16:27:42.773]      // while-condition  =>  TRUE
[16:27:42.774]      // while "1"  (timeout="50000")
[16:27:42.774]      // while-condition  =>  TRUE
[16:27:42.774]      // while "1"  (timeout="50000")
[16:27:42.774]      // while-condition  =>  TRUE
[16:27:42.774]      // while "1"  (timeout="50000")
[16:27:42.774]      // while-condition  =>  TRUE
[16:27:42.774]      // while "1"  (timeout="50000")
[16:27:42.774]      // while-condition  =>  TRUE
[16:27:42.774]      // while "1"  (timeout="50000")
[16:27:42.775]      // while-condition  =>  TRUE
[16:27:42.775]      // while "1"  (timeout="50000")
[16:27:42.775]      // while-condition  =>  TRUE
[16:27:42.775]      // while "1"  (timeout="50000")
[16:27:42.775]      // while-condition  =>  TRUE
[16:27:42.776]      // while "1"  (timeout="50000")
[16:27:42.777]      // while-condition  =>  TRUE
[16:27:42.777]      // while "1"  (timeout="50000")
[16:27:42.777]      // while-condition  =>  TRUE
[16:27:42.777]      // while "1"  (timeout="50000")
[16:27:42.777]      // while-condition  =>  TRUE
[16:27:42.778]      // while "1"  (timeout="50000")
[16:27:42.778]      // while-condition  =>  TRUE
[16:27:42.778]      // while "1"  (timeout="50000")
[16:27:42.778]      // while-condition  =>  TRUE
[16:27:42.778]      // while "1"  (timeout="50000")
[16:27:42.778]      // while-condition  =>  TRUE
[16:27:42.779]      // while "1"  (timeout="50000")
[16:27:42.779]      // while-condition  =>  TRUE
[16:27:42.779]      // while "1"  (timeout="50000")
[16:27:42.779]      // while-condition  =>  TRUE
[16:27:42.779]      // while "1"  (timeout="50000")
[16:27:42.780]      // while-condition  =>  TRUE
[16:27:42.780]      // while "1"  (timeout="50000")
[16:27:42.780]      // while-condition  =>  TRUE
[16:27:42.780]      // while "1"  (timeout="50000")
[16:27:42.780]      // while-condition  =>  TRUE
[16:27:42.781]      // while "1"  (timeout="50000")
[16:27:42.781]      // while-condition  =>  TRUE
[16:27:42.781]      // while "1"  (timeout="50000")
[16:27:42.781]      // while-condition  =>  TRUE
[16:27:42.781]      // while "1"  (timeout="50000")
[16:27:42.782]      // while-condition  =>  TRUE
[16:27:42.782]      // while "1"  (timeout="50000")
[16:27:42.782]      // while-condition  =>  TRUE
[16:27:42.782]      // while "1"  (timeout="50000")
[16:27:42.782]      // while-condition  =>  TRUE
[16:27:42.782]      // while "1"  (timeout="50000")
[16:27:42.782]      // while-condition  =>  TRUE
[16:27:42.782]      // while "1"  (timeout="50000")
[16:27:42.783]      // while-condition  =>  TRUE
[16:27:42.783]      // while "1"  (timeout="50000")
[16:27:42.783]      // while-condition  =>  TRUE
[16:27:42.783]      // while "1"  (timeout="50000")
[16:27:42.783]      // while-condition  =>  TRUE
[16:27:42.784]      // while "1"  (timeout="50000")
[16:27:42.784]      // while-condition  =>  TRUE
[16:27:42.785]      // while "1"  (timeout="50000")
[16:27:42.785]      // while-condition  =>  TRUE
[16:27:42.785]      // while "1"  (timeout="50000")
[16:27:42.785]      // while-condition  =>  TRUE
[16:27:42.785]      // while "1"  (timeout="50000")
[16:27:42.786]      // while-condition  =>  TRUE
[16:27:42.786]      // while "1"  (timeout="50000")
[16:27:42.786]      // while-condition  =>  TRUE
[16:27:42.786]      // while "1"  (timeout="50000")
[16:27:42.786]      // while-condition  =>  TRUE
[16:27:42.787]      // while "1"  (timeout="50000")
[16:27:42.787]      // while-condition  =>  TRUE
[16:27:42.787]      // while "1"  (timeout="50000")
[16:27:42.787]      // while-condition  =>  TRUE
[16:27:42.787]      // while "1"  (timeout="50000")
[16:27:42.788]      // while-condition  =>  TRUE
[16:27:42.788]      // while "1"  (timeout="50000")
[16:27:42.788]      // while-condition  =>  TRUE
[16:27:42.788]      // while "1"  (timeout="50000")
[16:27:42.788]      // while-condition  =>  TRUE
[16:27:42.788]      // while "1"  (timeout="50000")
[16:27:42.789]      // while-condition  =>  TRUE
[16:27:42.789]      // while "1"  (timeout="50000")
[16:27:42.789]      // while-condition  =>  TRUE
[16:27:42.789]      // while "1"  (timeout="50000")
[16:27:42.789]      // while-condition  =>  TRUE
[16:27:42.790]      // while "1"  (timeout="50000")
[16:27:42.790]      // while-condition  =>  TRUE
[16:27:42.790]      // while "1"  (timeout="50000")
[16:27:42.790]      // while-condition  =>  TRUE
[16:27:42.790]      // while "1"  (timeout="50000")
[16:27:42.791]      // while-condition  =>  TRUE
[16:27:42.791]      // while "1"  (timeout="50000")
[16:27:42.791]      // while-condition  =>  TRUE
[16:27:42.791]      // while "1"  (timeout="50000")
[16:27:42.791]      // while-condition  =>  TRUE
[16:27:42.792]      // while "1"  (timeout="50000")
[16:27:42.792]      // while-condition  =>  TRUE
[16:27:42.792]      // while "1"  (timeout="50000")
[16:27:42.792]      // while-condition  =>  TRUE
[16:27:42.792]      // while "1"  (timeout="50000")
[16:27:42.793]      // while-condition  =>  TRUE
[16:27:42.793]      // while "1"  (timeout="50000")
[16:27:42.793]      // while-condition  =>  TRUE
[16:27:42.793]      // while "1"  (timeout="50000")
[16:27:42.793]      // while-condition  =>  TRUE
[16:27:42.794]      // while "1"  (timeout="50000")
[16:27:42.794]      // while-condition  =>  TRUE
[16:27:42.794]      // while "1"  (timeout="50000")
[16:27:42.794]      // while-condition  =>  TRUE
[16:27:42.794]      // while "1"  (timeout="50000")
[16:27:42.795]      // while-condition  =>  TRUE
[16:27:42.795]      // while "1"  (timeout="50000")
[16:27:42.795]      // while-condition  =>  TRUE
[16:27:42.795]      // while "1"  (timeout="50000")
[16:27:42.795]      // while-condition  =>  TRUE
[16:27:42.795]      // while "1"  (timeout="50000")
[16:27:42.796]      // while-condition  =>  TRUE
[16:27:42.796]      // while "1"  (timeout="50000")
[16:27:42.796]      // while-condition  =>  TRUE
[16:27:42.796]      // while "1"  (timeout="50000")
[16:27:42.796]      // while-condition  =>  TRUE
[16:27:42.796]      // while "1"  (timeout="50000")
[16:27:42.797]      // while-condition  =>  TRUE
[16:27:42.797]      // while "1"  (timeout="50000")
[16:27:42.797]      // while-condition  =>  TRUE
[16:27:42.797]      // while "1"  (timeout="50000")
[16:27:42.798]      // while-condition  =>  TRUE
[16:27:42.798]      // while "1"  (timeout="50000")
[16:27:42.798]      // while-condition  =>  TRUE
[16:27:42.798]      // while "1"  (timeout="50000")
[16:27:42.798]      // while-condition  =>  TRUE
[16:27:42.798]      // while "1"  (timeout="50000")
[16:27:42.798]      // while-condition  =>  TRUE
[16:27:42.798]      // while "1"  (timeout="50000")
[16:27:42.799]      // while-condition  =>  TRUE
[16:27:42.799]      // while "1"  (timeout="50000")
[16:27:42.800]      // while-condition  =>  TRUE
[16:27:42.800]      // while "1"  (timeout="50000")
[16:27:42.800]      // while-condition  =>  TRUE
[16:27:42.800]      // while "1"  (timeout="50000")
[16:27:42.800]      // while-condition  =>  TRUE
[16:27:42.801]      // while "1"  (timeout="50000")
[16:27:42.801]      // while-condition  =>  TRUE
[16:27:42.801]      // while "1"  (timeout="50000")
[16:27:42.801]      // while-condition  =>  TRUE
[16:27:42.801]      // while "1"  (timeout="50000")
[16:27:42.802]      // while  =>  TIMEOUT
[16:27:42.802]      // end while "1"
[16:27:42.802]    </control>
[16:27:42.802]    <block atomic="false" info="">
[16:27:42.802]      DAP_SWJ_Pins(nReset, nReset, 0);
[16:27:42.813]        // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0xFF]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=1, TDO=1, nTRST=1, nRESET=1)
[16:27:42.814]    </block>
[16:27:42.814]  </sequence>
[16:27:42.816]  
[17:14:52.970]  **********  Sequence "ResetHardware"  (Context="Connect", Pname="", info="")
[17:14:52.970]  
[17:14:52.971]  <debugvars>
[17:14:52.971]    // Pre-defined
[17:14:52.971]    __protocol=0x00000002      (Protocol="SWD", SWJ-DP="False")
[17:14:52.972]    __connection=0x00020202    (Connection Type="Flash", Reset Type="System Reset", Pre-Connect HW Reset)
[17:14:52.972]    __dp=0x00000000
[17:14:52.972]    __ap=0x00000000
[17:14:52.972]    __traceout=0x00000000      (Trace Disabled)
[17:14:52.972]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:14:52.973]    __FlashAddr=0x00000000
[17:14:52.973]    __FlashLen=0x00000000
[17:14:52.973]    __FlashArg=0x00000000
[17:14:52.974]    __FlashOp=0x00000000
[17:14:52.974]    __Result=0x00000000
[17:14:52.974]  </debugvars>
[17:14:52.974]  
[17:14:52.975]  <sequence name="ResetHardware" Pname="" disable="false" info="">
[17:14:52.975]    <block atomic="false" info="">
[17:14:52.975]      __var nReset      = 0x80;
[17:14:52.975]        // -> [nReset <= 0x00000080]
[17:14:52.976]      DAP_SWJ_Pins(0x00, nReset, 0);
[17:14:52.977]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0xFF]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=1, TDO=1, nTRST=1, nRESET=1)
[17:14:52.977]    </block>
[17:14:52.977]    <control if="" while="1" timeout="50000" info="">
[17:14:52.978]      // while "1"  (timeout="50000")
[17:14:52.978]      // while-condition  =>  TRUE
[17:14:52.978]      // while "1"  (timeout="50000")
[17:14:52.978]      // while-condition  =>  TRUE
[17:14:52.978]      // while "1"  (timeout="50000")
[17:14:52.979]      // while-condition  =>  TRUE
[17:14:52.979]      // while "1"  (timeout="50000")
[17:14:52.979]      // while-condition  =>  TRUE
[17:14:52.979]      // while "1"  (timeout="50000")
[17:14:52.979]      // while-condition  =>  TRUE
[17:14:52.980]      // while "1"  (timeout="50000")
[17:14:52.980]      // while-condition  =>  TRUE
[17:14:52.980]      // while "1"  (timeout="50000")
[17:14:52.980]      // while-condition  =>  TRUE
[17:14:52.980]      // while "1"  (timeout="50000")
[17:14:52.981]      // while-condition  =>  TRUE
[17:14:52.981]      // while "1"  (timeout="50000")
[17:14:52.981]      // while-condition  =>  TRUE
[17:14:52.982]      // while "1"  (timeout="50000")
[17:14:52.982]      // while-condition  =>  TRUE
[17:14:52.982]      // while "1"  (timeout="50000")
[17:14:52.982]      // while-condition  =>  TRUE
[17:14:52.983]      // while "1"  (timeout="50000")
[17:14:52.983]      // while-condition  =>  TRUE
[17:14:52.983]      // while "1"  (timeout="50000")
[17:14:52.983]      // while-condition  =>  TRUE
[17:14:52.984]      // while "1"  (timeout="50000")
[17:14:52.984]      // while-condition  =>  TRUE
[17:14:52.984]      // while "1"  (timeout="50000")
[17:14:52.984]      // while-condition  =>  TRUE
[17:14:52.984]      // while "1"  (timeout="50000")
[17:14:52.985]      // while-condition  =>  TRUE
[17:14:52.985]      // while "1"  (timeout="50000")
[17:14:52.985]      // while-condition  =>  TRUE
[17:14:52.985]      // while "1"  (timeout="50000")
[17:14:52.986]      // while-condition  =>  TRUE
[17:14:52.986]      // while "1"  (timeout="50000")
[17:14:52.986]      // while-condition  =>  TRUE
[17:14:52.986]      // while "1"  (timeout="50000")
[17:14:52.986]      // while-condition  =>  TRUE
[17:14:52.987]      // while "1"  (timeout="50000")
[17:14:52.987]      // while-condition  =>  TRUE
[17:14:52.987]      // while "1"  (timeout="50000")
[17:14:52.987]      // while-condition  =>  TRUE
[17:14:52.987]      // while "1"  (timeout="50000")
[17:14:52.988]      // while-condition  =>  TRUE
[17:14:52.988]      // while "1"  (timeout="50000")
[17:14:52.988]      // while-condition  =>  TRUE
[17:14:52.988]      // while "1"  (timeout="50000")
[17:14:52.989]      // while-condition  =>  TRUE
[17:14:52.989]      // while "1"  (timeout="50000")
[17:14:52.989]      // while-condition  =>  TRUE
[17:14:52.989]      // while "1"  (timeout="50000")
[17:14:52.989]      // while-condition  =>  TRUE
[17:14:52.990]      // while "1"  (timeout="50000")
[17:14:52.990]      // while-condition  =>  TRUE
[17:14:52.990]      // while "1"  (timeout="50000")
[17:14:52.990]      // while-condition  =>  TRUE
[17:14:52.991]      // while "1"  (timeout="50000")
[17:14:52.991]      // while-condition  =>  TRUE
[17:14:52.991]      // while "1"  (timeout="50000")
[17:14:52.991]      // while-condition  =>  TRUE
[17:14:52.991]      // while "1"  (timeout="50000")
[17:14:52.992]      // while-condition  =>  TRUE
[17:14:52.992]      // while "1"  (timeout="50000")
[17:14:52.992]      // while-condition  =>  TRUE
[17:14:52.992]      // while "1"  (timeout="50000")
[17:14:52.992]      // while-condition  =>  TRUE
[17:14:52.993]      // while "1"  (timeout="50000")
[17:14:52.993]      // while-condition  =>  TRUE
[17:14:52.993]      // while "1"  (timeout="50000")
[17:14:52.993]      // while-condition  =>  TRUE
[17:14:52.993]      // while "1"  (timeout="50000")
[17:14:52.994]      // while-condition  =>  TRUE
[17:14:52.994]      // while "1"  (timeout="50000")
[17:14:52.994]      // while-condition  =>  TRUE
[17:14:52.994]      // while "1"  (timeout="50000")
[17:14:52.995]      // while-condition  =>  TRUE
[17:14:52.995]      // while "1"  (timeout="50000")
[17:14:52.995]      // while-condition  =>  TRUE
[17:14:52.995]      // while "1"  (timeout="50000")
[17:14:52.995]      // while-condition  =>  TRUE
[17:14:52.996]      // while "1"  (timeout="50000")
[17:14:52.996]      // while-condition  =>  TRUE
[17:14:52.996]      // while "1"  (timeout="50000")
[17:14:52.996]      // while-condition  =>  TRUE
[17:14:52.996]      // while "1"  (timeout="50000")
[17:14:52.997]      // while-condition  =>  TRUE
[17:14:52.997]      // while "1"  (timeout="50000")
[17:14:52.997]      // while-condition  =>  TRUE
[17:14:52.997]      // while "1"  (timeout="50000")
[17:14:52.997]      // while-condition  =>  TRUE
[17:14:52.998]      // while "1"  (timeout="50000")
[17:14:52.998]      // while-condition  =>  TRUE
[17:14:52.998]      // while "1"  (timeout="50000")
[17:14:52.998]      // while-condition  =>  TRUE
[17:14:52.998]      // while "1"  (timeout="50000")
[17:14:52.999]      // while-condition  =>  TRUE
[17:14:52.999]      // while "1"  (timeout="50000")
[17:14:52.999]      // while-condition  =>  TRUE
[17:14:52.999]      // while "1"  (timeout="50000")
[17:14:53.000]      // while-condition  =>  TRUE
[17:14:53.000]      // while "1"  (timeout="50000")
[17:14:53.000]      // while-condition  =>  TRUE
[17:14:53.000]      // while "1"  (timeout="50000")
[17:14:53.000]      // while-condition  =>  TRUE
[17:14:53.001]      // while "1"  (timeout="50000")
[17:14:53.001]      // while-condition  =>  TRUE
[17:14:53.001]      // while "1"  (timeout="50000")
[17:14:53.001]      // while-condition  =>  TRUE
[17:14:53.001]      // while "1"  (timeout="50000")
[17:14:53.002]      // while-condition  =>  TRUE
[17:14:53.002]      // while "1"  (timeout="50000")
[17:14:53.002]      // while-condition  =>  TRUE
[17:14:53.002]      // while "1"  (timeout="50000")
[17:14:53.002]      // while-condition  =>  TRUE
[17:14:53.003]      // while "1"  (timeout="50000")
[17:14:53.003]      // while-condition  =>  TRUE
[17:14:53.003]      // while "1"  (timeout="50000")
[17:14:53.003]      // while-condition  =>  TRUE
[17:14:53.003]      // while "1"  (timeout="50000")
[17:14:53.004]      // while-condition  =>  TRUE
[17:14:53.004]      // while "1"  (timeout="50000")
[17:14:53.004]      // while-condition  =>  TRUE
[17:14:53.004]      // while "1"  (timeout="50000")
[17:14:53.005]      // while-condition  =>  TRUE
[17:14:53.005]      // while "1"  (timeout="50000")
[17:14:53.005]      // while-condition  =>  TRUE
[17:14:53.005]      // while "1"  (timeout="50000")
[17:14:53.005]      // while-condition  =>  TRUE
[17:14:53.006]      // while "1"  (timeout="50000")
[17:14:53.006]      // while-condition  =>  TRUE
[17:14:53.006]      // while "1"  (timeout="50000")
[17:14:53.006]      // while-condition  =>  TRUE
[17:14:53.007]      // while "1"  (timeout="50000")
[17:14:53.007]      // while-condition  =>  TRUE
[17:14:53.007]      // while "1"  (timeout="50000")
[17:14:53.007]      // while-condition  =>  TRUE
[17:14:53.008]      // while "1"  (timeout="50000")
[17:14:53.008]      // while-condition  =>  TRUE
[17:14:53.008]      // while "1"  (timeout="50000")
[17:14:53.008]      // while-condition  =>  TRUE
[17:14:53.009]      // while "1"  (timeout="50000")
[17:14:53.009]      // while-condition  =>  TRUE
[17:14:53.009]      // while "1"  (timeout="50000")
[17:14:53.009]      // while-condition  =>  TRUE
[17:14:53.010]      // while "1"  (timeout="50000")
[17:14:53.010]      // while-condition  =>  TRUE
[17:14:53.010]      // while "1"  (timeout="50000")
[17:14:53.010]      // while-condition  =>  TRUE
[17:14:53.011]      // while "1"  (timeout="50000")
[17:14:53.011]      // while-condition  =>  TRUE
[17:14:53.011]      // while "1"  (timeout="50000")
[17:14:53.011]      // while-condition  =>  TRUE
[17:14:53.012]      // while "1"  (timeout="50000")
[17:14:53.012]      // while-condition  =>  TRUE
[17:14:53.012]      // while "1"  (timeout="50000")
[17:14:53.012]      // while-condition  =>  TRUE
[17:14:53.013]      // while "1"  (timeout="50000")
[17:14:53.013]      // while-condition  =>  TRUE
[17:14:53.013]      // while "1"  (timeout="50000")
[17:14:53.013]      // while-condition  =>  TRUE
[17:14:53.014]      // while "1"  (timeout="50000")
[17:14:53.014]      // while-condition  =>  TRUE
[17:14:53.014]      // while "1"  (timeout="50000")
[17:14:53.014]      // while-condition  =>  TRUE
[17:14:53.015]      // while "1"  (timeout="50000")
[17:14:53.015]      // while-condition  =>  TRUE
[17:14:53.015]      // while "1"  (timeout="50000")
[17:14:53.016]      // while-condition  =>  TRUE
[17:14:53.017]      // while "1"  (timeout="50000")
[17:14:53.017]      // while-condition  =>  TRUE
[17:14:53.017]      // while "1"  (timeout="50000")
[17:14:53.017]      // while-condition  =>  TRUE
[17:14:53.018]      // while "1"  (timeout="50000")
[17:14:53.018]      // while-condition  =>  TRUE
[17:14:53.018]      // while "1"  (timeout="50000")
[17:14:53.018]      // while-condition  =>  TRUE
[17:14:53.019]      // while "1"  (timeout="50000")
[17:14:53.019]      // while-condition  =>  TRUE
[17:14:53.019]      // while "1"  (timeout="50000")
[17:14:53.019]      // while-condition  =>  TRUE
[17:14:53.020]      // while "1"  (timeout="50000")
[17:14:53.020]      // while-condition  =>  TRUE
[17:14:53.020]      // while "1"  (timeout="50000")
[17:14:53.020]      // while-condition  =>  TRUE
[17:14:53.020]      // while "1"  (timeout="50000")
[17:14:53.021]      // while-condition  =>  TRUE
[17:14:53.021]      // while "1"  (timeout="50000")
[17:14:53.021]      // while-condition  =>  TRUE
[17:14:53.022]      // while "1"  (timeout="50000")
[17:14:53.022]      // while-condition  =>  TRUE
[17:14:53.022]      // while "1"  (timeout="50000")
[17:14:53.022]      // while-condition  =>  TRUE
[17:14:53.022]      // while "1"  (timeout="50000")
[17:14:53.023]      // while-condition  =>  TRUE
[17:14:53.023]      // while "1"  (timeout="50000")
[17:14:53.023]      // while-condition  =>  TRUE
[17:14:53.023]      // while "1"  (timeout="50000")
[17:14:53.024]      // while-condition  =>  TRUE
[17:14:53.024]      // while "1"  (timeout="50000")
[17:14:53.024]      // while-condition  =>  TRUE
[17:14:53.024]      // while "1"  (timeout="50000")
[17:14:53.025]      // while-condition  =>  TRUE
[17:14:53.025]      // while "1"  (timeout="50000")
[17:14:53.025]      // while-condition  =>  TRUE
[17:14:53.025]      // while "1"  (timeout="50000")
[17:14:53.026]      // while-condition  =>  TRUE
[17:14:53.026]      // while "1"  (timeout="50000")
[17:14:53.026]      // while-condition  =>  TRUE
[17:14:53.026]      // while "1"  (timeout="50000")
[17:14:53.027]      // while-condition  =>  TRUE
[17:14:53.027]      // while "1"  (timeout="50000")
[17:14:53.027]      // while-condition  =>  TRUE
[17:14:53.027]      // while "1"  (timeout="50000")
[17:14:53.028]      // while-condition  =>  TRUE
[17:14:53.028]      // while "1"  (timeout="50000")
[17:14:53.028]      // while-condition  =>  TRUE
[17:14:53.028]      // while "1"  (timeout="50000")
[17:14:53.029]      // while-condition  =>  TRUE
[17:14:53.029]      // while "1"  (timeout="50000")
[17:14:53.029]      // while-condition  =>  TRUE
[17:14:53.029]      // while "1"  (timeout="50000")
[17:14:53.029]      // while-condition  =>  TRUE
[17:14:53.030]      // while "1"  (timeout="50000")
[17:14:53.030]      // while-condition  =>  TRUE
[17:14:53.030]      // while "1"  (timeout="50000")
[17:14:53.030]      // while-condition  =>  TRUE
[17:14:53.031]      // while "1"  (timeout="50000")
[17:14:53.031]      // while-condition  =>  TRUE
[17:14:53.031]      // while "1"  (timeout="50000")
[17:14:53.031]      // while-condition  =>  TRUE
[17:14:53.031]      // while "1"  (timeout="50000")
[17:14:53.032]      // while-condition  =>  TRUE
[17:14:53.032]      // while "1"  (timeout="50000")
[17:14:53.032]      // while-condition  =>  TRUE
[17:14:53.032]      // while "1"  (timeout="50000")
[17:14:53.033]      // while-condition  =>  TRUE
[17:14:53.033]      // while "1"  (timeout="50000")
[17:14:53.033]      // while-condition  =>  TRUE
[17:14:53.033]      // while "1"  (timeout="50000")
[17:14:53.034]      // while-condition  =>  TRUE
[17:14:53.034]      // while "1"  (timeout="50000")
[17:14:53.034]      // while-condition  =>  TRUE
[17:14:53.034]      // while "1"  (timeout="50000")
[17:14:53.035]      // while-condition  =>  TRUE
[17:14:53.035]      // while "1"  (timeout="50000")
[17:14:53.035]      // while-condition  =>  TRUE
[17:14:53.035]      // while "1"  (timeout="50000")
[17:14:53.035]      // while-condition  =>  TRUE
[17:14:53.036]      // while "1"  (timeout="50000")
[17:14:53.036]      // while  =>  TIMEOUT
[17:14:53.036]      // end while "1"
[17:14:53.036]    </control>
[17:14:53.037]    <block atomic="false" info="">
[17:14:53.037]      DAP_SWJ_Pins(nReset, nReset, 0);
[17:14:53.047]        // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0xFF]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=1, TDO=1, nTRST=1, nRESET=1)
[17:14:53.048]    </block>
[17:14:53.048]    <control if="" while="1" timeout="10000" info="">
[17:14:53.048]      // while "1"  (timeout="10000")
[17:14:53.049]      // while-condition  =>  TRUE
[17:14:53.049]      // while "1"  (timeout="10000")
[17:14:53.050]      // while-condition  =>  TRUE
[17:14:53.050]      // while "1"  (timeout="10000")
[17:14:53.050]      // while-condition  =>  TRUE
[17:14:53.051]      // while "1"  (timeout="10000")
[17:14:53.052]      // while-condition  =>  TRUE
[17:14:53.052]      // while "1"  (timeout="10000")
[17:14:53.052]      // while  =>  TIMEOUT
[17:14:53.053]      // end while "1"
[17:14:53.053]    </control>
[17:14:53.053]    <block atomic="true" info="">
[17:14:53.054]      // ATOMIC SEQUENCE - EXECUTE
[17:14:53.055]      DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  // 50 cycles SWDIO/TMS High
[17:14:53.055]        // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:14:53.055]      DAP_SWJ_Sequence(3,  0x00);                // At least 3 idle cycles (SWDIO/TMS Low)
[17:14:53.056]        // -> [DAP_SWJ_Sequence(3, 0x0000000000000000)]
[17:14:53.056]      // ATOMIC SEQUENCE - DONE
[17:14:53.057]    </block>
[17:14:53.057]    <block atomic="false" info="">
[17:14:53.058]      __errorcontrol = 0x00000001;
[17:14:53.058]        // -> [__errorcontrol <= 0x00000001]  (Skip Errors="True")
[17:14:53.059]      ReadDP(0x0);
[17:14:53.061]        // -> [ReadDP(0x00000000) => 0x0BC11477]   (__dp=0x00000000)
[17:14:53.061]      __errorcontrol = 0x00000000;
[17:14:53.062]        // -> [__errorcontrol <= 0x00000000]  (Skip Errors="False")
[17:14:53.063]    </block>
[17:14:53.063]  </sequence>
[17:14:53.063]  
[17:14:53.063]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:14:53.063]  
[17:14:53.063]  <debugvars>
[17:14:53.064]    // Pre-defined
[17:14:53.064]    __protocol=0x00000002      (Protocol="SWD", SWJ-DP="False")
[17:14:53.065]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:14:53.065]    __dp=0x00000000
[17:14:53.066]    __ap=0x00000000
[17:14:53.066]    __traceout=0x00000000      (Trace Disabled)
[17:14:53.066]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:14:53.066]    __FlashAddr=0x00000000
[17:14:53.067]    __FlashLen=0x00000000
[17:14:53.067]    __FlashArg=0x00000000
[17:14:53.067]    __FlashOp=0x00000000
[17:14:53.068]    __Result=0x00000000
[17:14:53.068]  </debugvars>
[17:14:53.069]  
[17:14:53.070]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:14:53.070]  </sequence>
[17:14:53.071]  
[17:14:53.073]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:14:53.073]  
[17:14:53.074]  <debugvars>
[17:14:53.074]    // Pre-defined
[17:14:53.075]    __protocol=0x00000002      (Protocol="SWD", SWJ-DP="False")
[17:14:53.075]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:14:53.075]    __dp=0x00000000
[17:14:53.075]    __ap=0x00000000
[17:14:53.076]    __traceout=0x00000000      (Trace Disabled)
[17:14:53.076]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:14:53.076]    __FlashAddr=0x00000000
[17:14:53.077]    __FlashLen=0x00000000
[17:14:53.077]    __FlashArg=0x00000000
[17:14:53.077]    __FlashOp=0x00000000
[17:14:53.078]    __Result=0x00000000
[17:14:53.078]  </debugvars>
[17:14:53.078]  
[17:14:53.079]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:14:53.079]    <block atomic="false" info="">
[17:14:53.079]      __var SW_DP_ABORT  = 0x0;
[17:14:53.079]        // -> [SW_DP_ABORT <= 0x00000000]
[17:14:53.080]      __var DP_CTRL_STAT = 0x4;
[17:14:53.080]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:14:53.081]      __var DP_SELECT    = 0x8;
[17:14:53.081]        // -> [DP_SELECT <= 0x00000008]
[17:14:53.081]      __var powered_down = 0;
[17:14:53.082]        // -> [powered_down <= 0x00000000]
[17:14:53.082]      WriteDP(DP_SELECT, 0x00000000);
[17:14:53.083]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:14:53.084]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:14:53.085]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:14:53.086]        // -> [powered_down <= 0x00000001]
[17:14:53.086]    </block>
[17:14:53.086]    <control if="powered_down" while="" timeout="0" info="">
[17:14:53.086]      // if-block "powered_down"
[17:14:53.087]        // =>  TRUE
[17:14:53.087]      <block atomic="false" info="">
[17:14:53.087]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:14:53.088]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:14:53.089]      </block>
[17:14:53.089]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:14:53.089]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:14:53.090]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:14:53.091]        // while-condition  =>  FALSE
[17:14:53.091]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:14:53.091]      </control>
[17:14:53.091]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:14:53.092]        // if-block "(__protocol & 0xFFFF) == 1"
[17:14:53.092]          // =>  FALSE
[17:14:53.092]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:14:53.092]      </control>
[17:14:53.093]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:14:53.093]        // if-block "(__protocol & 0xFFFF) == 2"
[17:14:53.093]          // =>  TRUE
[17:14:53.093]        <block atomic="false" info="">
[17:14:53.094]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:14:53.096]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:14:53.097]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:14:53.098]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:14:53.099]        </block>
[17:14:53.099]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:14:53.099]      </control>
[17:14:53.100]      // end if-block "powered_down"
[17:14:53.100]    </control>
[17:14:53.100]  </sequence>
[17:14:53.100]  
[17:14:53.151]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[17:14:53.151]  
[17:14:53.152]  <debugvars>
[17:14:53.153]    // Pre-defined
[17:14:53.153]    __protocol=0x00000002      (Protocol="SWD", SWJ-DP="False")
[17:14:53.153]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:14:53.154]    __dp=0x00000000
[17:14:53.154]    __ap=0x00000000
[17:14:53.154]    __traceout=0x00000000      (Trace Disabled)
[17:14:53.154]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:14:53.154]    __FlashAddr=0x00000000
[17:14:53.155]    __FlashLen=0x00000000
[17:14:53.155]    __FlashArg=0x00000000
[17:14:53.155]    __FlashOp=0x00000000
[17:14:53.156]    __Result=0x00000000
[17:14:53.156]  </debugvars>
[17:14:53.156]  
[17:14:53.156]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[17:14:53.157]    <block atomic="true" info="">
[17:14:53.157]      // ATOMIC SEQUENCE - EXECUTE
[17:14:53.159]      __var DP_R_IDCODE    = 0x0;
[17:14:53.160]        // -> [DP_R_IDCODE <= 0x00000000]
[17:14:53.160]      __var DP_W_ABORT    = 0x0;
[17:14:53.160]        // -> [DP_W_ABORT <= 0x00000000]
[17:14:53.161]      __var DP_CTRLSTAT = 0x4;
[17:14:53.161]        // -> [DP_CTRLSTAT <= 0x00000004]
[17:14:53.161]      __var DP_W_SELECT    = 0x8;
[17:14:53.161]        // -> [DP_W_SELECT <= 0x00000008]
[17:14:53.162]      __var AP_TAR		= 0x4;
[17:14:53.162]        // -> [AP_TAR <= 0x00000004]
[17:14:53.162]      __var AP_BD0		= 0x0;
[17:14:53.163]        // -> [AP_BD0 <= 0x00000000]
[17:14:53.163]      __var AP_BD1		= 0x4;
[17:14:53.163]        // -> [AP_BD1 <= 0x00000004]
[17:14:53.164]      __var AP_BD2		= 0x8;
[17:14:53.164]        // -> [AP_BD2 <= 0x00000008]
[17:14:53.164]      __var PCWithinFlash = 0;
[17:14:53.165]        // -> [PCWithinFlash <= 0x00000000]
[17:14:53.165]      Write32(0xE000EDF0, 0xA05F0003);	// Halt the CORE
[17:14:53.165]        // -> [Write32(0xE000EDF0, 0xA05F0003)]   (__dp=0x00000000, __ap=0x00000000)
[17:14:53.166]      // ATOMIC SEQUENCE - DONE
[17:14:53.166]    </block>
[17:14:53.166]    <control if="" while="(Read32(0xE000EDF0) & 0x00020000) != 0x00020000" timeout="1000000" info="">
[17:14:53.166]      // while "(Read32(0xE000EDF0) & 0x00020000) != 0x00020000"  (timeout="1000000")
[17:14:53.170]        // -> [Read32(0xE000EDF0) => 0x03030003]   (__dp=0x00000000, __ap=0x00000000)
[17:14:53.170]      // while-condition  =>  FALSE
[17:14:53.171]      // end while "(Read32(0xE000EDF0) & 0x00020000) != 0x00020000"
[17:14:53.171]    </control>
[17:14:53.172]    <block atomic="true" info="">
[17:14:53.172]      // ATOMIC SEQUENCE - EXECUTE
[17:14:53.174]      WriteDP(DP_W_SELECT, 0x00000000);	//Select 0x00
[17:14:53.175]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:14:53.175]      WriteAP(AP_TAR, 0xE000EDF0);		//Set TAR to DHCSR
[17:14:53.175]        // -> [WriteAP(0x00000004, 0xE000EDF0)]   (__dp=0x00000000, __ap=0x00000000)
[17:14:53.176]      WriteDP(DP_W_SELECT, 0x00000010);	//Select 0x10
[17:14:53.176]        // -> [WriteDP(0x00000008, 0x00000010)]   (__dp=0x00000000)
[17:14:53.176]      WriteAP(AP_BD1, 0x0000000F);		//Trigger read of PC
[17:14:53.177]        // -> [WriteAP(0x00000004, 0x0000000F)]   (__dp=0x00000000, __ap=0x00000000)
[17:14:53.177]      // ATOMIC SEQUENCE - DONE
[17:14:53.177]    </block>
[17:14:53.177]    <control if="" while="(ReadAP(AP_BD0) & 0x00010000) != 0x00010000" timeout="100000" info="">
[17:14:53.178]      // while "(ReadAP(AP_BD0) & 0x00010000) != 0x00010000"  (timeout="100000")
[17:14:53.179]        // -> [ReadAP(0x00000000) => 0x01030003]   (__dp=0x00000000, __ap=0x00000000)
[17:14:53.180]      // while-condition  =>  FALSE
[17:14:53.180]      // end while "(ReadAP(AP_BD0) & 0x00010000) != 0x00010000"
[17:14:53.180]    </control>
[17:14:53.181]    <block atomic="false" info="">
[17:14:53.181]      PCWithinFlash = (ReadAP(AP_BD2) >= 0x10000800);
[17:14:53.182]        // -> [ReadAP(0x00000008) => 0x10000820]   (__dp=0x00000000, __ap=0x00000000)
[17:14:53.182]        // -> [PCWithinFlash <= 0x00000001]
[17:14:53.182]      WriteDP(DP_W_SELECT, 0x00000000);	//Select 0x00
[17:14:53.184]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:14:53.184]    </block>
[17:14:53.184]    <control if="PCWithinFlash == 0" while="" timeout="0" info="">
[17:14:53.185]      // if-block "PCWithinFlash == 0"
[17:14:53.185]        // =>  FALSE
[17:14:53.185]      // skip if-block "PCWithinFlash == 0"
[17:14:53.186]    </control>
[17:14:53.186]  </sequence>
[17:14:53.186]  
[17:14:53.211]  **********  Sequence "ResetCatchSet"  (Context="Reset", Pname="", info="")
[17:14:53.211]  
[17:14:53.211]  <debugvars>
[17:14:53.212]    // Pre-defined
[17:14:53.212]    __protocol=0x00000002      (Protocol="SWD", SWJ-DP="False")
[17:14:53.212]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:14:53.213]    __dp=0x00000000
[17:14:53.214]    __ap=0x00000000
[17:14:53.214]    __traceout=0x00000000      (Trace Disabled)
[17:14:53.214]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:14:53.215]    __FlashAddr=0x00000000
[17:14:53.215]    __FlashLen=0x00000000
[17:14:53.215]    __FlashArg=0x00000000
[17:14:53.216]    __FlashOp=0x00000000
[17:14:53.216]    __Result=0x00000000
[17:14:53.216]  </debugvars>
[17:14:53.217]  
[17:14:53.217]  <sequence name="ResetCatchSet" Pname="" disable="false" info="">
[17:14:53.217]    <block atomic="false" info="">
[17:14:53.218]    </block>
[17:14:53.218]  </sequence>
[17:14:53.218]  
[17:14:53.220]  **********  Sequence "ResetHardware"  (Context="Reset", Pname="", info="")
[17:14:53.220]  
[17:14:53.221]  <debugvars>
[17:14:53.221]    // Pre-defined
[17:14:53.221]    __protocol=0x00000002      (Protocol="SWD", SWJ-DP="False")
[17:14:53.221]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:14:53.222]    __dp=0x00000000
[17:14:53.222]    __ap=0x00000000
[17:14:53.222]    __traceout=0x00000000      (Trace Disabled)
[17:14:53.223]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:14:53.223]    __FlashAddr=0x00000000
[17:14:53.223]    __FlashLen=0x00000000
[17:14:53.224]    __FlashArg=0x00000000
[17:14:53.224]    __FlashOp=0x00000000
[17:14:53.224]    __Result=0x00000000
[17:14:53.225]  </debugvars>
[17:14:53.225]  
[17:14:53.225]  <sequence name="ResetHardware" Pname="" disable="false" info="">
[17:14:53.225]    <block atomic="false" info="">
[17:14:53.226]      __var nReset      = 0x80;
[17:14:53.226]        // -> [nReset <= 0x00000080]
[17:14:53.226]      DAP_SWJ_Pins(0x00, nReset, 0);
[17:14:53.227]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0xFF]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=1, TDO=1, nTRST=1, nRESET=1)
[17:14:53.228]    </block>
[17:14:53.228]    <control if="" while="1" timeout="50000" info="">
[17:14:53.228]      // while "1"  (timeout="50000")
[17:14:53.228]      // while-condition  =>  TRUE
[17:14:53.229]      // while "1"  (timeout="50000")
[17:14:53.229]      // while-condition  =>  TRUE
[17:14:53.229]      // while "1"  (timeout="50000")
[17:14:53.230]      // while-condition  =>  TRUE
[17:14:53.230]      // while "1"  (timeout="50000")
[17:14:53.230]      // while-condition  =>  TRUE
[17:14:53.230]      // while "1"  (timeout="50000")
[17:14:53.230]      // while-condition  =>  TRUE
[17:14:53.231]      // while "1"  (timeout="50000")
[17:14:53.231]      // while-condition  =>  TRUE
[17:14:53.231]      // while "1"  (timeout="50000")
[17:14:53.232]      // while-condition  =>  TRUE
[17:14:53.232]      // while "1"  (timeout="50000")
[17:14:53.232]      // while-condition  =>  TRUE
[17:14:53.232]      // while "1"  (timeout="50000")
[17:14:53.232]      // while-condition  =>  TRUE
[17:14:53.233]      // while "1"  (timeout="50000")
[17:14:53.233]      // while-condition  =>  TRUE
[17:14:53.233]      // while "1"  (timeout="50000")
[17:14:53.233]      // while-condition  =>  TRUE
[17:14:53.233]      // while "1"  (timeout="50000")
[17:14:53.233]      // while-condition  =>  TRUE
[17:14:53.234]      // while "1"  (timeout="50000")
[17:14:53.234]      // while-condition  =>  TRUE
[17:14:53.234]      // while "1"  (timeout="50000")
[17:14:53.235]      // while-condition  =>  TRUE
[17:14:53.235]      // while "1"  (timeout="50000")
[17:14:53.235]      // while-condition  =>  TRUE
[17:14:53.235]      // while "1"  (timeout="50000")
[17:14:53.235]      // while-condition  =>  TRUE
[17:14:53.236]      // while "1"  (timeout="50000")
[17:14:53.236]      // while-condition  =>  TRUE
[17:14:53.236]      // while "1"  (timeout="50000")
[17:14:53.237]      // while-condition  =>  TRUE
[17:14:53.237]      // while "1"  (timeout="50000")
[17:14:53.237]      // while-condition  =>  TRUE
[17:14:53.237]      // while "1"  (timeout="50000")
[17:14:53.238]      // while-condition  =>  TRUE
[17:14:53.238]      // while "1"  (timeout="50000")
[17:14:53.238]      // while-condition  =>  TRUE
[17:14:53.238]      // while "1"  (timeout="50000")
[17:14:53.239]      // while-condition  =>  TRUE
[17:14:53.239]      // while "1"  (timeout="50000")
[17:14:53.239]      // while-condition  =>  TRUE
[17:14:53.239]      // while "1"  (timeout="50000")
[17:14:53.240]      // while-condition  =>  TRUE
[17:14:53.240]      // while "1"  (timeout="50000")
[17:14:53.240]      // while-condition  =>  TRUE
[17:14:53.240]      // while "1"  (timeout="50000")
[17:14:53.241]      // while-condition  =>  TRUE
[17:14:53.241]      // while "1"  (timeout="50000")
[17:14:53.241]      // while-condition  =>  TRUE
[17:14:53.241]      // while "1"  (timeout="50000")
[17:14:53.242]      // while-condition  =>  TRUE
[17:14:53.242]      // while "1"  (timeout="50000")
[17:14:53.242]      // while-condition  =>  TRUE
[17:14:53.243]      // while "1"  (timeout="50000")
[17:14:53.243]      // while-condition  =>  TRUE
[17:14:53.243]      // while "1"  (timeout="50000")
[17:14:53.243]      // while-condition  =>  TRUE
[17:14:53.244]      // while "1"  (timeout="50000")
[17:14:53.244]      // while-condition  =>  TRUE
[17:14:53.244]      // while "1"  (timeout="50000")
[17:14:53.245]      // while-condition  =>  TRUE
[17:14:53.245]      // while "1"  (timeout="50000")
[17:14:53.245]      // while-condition  =>  TRUE
[17:14:53.245]      // while "1"  (timeout="50000")
[17:14:53.245]      // while-condition  =>  TRUE
[17:14:53.246]      // while "1"  (timeout="50000")
[17:14:53.246]      // while-condition  =>  TRUE
[17:14:53.246]      // while "1"  (timeout="50000")
[17:14:53.246]      // while-condition  =>  TRUE
[17:14:53.247]      // while "1"  (timeout="50000")
[17:14:53.247]      // while-condition  =>  TRUE
[17:14:53.247]      // while "1"  (timeout="50000")
[17:14:53.247]      // while-condition  =>  TRUE
[17:14:53.248]      // while "1"  (timeout="50000")
[17:14:53.248]      // while-condition  =>  TRUE
[17:14:53.248]      // while "1"  (timeout="50000")
[17:14:53.248]      // while-condition  =>  TRUE
[17:14:53.249]      // while "1"  (timeout="50000")
[17:14:53.249]      // while-condition  =>  TRUE
[17:14:53.249]      // while "1"  (timeout="50000")
[17:14:53.249]      // while-condition  =>  TRUE
[17:14:53.250]      // while "1"  (timeout="50000")
[17:14:53.250]      // while-condition  =>  TRUE
[17:14:53.250]      // while "1"  (timeout="50000")
[17:14:53.251]      // while-condition  =>  TRUE
[17:14:53.251]      // while "1"  (timeout="50000")
[17:14:53.251]      // while-condition  =>  TRUE
[17:14:53.251]      // while "1"  (timeout="50000")
[17:14:53.252]      // while-condition  =>  TRUE
[17:14:53.252]      // while "1"  (timeout="50000")
[17:14:53.252]      // while-condition  =>  TRUE
[17:14:53.253]      // while "1"  (timeout="50000")
[17:14:53.253]      // while-condition  =>  TRUE
[17:14:53.253]      // while "1"  (timeout="50000")
[17:14:53.253]      // while-condition  =>  TRUE
[17:14:53.253]      // while "1"  (timeout="50000")
[17:14:53.253]      // while-condition  =>  TRUE
[17:14:53.254]      // while "1"  (timeout="50000")
[17:14:53.254]      // while-condition  =>  TRUE
[17:14:53.254]      // while "1"  (timeout="50000")
[17:14:53.254]      // while-condition  =>  TRUE
[17:14:53.255]      // while "1"  (timeout="50000")
[17:14:53.255]      // while-condition  =>  TRUE
[17:14:53.255]      // while "1"  (timeout="50000")
[17:14:53.255]      // while-condition  =>  TRUE
[17:14:53.255]      // while "1"  (timeout="50000")
[17:14:53.255]      // while-condition  =>  TRUE
[17:14:53.256]      // while "1"  (timeout="50000")
[17:14:53.256]      // while-condition  =>  TRUE
[17:14:53.256]      // while "1"  (timeout="50000")
[17:14:53.256]      // while-condition  =>  TRUE
[17:14:53.257]      // while "1"  (timeout="50000")
[17:14:53.257]      // while-condition  =>  TRUE
[17:14:53.257]      // while "1"  (timeout="50000")
[17:14:53.257]      // while-condition  =>  TRUE
[17:14:53.257]      // while "1"  (timeout="50000")
[17:14:53.257]      // while-condition  =>  TRUE
[17:14:53.258]      // while "1"  (timeout="50000")
[17:14:53.258]      // while-condition  =>  TRUE
[17:14:53.258]      // while "1"  (timeout="50000")
[17:14:53.258]      // while-condition  =>  TRUE
[17:14:53.259]      // while "1"  (timeout="50000")
[17:14:53.259]      // while-condition  =>  TRUE
[17:14:53.259]      // while "1"  (timeout="50000")
[17:14:53.259]      // while-condition  =>  TRUE
[17:14:53.260]      // while "1"  (timeout="50000")
[17:14:53.260]      // while-condition  =>  TRUE
[17:14:53.260]      // while "1"  (timeout="50000")
[17:14:53.261]      // while-condition  =>  TRUE
[17:14:53.261]      // while "1"  (timeout="50000")
[17:14:53.261]      // while-condition  =>  TRUE
[17:14:53.261]      // while "1"  (timeout="50000")
[17:14:53.261]      // while-condition  =>  TRUE
[17:14:53.262]      // while "1"  (timeout="50000")
[17:14:53.262]      // while-condition  =>  TRUE
[17:14:53.262]      // while "1"  (timeout="50000")
[17:14:53.262]      // while-condition  =>  TRUE
[17:14:53.263]      // while "1"  (timeout="50000")
[17:14:53.263]      // while-condition  =>  TRUE
[17:14:53.263]      // while "1"  (timeout="50000")
[17:14:53.263]      // while-condition  =>  TRUE
[17:14:53.264]      // while "1"  (timeout="50000")
[17:14:53.264]      // while-condition  =>  TRUE
[17:14:53.264]      // while "1"  (timeout="50000")
[17:14:53.264]      // while-condition  =>  TRUE
[17:14:53.265]      // while "1"  (timeout="50000")
[17:14:53.265]      // while-condition  =>  TRUE
[17:14:53.265]      // while "1"  (timeout="50000")
[17:14:53.265]      // while-condition  =>  TRUE
[17:14:53.266]      // while "1"  (timeout="50000")
[17:14:53.266]      // while-condition  =>  TRUE
[17:14:53.266]      // while "1"  (timeout="50000")
[17:14:53.266]      // while-condition  =>  TRUE
[17:14:53.266]      // while "1"  (timeout="50000")
[17:14:53.267]      // while-condition  =>  TRUE
[17:14:53.267]      // while "1"  (timeout="50000")
[17:14:53.267]      // while-condition  =>  TRUE
[17:14:53.267]      // while "1"  (timeout="50000")
[17:14:53.267]      // while-condition  =>  TRUE
[17:14:53.268]      // while "1"  (timeout="50000")
[17:14:53.268]      // while-condition  =>  TRUE
[17:14:53.268]      // while "1"  (timeout="50000")
[17:14:53.268]      // while-condition  =>  TRUE
[17:14:53.268]      // while "1"  (timeout="50000")
[17:14:53.269]      // while-condition  =>  TRUE
[17:14:53.269]      // while "1"  (timeout="50000")
[17:14:53.269]      // while-condition  =>  TRUE
[17:14:53.269]      // while "1"  (timeout="50000")
[17:14:53.270]      // while-condition  =>  TRUE
[17:14:53.270]      // while "1"  (timeout="50000")
[17:14:53.270]      // while-condition  =>  TRUE
[17:14:53.270]      // while "1"  (timeout="50000")
[17:14:53.270]      // while-condition  =>  TRUE
[17:14:53.270]      // while "1"  (timeout="50000")
[17:14:53.271]      // while-condition  =>  TRUE
[17:14:53.271]      // while "1"  (timeout="50000")
[17:14:53.271]      // while-condition  =>  TRUE
[17:14:53.271]      // while "1"  (timeout="50000")
[17:14:53.272]      // while-condition  =>  TRUE
[17:14:53.272]      // while "1"  (timeout="50000")
[17:14:53.272]      // while-condition  =>  TRUE
[17:14:53.272]      // while "1"  (timeout="50000")
[17:14:53.273]      // while-condition  =>  TRUE
[17:14:53.273]      // while "1"  (timeout="50000")
[17:14:53.273]      // while-condition  =>  TRUE
[17:14:53.273]      // while "1"  (timeout="50000")
[17:14:53.274]      // while-condition  =>  TRUE
[17:14:53.274]      // while "1"  (timeout="50000")
[17:14:53.274]      // while-condition  =>  TRUE
[17:14:53.274]      // while "1"  (timeout="50000")
[17:14:53.274]      // while-condition  =>  TRUE
[17:14:53.275]      // while "1"  (timeout="50000")
[17:14:53.275]      // while-condition  =>  TRUE
[17:14:53.275]      // while "1"  (timeout="50000")
[17:14:53.275]      // while-condition  =>  TRUE
[17:14:53.275]      // while "1"  (timeout="50000")
[17:14:53.276]      // while-condition  =>  TRUE
[17:14:53.276]      // while "1"  (timeout="50000")
[17:14:53.276]      // while-condition  =>  TRUE
[17:14:53.276]      // while "1"  (timeout="50000")
[17:14:53.276]      // while-condition  =>  TRUE
[17:14:53.277]      // while "1"  (timeout="50000")
[17:14:53.277]      // while-condition  =>  TRUE
[17:14:53.277]      // while "1"  (timeout="50000")
[17:14:53.277]      // while-condition  =>  TRUE
[17:14:53.277]      // while "1"  (timeout="50000")
[17:14:53.278]      // while-condition  =>  TRUE
[17:14:53.278]      // while "1"  (timeout="50000")
[17:14:53.278]      // while-condition  =>  TRUE
[17:14:53.278]      // while "1"  (timeout="50000")
[17:14:53.278]      // while-condition  =>  TRUE
[17:14:53.279]      // while "1"  (timeout="50000")
[17:14:53.279]      // while-condition  =>  TRUE
[17:14:53.279]      // while "1"  (timeout="50000")
[17:14:53.279]      // while-condition  =>  TRUE
[17:14:53.279]      // while "1"  (timeout="50000")
[17:14:53.280]      // while-condition  =>  TRUE
[17:14:53.280]      // while "1"  (timeout="50000")
[17:14:53.280]      // while-condition  =>  TRUE
[17:14:53.280]      // while "1"  (timeout="50000")
[17:14:53.280]      // while-condition  =>  TRUE
[17:14:53.281]      // while "1"  (timeout="50000")
[17:14:53.281]      // while-condition  =>  TRUE
[17:14:53.281]      // while "1"  (timeout="50000")
[17:14:53.281]      // while-condition  =>  TRUE
[17:14:53.281]      // while "1"  (timeout="50000")
[17:14:53.282]      // while-condition  =>  TRUE
[17:14:53.282]      // while "1"  (timeout="50000")
[17:14:53.282]      // while-condition  =>  TRUE
[17:14:53.282]      // while "1"  (timeout="50000")
[17:14:53.282]      // while-condition  =>  TRUE
[17:14:53.283]      // while "1"  (timeout="50000")
[17:14:53.283]      // while-condition  =>  TRUE
[17:14:53.283]      // while "1"  (timeout="50000")
[17:14:53.283]      // while-condition  =>  TRUE
[17:14:53.283]      // while "1"  (timeout="50000")
[17:14:53.283]      // while-condition  =>  TRUE
[17:14:53.284]      // while "1"  (timeout="50000")
[17:14:53.284]      // while-condition  =>  TRUE
[17:14:53.284]      // while "1"  (timeout="50000")
[17:14:53.284]      // while-condition  =>  TRUE
[17:14:53.285]      // while "1"  (timeout="50000")
[17:14:53.285]      // while-condition  =>  TRUE
[17:14:53.285]      // while "1"  (timeout="50000")
[17:14:53.285]      // while-condition  =>  TRUE
[17:14:53.286]      // while "1"  (timeout="50000")
[17:14:53.286]      // while  =>  TIMEOUT
[17:14:53.286]      // end while "1"
[17:14:53.286]    </control>
[17:14:53.287]    <block atomic="false" info="">
[17:14:53.287]      DAP_SWJ_Pins(nReset, nReset, 0);
[17:14:53.298]        // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0xFF]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=1, TDO=1, nTRST=1, nRESET=1)
[17:14:53.299]    </block>
[17:14:53.299]    <control if="" while="1" timeout="10000" info="">
[17:14:53.300]      // while "1"  (timeout="10000")
[17:14:53.300]      // while-condition  =>  TRUE
[17:14:53.300]      // while "1"  (timeout="10000")
[17:14:53.301]      // while-condition  =>  TRUE
[17:14:53.301]      // while "1"  (timeout="10000")
[17:14:53.301]      // while-condition  =>  TRUE
[17:14:53.302]      // while "1"  (timeout="10000")
[17:14:53.302]      // while  =>  TIMEOUT
[17:14:53.303]      // end while "1"
[17:14:53.303]    </control>
[17:14:53.304]    <block atomic="true" info="">
[17:14:53.304]      // ATOMIC SEQUENCE - EXECUTE
[17:14:53.305]      DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  // 50 cycles SWDIO/TMS High
[17:14:53.305]        // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:14:53.306]      DAP_SWJ_Sequence(3,  0x00);                // At least 3 idle cycles (SWDIO/TMS Low)
[17:14:53.306]        // -> [DAP_SWJ_Sequence(3, 0x0000000000000000)]
[17:14:53.307]      // ATOMIC SEQUENCE - DONE
[17:14:53.307]    </block>
[17:14:53.307]    <block atomic="false" info="">
[17:14:53.308]      __errorcontrol = 0x00000001;
[17:14:53.309]        // -> [__errorcontrol <= 0x00000001]  (Skip Errors="True")
[17:14:53.309]      ReadDP(0x0);
[17:14:53.310]        // -> [ReadDP(0x00000000) => 0x0BC11477]   (__dp=0x00000000)
[17:14:53.310]      __errorcontrol = 0x00000000;
[17:14:53.311]        // -> [__errorcontrol <= 0x00000000]  (Skip Errors="False")
[17:14:53.311]    </block>
[17:14:53.311]  </sequence>
[17:14:53.312]  
[17:14:53.316]  **********  Sequence "DebugPortStart"  (Context="Reset", Pname="", info="")
[17:14:53.316]  
[17:14:53.316]  <debugvars>
[17:14:53.317]    // Pre-defined
[17:14:53.317]    __protocol=0x00000002      (Protocol="SWD", SWJ-DP="False")
[17:14:53.318]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:14:53.318]    __dp=0x00000000
[17:14:53.318]    __ap=0x00000000
[17:14:53.318]    __traceout=0x00000000      (Trace Disabled)
[17:14:53.319]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:14:53.319]    __FlashAddr=0x00000000
[17:14:53.319]    __FlashLen=0x00000000
[17:14:53.320]    __FlashArg=0x00000000
[17:14:53.320]    __FlashOp=0x00000000
[17:14:53.320]    __Result=0x00000000
[17:14:53.321]  </debugvars>
[17:14:53.321]  
[17:14:53.321]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:14:53.321]    <block atomic="false" info="">
[17:14:53.322]      __var SW_DP_ABORT  = 0x0;
[17:14:53.322]        // -> [SW_DP_ABORT <= 0x00000000]
[17:14:53.322]      __var DP_CTRL_STAT = 0x4;
[17:14:53.322]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:14:53.323]      __var DP_SELECT    = 0x8;
[17:14:53.323]        // -> [DP_SELECT <= 0x00000008]
[17:14:53.323]      __var powered_down = 0;
[17:14:53.324]        // -> [powered_down <= 0x00000000]
[17:14:53.324]      WriteDP(DP_SELECT, 0x00000000);
[17:14:53.325]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:14:53.326]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:14:53.326]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:14:53.327]        // -> [powered_down <= 0x00000001]
[17:14:53.327]    </block>
[17:14:53.327]    <control if="powered_down" while="" timeout="0" info="">
[17:14:53.327]      // if-block "powered_down"
[17:14:53.327]        // =>  TRUE
[17:14:53.328]      <block atomic="false" info="">
[17:14:53.328]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:14:53.329]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:14:53.330]      </block>
[17:14:53.330]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:14:53.330]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:14:53.331]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:14:53.332]        // while-condition  =>  FALSE
[17:14:53.332]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:14:53.332]      </control>
[17:14:53.332]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:14:53.333]        // if-block "(__protocol & 0xFFFF) == 1"
[17:14:53.333]          // =>  FALSE
[17:14:53.333]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:14:53.333]      </control>
[17:14:53.333]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:14:53.334]        // if-block "(__protocol & 0xFFFF) == 2"
[17:14:53.334]          // =>  TRUE
[17:14:53.334]        <block atomic="false" info="">
[17:14:53.334]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:14:53.335]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:14:53.336]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:14:53.337]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:14:53.338]        </block>
[17:14:53.338]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:14:53.338]      </control>
[17:14:53.338]      // end if-block "powered_down"
[17:14:53.339]    </control>
[17:14:53.339]  </sequence>
[17:14:53.339]  
[17:14:53.343]  **********  Sequence "DebugCoreStart"  (Context="Reset", Pname="", info="")
[17:14:53.343]  
[17:14:53.344]  <debugvars>
[17:14:53.344]    // Pre-defined
[17:14:53.346]    __protocol=0x00000002      (Protocol="SWD", SWJ-DP="False")
[17:14:53.346]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:14:53.346]    __dp=0x00000000
[17:14:53.346]    __ap=0x00000000
[17:14:53.347]    __traceout=0x00000000      (Trace Disabled)
[17:14:53.347]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:14:53.347]    __FlashAddr=0x00000000
[17:14:53.348]    __FlashLen=0x00000000
[17:14:53.348]    __FlashArg=0x00000000
[17:14:53.348]    __FlashOp=0x00000000
[17:14:53.349]    __Result=0x00000000
[17:14:53.349]  </debugvars>
[17:14:53.349]  
[17:14:53.349]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[17:14:53.350]    <block atomic="true" info="">
[17:14:53.351]      // ATOMIC SEQUENCE - EXECUTE
[17:14:53.352]      __var DP_R_IDCODE    = 0x0;
[17:14:53.353]        // -> [DP_R_IDCODE <= 0x00000000]
[17:14:53.353]      __var DP_W_ABORT    = 0x0;
[17:14:53.353]        // -> [DP_W_ABORT <= 0x00000000]
[17:14:53.354]      __var DP_CTRLSTAT = 0x4;
[17:14:53.354]        // -> [DP_CTRLSTAT <= 0x00000004]
[17:14:53.354]      __var DP_W_SELECT    = 0x8;
[17:14:53.354]        // -> [DP_W_SELECT <= 0x00000008]
[17:14:53.355]      __var AP_TAR		= 0x4;
[17:14:53.355]        // -> [AP_TAR <= 0x00000004]
[17:14:53.355]      __var AP_BD0		= 0x0;
[17:14:53.356]        // -> [AP_BD0 <= 0x00000000]
[17:14:53.356]      __var AP_BD1		= 0x4;
[17:14:53.356]        // -> [AP_BD1 <= 0x00000004]
[17:14:53.357]      __var AP_BD2		= 0x8;
[17:14:53.357]        // -> [AP_BD2 <= 0x00000008]
[17:14:53.357]      __var PCWithinFlash = 0;
[17:14:53.357]        // -> [PCWithinFlash <= 0x00000000]
[17:14:53.358]      Write32(0xE000EDF0, 0xA05F0003);	// Halt the CORE
[17:14:53.358]        // -> [Write32(0xE000EDF0, 0xA05F0003)]   (__dp=0x00000000, __ap=0x00000000)
[17:14:53.358]      // ATOMIC SEQUENCE - DONE
[17:14:53.359]    </block>
[17:14:53.359]    <control if="" while="(Read32(0xE000EDF0) & 0x00020000) != 0x00020000" timeout="1000000" info="">
[17:14:53.359]      // while "(Read32(0xE000EDF0) & 0x00020000) != 0x00020000"  (timeout="1000000")
[17:14:53.362]        // -> [Read32(0xE000EDF0) => 0x01030003]   (__dp=0x00000000, __ap=0x00000000)
[17:14:53.363]      // while-condition  =>  FALSE
[17:14:53.363]      // end while "(Read32(0xE000EDF0) & 0x00020000) != 0x00020000"
[17:14:53.364]    </control>
[17:14:53.364]    <block atomic="true" info="">
[17:14:53.364]      // ATOMIC SEQUENCE - EXECUTE
[17:14:53.366]      WriteDP(DP_W_SELECT, 0x00000000);	//Select 0x00
[17:14:53.367]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:14:53.367]      WriteAP(AP_TAR, 0xE000EDF0);		//Set TAR to DHCSR
[17:14:53.367]        // -> [WriteAP(0x00000004, 0xE000EDF0)]   (__dp=0x00000000, __ap=0x00000000)
[17:14:53.368]      WriteDP(DP_W_SELECT, 0x00000010);	//Select 0x10
[17:14:53.368]        // -> [WriteDP(0x00000008, 0x00000010)]   (__dp=0x00000000)
[17:14:53.368]      WriteAP(AP_BD1, 0x0000000F);		//Trigger read of PC
[17:14:53.368]        // -> [WriteAP(0x00000004, 0x0000000F)]   (__dp=0x00000000, __ap=0x00000000)
[17:14:53.369]      // ATOMIC SEQUENCE - DONE
[17:14:53.369]    </block>
[17:14:53.369]    <control if="" while="(ReadAP(AP_BD0) & 0x00010000) != 0x00010000" timeout="100000" info="">
[17:14:53.370]      // while "(ReadAP(AP_BD0) & 0x00010000) != 0x00010000"  (timeout="100000")
[17:14:53.371]        // -> [ReadAP(0x00000000) => 0x01030003]   (__dp=0x00000000, __ap=0x00000000)
[17:14:53.372]      // while-condition  =>  FALSE
[17:14:53.372]      // end while "(ReadAP(AP_BD0) & 0x00010000) != 0x00010000"
[17:14:53.372]    </control>
[17:14:53.373]    <block atomic="false" info="">
[17:14:53.373]      PCWithinFlash = (ReadAP(AP_BD2) >= 0x10000800);
[17:14:53.374]        // -> [ReadAP(0x00000008) => 0x10000820]   (__dp=0x00000000, __ap=0x00000000)
[17:14:53.375]        // -> [PCWithinFlash <= 0x00000001]
[17:14:53.375]      WriteDP(DP_W_SELECT, 0x00000000);	//Select 0x00
[17:14:53.376]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:14:53.377]    </block>
[17:14:53.377]    <control if="PCWithinFlash == 0" while="" timeout="0" info="">
[17:14:53.377]      // if-block "PCWithinFlash == 0"
[17:14:53.377]        // =>  FALSE
[17:14:53.378]      // skip if-block "PCWithinFlash == 0"
[17:14:53.378]    </control>
[17:14:53.378]  </sequence>
[17:14:53.379]  
[17:14:53.398]  **********  Sequence "ResetCatchClear"  (Context="Reset", Pname="", info="")
[17:14:53.398]  
[17:14:53.398]  <debugvars>
[17:14:53.399]    // Pre-defined
[17:14:53.399]    __protocol=0x00000002      (Protocol="SWD", SWJ-DP="False")
[17:14:53.400]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:14:53.400]    __dp=0x00000000
[17:14:53.400]    __ap=0x00000000
[17:14:53.401]    __traceout=0x00000000      (Trace Disabled)
[17:14:53.401]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:14:53.401]    __FlashAddr=0x00000000
[17:14:53.402]    __FlashLen=0x00000000
[17:14:53.402]    __FlashArg=0x00000000
[17:14:53.402]    __FlashOp=0x00000000
[17:14:53.403]    __Result=0x00000000
[17:14:53.403]  </debugvars>
[17:14:53.403]  
[17:14:53.404]  <sequence name="ResetCatchClear" Pname="" disable="false" info="">
[17:14:53.404]    <block atomic="false" info="">
[17:14:53.404]    </block>
[17:14:53.404]  </sequence>
[17:14:53.405]  
[17:14:53.595]  **********  Sequence "FlashEraseDone"  (Context="Flash Erase", Pname="", info="")
[17:14:53.595]  
[17:14:53.596]  <debugvars>
[17:14:53.596]    // Pre-defined
[17:14:53.596]    __protocol=0x00000002      (Protocol="SWD", SWJ-DP="False")
[17:14:53.597]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:14:53.597]    __dp=0x00000000
[17:14:53.598]    __ap=0x00000000
[17:14:53.598]    __traceout=0x00000000      (Trace Disabled)
[17:14:53.599]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:14:53.599]    __FlashAddr=0x00000000
[17:14:53.599]    __FlashLen=0x00000000
[17:14:53.600]    __FlashArg=0x00000000
[17:14:53.600]    __FlashOp=0x00000000
[17:14:53.601]    __Result=0x00000000
[17:14:53.601]  </debugvars>
[17:14:53.601]  
[17:14:53.602]  <sequence name="FlashEraseDone" Pname="" disable="false" info="">
[17:14:53.602]    <block atomic="false" info="">
[17:14:53.602]      Sequence("ResetHardware");
[17:14:53.603]        <sequence name="ResetHardware" Pname="" disable="false" info="">
[17:14:53.604]          <block atomic="false" info="">
[17:14:53.604]            __var nReset      = 0x80;
[17:14:53.604]              // -> [nReset <= 0x00000080]
[17:14:53.604]            DAP_SWJ_Pins(0x00, nReset, 0);
[17:14:53.606]              // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0xFF]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=1, TDO=1, nTRST=1, nRESET=1)
[17:14:53.607]          </block>
[17:14:53.607]          <control if="" while="1" timeout="50000" info="">
[17:14:53.607]            // while "1"  (timeout="50000")
[17:14:53.608]            // while-condition  =>  TRUE
[17:14:53.608]            // while "1"  (timeout="50000")
[17:14:53.608]            // while-condition  =>  TRUE
[17:14:53.609]            // while "1"  (timeout="50000")
[17:14:53.609]            // while-condition  =>  TRUE
[17:14:53.609]            // while "1"  (timeout="50000")
[17:14:53.610]            // while-condition  =>  TRUE
[17:14:53.610]            // while "1"  (timeout="50000")
[17:14:53.611]            // while-condition  =>  TRUE
[17:14:53.611]            // while "1"  (timeout="50000")
[17:14:53.611]            // while-condition  =>  TRUE
[17:14:53.611]            // while "1"  (timeout="50000")
[17:14:53.612]            // while-condition  =>  TRUE
[17:14:53.612]            // while "1"  (timeout="50000")
[17:14:53.612]            // while-condition  =>  TRUE
[17:14:53.613]            // while "1"  (timeout="50000")
[17:14:53.613]            // while-condition  =>  TRUE
[17:14:53.613]            // while "1"  (timeout="50000")
[17:14:53.613]            // while-condition  =>  TRUE
[17:14:53.614]            // while "1"  (timeout="50000")
[17:14:53.614]            // while-condition  =>  TRUE
[17:14:53.614]            // while "1"  (timeout="50000")
[17:14:53.615]            // while-condition  =>  TRUE
[17:14:53.615]            // while "1"  (timeout="50000")
[17:14:53.615]            // while-condition  =>  TRUE
[17:14:53.616]            // while "1"  (timeout="50000")
[17:14:53.616]            // while-condition  =>  TRUE
[17:14:53.616]            // while "1"  (timeout="50000")
[17:14:53.617]            // while-condition  =>  TRUE
[17:14:53.617]            // while "1"  (timeout="50000")
[17:14:53.617]            // while-condition  =>  TRUE
[17:14:53.618]            // while "1"  (timeout="50000")
[17:14:53.618]            // while-condition  =>  TRUE
[17:14:53.618]            // while "1"  (timeout="50000")
[17:14:53.618]            // while-condition  =>  TRUE
[17:14:53.619]            // while "1"  (timeout="50000")
[17:14:53.619]            // while-condition  =>  TRUE
[17:14:53.619]            // while "1"  (timeout="50000")
[17:14:53.619]            // while-condition  =>  TRUE
[17:14:53.620]            // while "1"  (timeout="50000")
[17:14:53.620]            // while-condition  =>  TRUE
[17:14:53.620]            // while "1"  (timeout="50000")
[17:14:53.620]            // while-condition  =>  TRUE
[17:14:53.621]            // while "1"  (timeout="50000")
[17:14:53.621]            // while-condition  =>  TRUE
[17:14:53.621]            // while "1"  (timeout="50000")
[17:14:53.621]            // while-condition  =>  TRUE
[17:14:53.622]            // while "1"  (timeout="50000")
[17:14:53.622]            // while-condition  =>  TRUE
[17:14:53.622]            // while "1"  (timeout="50000")
[17:14:53.622]            // while-condition  =>  TRUE
[17:14:53.623]            // while "1"  (timeout="50000")
[17:14:53.623]            // while-condition  =>  TRUE
[17:14:53.623]            // while "1"  (timeout="50000")
[17:14:53.624]            // while-condition  =>  TRUE
[17:14:53.624]            // while "1"  (timeout="50000")
[17:14:53.624]            // while-condition  =>  TRUE
[17:14:53.624]            // while "1"  (timeout="50000")
[17:14:53.625]            // while-condition  =>  TRUE
[17:14:53.625]            // while "1"  (timeout="50000")
[17:14:53.625]            // while-condition  =>  TRUE
[17:14:53.625]            // while "1"  (timeout="50000")
[17:14:53.625]            // while-condition  =>  TRUE
[17:14:53.626]            // while "1"  (timeout="50000")
[17:14:53.626]            // while-condition  =>  TRUE
[17:14:53.626]            // while "1"  (timeout="50000")
[17:14:53.627]            // while-condition  =>  TRUE
[17:14:53.627]            // while "1"  (timeout="50000")
[17:14:53.627]            // while-condition  =>  TRUE
[17:14:53.627]            // while "1"  (timeout="50000")
[17:14:53.628]            // while-condition  =>  TRUE
[17:14:53.628]            // while "1"  (timeout="50000")
[17:14:53.628]            // while-condition  =>  TRUE
[17:14:53.629]            // while "1"  (timeout="50000")
[17:14:53.629]            // while-condition  =>  TRUE
[17:14:53.629]            // while "1"  (timeout="50000")
[17:14:53.629]            // while-condition  =>  TRUE
[17:14:53.630]            // while "1"  (timeout="50000")
[17:14:53.630]            // while-condition  =>  TRUE
[17:14:53.630]            // while "1"  (timeout="50000")
[17:14:53.630]            // while-condition  =>  TRUE
[17:14:53.631]            // while "1"  (timeout="50000")
[17:14:53.631]            // while-condition  =>  TRUE
[17:14:53.631]            // while "1"  (timeout="50000")
[17:14:53.631]            // while-condition  =>  TRUE
[17:14:53.631]            // while "1"  (timeout="50000")
[17:14:53.632]            // while-condition  =>  TRUE
[17:14:53.632]            // while "1"  (timeout="50000")
[17:14:53.632]            // while-condition  =>  TRUE
[17:14:53.632]            // while "1"  (timeout="50000")
[17:14:53.633]            // while-condition  =>  TRUE
[17:14:53.633]            // while "1"  (timeout="50000")
[17:14:53.633]            // while-condition  =>  TRUE
[17:14:53.633]            // while "1"  (timeout="50000")
[17:14:53.634]            // while-condition  =>  TRUE
[17:14:53.634]            // while "1"  (timeout="50000")
[17:14:53.634]            // while-condition  =>  TRUE
[17:14:53.634]            // while "1"  (timeout="50000")
[17:14:53.635]            // while-condition  =>  TRUE
[17:14:53.635]            // while "1"  (timeout="50000")
[17:14:53.635]            // while-condition  =>  TRUE
[17:14:53.635]            // while "1"  (timeout="50000")
[17:14:53.635]            // while-condition  =>  TRUE
[17:14:53.636]            // while "1"  (timeout="50000")
[17:14:53.636]            // while-condition  =>  TRUE
[17:14:53.636]            // while "1"  (timeout="50000")
[17:14:53.636]            // while-condition  =>  TRUE
[17:14:53.637]            // while "1"  (timeout="50000")
[17:14:53.637]            // while-condition  =>  TRUE
[17:14:53.637]            // while "1"  (timeout="50000")
[17:14:53.637]            // while-condition  =>  TRUE
[17:14:53.637]            // while "1"  (timeout="50000")
[17:14:53.638]            // while-condition  =>  TRUE
[17:14:53.638]            // while "1"  (timeout="50000")
[17:14:53.638]            // while-condition  =>  TRUE
[17:14:53.638]            // while "1"  (timeout="50000")
[17:14:53.638]            // while-condition  =>  TRUE
[17:14:53.639]            // while "1"  (timeout="50000")
[17:14:53.639]            // while-condition  =>  TRUE
[17:14:53.639]            // while "1"  (timeout="50000")
[17:14:53.639]            // while-condition  =>  TRUE
[17:14:53.639]            // while "1"  (timeout="50000")
[17:14:53.640]            // while-condition  =>  TRUE
[17:14:53.640]            // while "1"  (timeout="50000")
[17:14:53.640]            // while-condition  =>  TRUE
[17:14:53.640]            // while "1"  (timeout="50000")
[17:14:53.641]            // while-condition  =>  TRUE
[17:14:53.641]            // while "1"  (timeout="50000")
[17:14:53.641]            // while-condition  =>  TRUE
[17:14:53.641]            // while "1"  (timeout="50000")
[17:14:53.642]            // while-condition  =>  TRUE
[17:14:53.642]            // while "1"  (timeout="50000")
[17:14:53.642]            // while-condition  =>  TRUE
[17:14:53.642]            // while "1"  (timeout="50000")
[17:14:53.643]            // while-condition  =>  TRUE
[17:14:53.643]            // while "1"  (timeout="50000")
[17:14:53.643]            // while-condition  =>  TRUE
[17:14:53.643]            // while "1"  (timeout="50000")
[17:14:53.644]            // while-condition  =>  TRUE
[17:14:53.644]            // while "1"  (timeout="50000")
[17:14:53.644]            // while-condition  =>  TRUE
[17:14:53.644]            // while "1"  (timeout="50000")
[17:14:53.645]            // while-condition  =>  TRUE
[17:14:53.645]            // while "1"  (timeout="50000")
[17:14:53.645]            // while-condition  =>  TRUE
[17:14:53.645]            // while "1"  (timeout="50000")
[17:14:53.646]            // while-condition  =>  TRUE
[17:14:53.646]            // while "1"  (timeout="50000")
[17:14:53.646]            // while-condition  =>  TRUE
[17:14:53.646]            // while "1"  (timeout="50000")
[17:14:53.647]            // while-condition  =>  TRUE
[17:14:53.647]            // while "1"  (timeout="50000")
[17:14:53.647]            // while-condition  =>  TRUE
[17:14:53.647]            // while "1"  (timeout="50000")
[17:14:53.647]            // while-condition  =>  TRUE
[17:14:53.648]            // while "1"  (timeout="50000")
[17:14:53.648]            // while-condition  =>  TRUE
[17:14:53.648]            // while "1"  (timeout="50000")
[17:14:53.648]            // while-condition  =>  TRUE
[17:14:53.648]            // while "1"  (timeout="50000")
[17:14:53.649]            // while-condition  =>  TRUE
[17:14:53.649]            // while "1"  (timeout="50000")
[17:14:53.649]            // while-condition  =>  TRUE
[17:14:53.649]            // while "1"  (timeout="50000")
[17:14:53.650]            // while-condition  =>  TRUE
[17:14:53.650]            // while "1"  (timeout="50000")
[17:14:53.650]            // while-condition  =>  TRUE
[17:14:53.650]            // while "1"  (timeout="50000")
[17:14:53.651]            // while-condition  =>  TRUE
[17:14:53.651]            // while "1"  (timeout="50000")
[17:14:53.651]            // while-condition  =>  TRUE
[17:14:53.651]            // while "1"  (timeout="50000")
[17:14:53.652]            // while-condition  =>  TRUE
[17:14:53.652]            // while "1"  (timeout="50000")
[17:14:53.652]            // while-condition  =>  TRUE
[17:14:53.652]            // while "1"  (timeout="50000")
[17:14:53.652]            // while-condition  =>  TRUE
[17:14:53.653]            // while "1"  (timeout="50000")
[17:14:53.653]            // while-condition  =>  TRUE
[17:14:53.653]            // while "1"  (timeout="50000")
[17:14:53.653]            // while-condition  =>  TRUE
[17:14:53.654]            // while "1"  (timeout="50000")
[17:14:53.654]            // while-condition  =>  TRUE
[17:14:53.654]            // while "1"  (timeout="50000")
[17:14:53.654]            // while-condition  =>  TRUE
[17:14:53.655]            // while "1"  (timeout="50000")
[17:14:53.655]            // while-condition  =>  TRUE
[17:14:53.655]            // while "1"  (timeout="50000")
[17:14:53.655]            // while-condition  =>  TRUE
[17:14:53.655]            // while "1"  (timeout="50000")
[17:14:53.656]            // while-condition  =>  TRUE
[17:14:53.656]            // while "1"  (timeout="50000")
[17:14:53.656]            // while-condition  =>  TRUE
[17:14:53.657]            // while "1"  (timeout="50000")
[17:14:53.657]            // while-condition  =>  TRUE
[17:14:53.657]            // while "1"  (timeout="50000")
[17:14:53.657]            // while-condition  =>  TRUE
[17:14:53.658]            // while "1"  (timeout="50000")
[17:14:53.658]            // while-condition  =>  TRUE
[17:14:53.658]            // while "1"  (timeout="50000")
[17:14:53.658]            // while-condition  =>  TRUE
[17:14:53.659]            // while "1"  (timeout="50000")
[17:14:53.659]            // while-condition  =>  TRUE
[17:14:53.659]            // while "1"  (timeout="50000")
[17:14:53.659]            // while-condition  =>  TRUE
[17:14:53.660]            // while "1"  (timeout="50000")
[17:14:53.660]            // while-condition  =>  TRUE
[17:14:53.660]            // while "1"  (timeout="50000")
[17:14:53.660]            // while-condition  =>  TRUE
[17:14:53.660]            // while "1"  (timeout="50000")
[17:14:53.661]            // while-condition  =>  TRUE
[17:14:53.661]            // while "1"  (timeout="50000")
[17:14:53.661]            // while-condition  =>  TRUE
[17:14:53.661]            // while "1"  (timeout="50000")
[17:14:53.661]            // while-condition  =>  TRUE
[17:14:53.662]            // while "1"  (timeout="50000")
[17:14:53.662]            // while  =>  TIMEOUT
[17:14:53.662]            // end while "1"
[17:14:53.662]          </control>
[17:14:53.662]          <block atomic="false" info="">
[17:14:53.663]            DAP_SWJ_Pins(nReset, nReset, 0);
[17:14:53.673]              // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0xFF]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=1, TDO=1, nTRST=1, nRESET=1)
[17:14:53.674]          </block>
[17:14:53.674]          <control if="" while="1" timeout="10000" info="">
[17:14:53.674]            // while "1"  (timeout="10000")
[17:14:53.675]            // while-condition  =>  TRUE
[17:14:53.675]            // while "1"  (timeout="10000")
[17:14:53.676]            // while-condition  =>  TRUE
[17:14:53.676]            // while "1"  (timeout="10000")
[17:14:53.677]            // while-condition  =>  TRUE
[17:14:53.677]            // while "1"  (timeout="10000")
[17:14:53.678]            // while  =>  TIMEOUT
[17:14:53.678]            // end while "1"
[17:14:53.678]          </control>
[17:14:53.679]          <block atomic="true" info="">
[17:14:53.679]            // ATOMIC SEQUENCE - EXECUTE
[17:14:53.680]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  // 50 cycles SWDIO/TMS High
[17:14:53.681]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:14:53.681]            DAP_SWJ_Sequence(3,  0x00);                // At least 3 idle cycles (SWDIO/TMS Low)
[17:14:53.681]              // -> [DAP_SWJ_Sequence(3, 0x0000000000000000)]
[17:14:53.681]            // ATOMIC SEQUENCE - DONE
[17:14:53.682]          </block>
[17:14:53.682]          <block atomic="false" info="">
[17:14:53.682]            __errorcontrol = 0x00000001;
[17:14:53.683]              // -> [__errorcontrol <= 0x00000001]  (Skip Errors="True")
[17:14:53.683]            ReadDP(0x0);
[17:14:53.684]              // -> [ReadDP(0x00000000) => 0x0BC11477]   (__dp=0x00000000)
[17:14:53.684]            __errorcontrol = 0x00000000;
[17:14:53.685]              // -> [__errorcontrol <= 0x00000000]  (Skip Errors="False")
[17:14:53.685]          </block>
[17:14:53.685]        </sequence>
[17:14:53.686]      Sequence("DebugPortSetup");
[17:14:53.686]        <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:14:53.686]        </sequence>
[17:14:53.686]      Sequence("DebugPortStart");
[17:14:53.687]        <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:14:53.687]          <block atomic="false" info="">
[17:14:53.687]            __var SW_DP_ABORT  = 0x0;
[17:14:53.687]              // -> [SW_DP_ABORT <= 0x00000000]
[17:14:53.688]            __var DP_CTRL_STAT = 0x4;
[17:14:53.688]              // -> [DP_CTRL_STAT <= 0x00000004]
[17:14:53.688]            __var DP_SELECT    = 0x8;
[17:14:53.688]              // -> [DP_SELECT <= 0x00000008]
[17:14:53.689]            __var powered_down = 0;
[17:14:53.689]              // -> [powered_down <= 0x00000000]
[17:14:53.689]            WriteDP(DP_SELECT, 0x00000000);
[17:14:53.691]              // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:14:53.692]            powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:14:53.693]              // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:14:53.694]              // -> [powered_down <= 0x00000001]
[17:14:53.694]          </block>
[17:14:53.694]          <control if="powered_down" while="" timeout="0" info="">
[17:14:53.695]            // if-block "powered_down"
[17:14:53.695]              // =>  TRUE
[17:14:53.695]            <block atomic="false" info="">
[17:14:53.696]              WriteDP(DP_CTRL_STAT, 0x50000000);
[17:14:53.697]                // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:14:53.697]            </block>
[17:14:53.698]            <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:14:53.698]              // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:14:53.699]                // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:14:53.699]              // while-condition  =>  FALSE
[17:14:53.700]              // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:14:53.700]            </control>
[17:14:53.700]            <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:14:53.700]              // if-block "(__protocol & 0xFFFF) == 1"
[17:14:53.701]                // =>  FALSE
[17:14:53.701]              // skip if-block "(__protocol & 0xFFFF) == 1"
[17:14:53.701]            </control>
[17:14:53.701]            <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:14:53.701]              // if-block "(__protocol & 0xFFFF) == 2"
[17:14:53.701]                // =>  TRUE
[17:14:53.702]              <block atomic="false" info="">
[17:14:53.702]                WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:14:53.703]                  // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:14:53.704]                WriteDP(SW_DP_ABORT, 0x0000001E);
[17:14:53.706]                  // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:14:53.706]              </block>
[17:14:53.706]              // end if-block "(__protocol & 0xFFFF) == 2"
[17:14:53.706]            </control>
[17:14:53.707]            // end if-block "powered_down"
[17:14:53.707]          </control>
[17:14:53.707]        </sequence>
[17:14:53.707]      Sequence("DebugCoreStart");
[17:14:53.708]        <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[17:14:53.708]          <block atomic="true" info="">
[17:14:53.708]            // ATOMIC SEQUENCE - EXECUTE
[17:14:53.711]            __var DP_R_IDCODE    = 0x0;
[17:14:53.711]              // -> [DP_R_IDCODE <= 0x00000000]
[17:14:53.711]            __var DP_W_ABORT    = 0x0;
[17:14:53.711]              // -> [DP_W_ABORT <= 0x00000000]
[17:14:53.712]            __var DP_CTRLSTAT = 0x4;
[17:14:53.712]              // -> [DP_CTRLSTAT <= 0x00000004]
[17:14:53.712]            __var DP_W_SELECT    = 0x8;
[17:14:53.712]              // -> [DP_W_SELECT <= 0x00000008]
[17:14:53.713]            __var AP_TAR		= 0x4;
[17:14:53.713]              // -> [AP_TAR <= 0x00000004]
[17:14:53.713]            __var AP_BD0		= 0x0;
[17:14:53.713]              // -> [AP_BD0 <= 0x00000000]
[17:14:53.714]            __var AP_BD1		= 0x4;
[17:14:53.714]              // -> [AP_BD1 <= 0x00000004]
[17:14:53.714]            __var AP_BD2		= 0x8;
[17:14:53.714]              // -> [AP_BD2 <= 0x00000008]
[17:14:53.715]            __var PCWithinFlash = 0;
[17:14:53.715]              // -> [PCWithinFlash <= 0x00000000]
[17:14:53.715]            Write32(0xE000EDF0, 0xA05F0003);	// Halt the CORE
[17:14:53.715]              // -> [Write32(0xE000EDF0, 0xA05F0003)]   (__dp=0x00000000, __ap=0x00000000)
[17:14:53.716]            // ATOMIC SEQUENCE - DONE
[17:14:53.716]          </block>
[17:14:53.716]          <control if="" while="(Read32(0xE000EDF0) & 0x00020000) != 0x00020000" timeout="1000000" info="">
[17:14:53.716]            // while "(Read32(0xE000EDF0) & 0x00020000) != 0x00020000"  (timeout="1000000")
[17:14:53.720]              // -> [Read32(0xE000EDF0) => 0x03030003]   (__dp=0x00000000, __ap=0x00000000)
[17:14:53.720]            // while-condition  =>  FALSE
[17:14:53.720]            // end while "(Read32(0xE000EDF0) & 0x00020000) != 0x00020000"
[17:14:53.720]          </control>
[17:14:53.721]          <block atomic="true" info="">
[17:14:53.721]            // ATOMIC SEQUENCE - EXECUTE
[17:14:53.723]            WriteDP(DP_W_SELECT, 0x00000000);	//Select 0x00
[17:14:53.723]              // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:14:53.723]            WriteAP(AP_TAR, 0xE000EDF0);		//Set TAR to DHCSR
[17:14:53.723]              // -> [WriteAP(0x00000004, 0xE000EDF0)]   (__dp=0x00000000, __ap=0x00000000)
[17:14:53.724]            WriteDP(DP_W_SELECT, 0x00000010);	//Select 0x10
[17:14:53.724]              // -> [WriteDP(0x00000008, 0x00000010)]   (__dp=0x00000000)
[17:14:53.724]            WriteAP(AP_BD1, 0x0000000F);		//Trigger read of PC
[17:14:53.724]              // -> [WriteAP(0x00000004, 0x0000000F)]   (__dp=0x00000000, __ap=0x00000000)
[17:14:53.725]            // ATOMIC SEQUENCE - DONE
[17:14:53.725]          </block>
[17:14:53.725]          <control if="" while="(ReadAP(AP_BD0) & 0x00010000) != 0x00010000" timeout="100000" info="">
[17:14:53.725]            // while "(ReadAP(AP_BD0) & 0x00010000) != 0x00010000"  (timeout="100000")
[17:14:53.727]              // -> [ReadAP(0x00000000) => 0x01030003]   (__dp=0x00000000, __ap=0x00000000)
[17:14:53.727]            // while-condition  =>  FALSE
[17:14:53.727]            // end while "(ReadAP(AP_BD0) & 0x00010000) != 0x00010000"
[17:14:53.727]          </control>
[17:14:53.728]          <block atomic="false" info="">
[17:14:53.728]            PCWithinFlash = (ReadAP(AP_BD2) >= 0x10000800);
[17:14:53.730]              // -> [ReadAP(0x00000008) => 0x10000820]   (__dp=0x00000000, __ap=0x00000000)
[17:14:53.730]              // -> [PCWithinFlash <= 0x00000001]
[17:14:53.731]            WriteDP(DP_W_SELECT, 0x00000000);	//Select 0x00
[17:14:53.732]              // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:14:53.732]          </block>
[17:14:53.732]          <control if="PCWithinFlash == 0" while="" timeout="0" info="">
[17:14:53.732]            // if-block "PCWithinFlash == 0"
[17:14:53.733]              // =>  FALSE
[17:14:53.733]            // skip if-block "PCWithinFlash == 0"
[17:14:53.733]          </control>
[17:14:53.734]        </sequence>
[17:14:53.734]    </block>
[17:14:53.734]  </sequence>
[17:14:53.734]  
[17:15:01.385]  **********  Sequence "DebugPortStop"  (Context="Disconnect", Pname="", info="")
[17:15:01.385]  
[17:15:01.386]  <debugvars>
[17:15:01.386]    // Pre-defined
[17:15:01.387]    __protocol=0x00000002      (Protocol="SWD", SWJ-DP="False")
[17:15:01.387]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:15:01.388]    __dp=0x00000000
[17:15:01.389]    __ap=0x00000000
[17:15:01.389]    __traceout=0x00000000      (Trace Disabled)
[17:15:01.390]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:15:01.390]    __FlashAddr=0x00000000
[17:15:01.391]    __FlashLen=0x00000000
[17:15:01.392]    __FlashArg=0x00000000
[17:15:01.392]    __FlashOp=0x00000000
[17:15:01.392]    __Result=0x00000000
[17:15:01.393]  </debugvars>
[17:15:01.393]  
[17:15:01.394]  <sequence name="DebugPortStop" Pname="" disable="false" info="">
[17:15:01.395]    <block atomic="false" info="">
[17:15:01.395]      __var nReset      = 0x80;
[17:15:01.396]        // -> [nReset <= 0x00000080]
[17:15:01.396]      DAP_SWJ_Pins(0x00, nReset, 0);
[17:15:01.398]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0xFF]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=1, TDO=1, nTRST=1, nRESET=1)
[17:15:01.398]    </block>
[17:15:01.399]    <control if="" while="1" timeout="50000" info="">
[17:15:01.399]      // while "1"  (timeout="50000")
[17:15:01.400]      // while-condition  =>  TRUE
[17:15:01.400]      // while "1"  (timeout="50000")
[17:15:01.401]      // while-condition  =>  TRUE
[17:15:01.401]      // while "1"  (timeout="50000")
[17:15:01.401]      // while-condition  =>  TRUE
[17:15:01.402]      // while "1"  (timeout="50000")
[17:15:01.402]      // while-condition  =>  TRUE
[17:15:01.402]      // while "1"  (timeout="50000")
[17:15:01.403]      // while-condition  =>  TRUE
[17:15:01.403]      // while "1"  (timeout="50000")
[17:15:01.403]      // while-condition  =>  TRUE
[17:15:01.403]      // while "1"  (timeout="50000")
[17:15:01.404]      // while-condition  =>  TRUE
[17:15:01.404]      // while "1"  (timeout="50000")
[17:15:01.404]      // while-condition  =>  TRUE
[17:15:01.405]      // while "1"  (timeout="50000")
[17:15:01.405]      // while-condition  =>  TRUE
[17:15:01.405]      // while "1"  (timeout="50000")
[17:15:01.405]      // while-condition  =>  TRUE
[17:15:01.405]      // while "1"  (timeout="50000")
[17:15:01.405]      // while-condition  =>  TRUE
[17:15:01.405]      // while "1"  (timeout="50000")
[17:15:01.406]      // while-condition  =>  TRUE
[17:15:01.406]      // while "1"  (timeout="50000")
[17:15:01.406]      // while-condition  =>  TRUE
[17:15:01.406]      // while "1"  (timeout="50000")
[17:15:01.407]      // while-condition  =>  TRUE
[17:15:01.407]      // while "1"  (timeout="50000")
[17:15:01.407]      // while-condition  =>  TRUE
[17:15:01.409]      // while "1"  (timeout="50000")
[17:15:01.409]      // while-condition  =>  TRUE
[17:15:01.409]      // while "1"  (timeout="50000")
[17:15:01.410]      // while-condition  =>  TRUE
[17:15:01.410]      // while "1"  (timeout="50000")
[17:15:01.410]      // while-condition  =>  TRUE
[17:15:01.411]      // while "1"  (timeout="50000")
[17:15:01.411]      // while-condition  =>  TRUE
[17:15:01.411]      // while "1"  (timeout="50000")
[17:15:01.411]      // while-condition  =>  TRUE
[17:15:01.411]      // while "1"  (timeout="50000")
[17:15:01.412]      // while-condition  =>  TRUE
[17:15:01.412]      // while "1"  (timeout="50000")
[17:15:01.412]      // while-condition  =>  TRUE
[17:15:01.412]      // while "1"  (timeout="50000")
[17:15:01.413]      // while-condition  =>  TRUE
[17:15:01.413]      // while "1"  (timeout="50000")
[17:15:01.413]      // while-condition  =>  TRUE
[17:15:01.413]      // while "1"  (timeout="50000")
[17:15:01.413]      // while-condition  =>  TRUE
[17:15:01.414]      // while "1"  (timeout="50000")
[17:15:01.414]      // while-condition  =>  TRUE
[17:15:01.414]      // while "1"  (timeout="50000")
[17:15:01.414]      // while-condition  =>  TRUE
[17:15:01.414]      // while "1"  (timeout="50000")
[17:15:01.415]      // while-condition  =>  TRUE
[17:15:01.415]      // while "1"  (timeout="50000")
[17:15:01.415]      // while-condition  =>  TRUE
[17:15:01.415]      // while "1"  (timeout="50000")
[17:15:01.415]      // while-condition  =>  TRUE
[17:15:01.415]      // while "1"  (timeout="50000")
[17:15:01.415]      // while-condition  =>  TRUE
[17:15:01.416]      // while "1"  (timeout="50000")
[17:15:01.416]      // while-condition  =>  TRUE
[17:15:01.416]      // while "1"  (timeout="50000")
[17:15:01.416]      // while-condition  =>  TRUE
[17:15:01.416]      // while "1"  (timeout="50000")
[17:15:01.417]      // while-condition  =>  TRUE
[17:15:01.417]      // while "1"  (timeout="50000")
[17:15:01.417]      // while-condition  =>  TRUE
[17:15:01.418]      // while "1"  (timeout="50000")
[17:15:01.418]      // while-condition  =>  TRUE
[17:15:01.418]      // while "1"  (timeout="50000")
[17:15:01.418]      // while-condition  =>  TRUE
[17:15:01.418]      // while "1"  (timeout="50000")
[17:15:01.419]      // while-condition  =>  TRUE
[17:15:01.419]      // while "1"  (timeout="50000")
[17:15:01.419]      // while-condition  =>  TRUE
[17:15:01.419]      // while "1"  (timeout="50000")
[17:15:01.419]      // while-condition  =>  TRUE
[17:15:01.419]      // while "1"  (timeout="50000")
[17:15:01.420]      // while-condition  =>  TRUE
[17:15:01.420]      // while "1"  (timeout="50000")
[17:15:01.420]      // while-condition  =>  TRUE
[17:15:01.420]      // while "1"  (timeout="50000")
[17:15:01.420]      // while-condition  =>  TRUE
[17:15:01.421]      // while "1"  (timeout="50000")
[17:15:01.421]      // while-condition  =>  TRUE
[17:15:01.421]      // while "1"  (timeout="50000")
[17:15:01.421]      // while-condition  =>  TRUE
[17:15:01.421]      // while "1"  (timeout="50000")
[17:15:01.422]      // while-condition  =>  TRUE
[17:15:01.422]      // while "1"  (timeout="50000")
[17:15:01.422]      // while-condition  =>  TRUE
[17:15:01.422]      // while "1"  (timeout="50000")
[17:15:01.422]      // while-condition  =>  TRUE
[17:15:01.423]      // while "1"  (timeout="50000")
[17:15:01.423]      // while-condition  =>  TRUE
[17:15:01.423]      // while "1"  (timeout="50000")
[17:15:01.423]      // while-condition  =>  TRUE
[17:15:01.423]      // while "1"  (timeout="50000")
[17:15:01.424]      // while-condition  =>  TRUE
[17:15:01.424]      // while "1"  (timeout="50000")
[17:15:01.424]      // while-condition  =>  TRUE
[17:15:01.424]      // while "1"  (timeout="50000")
[17:15:01.424]      // while-condition  =>  TRUE
[17:15:01.424]      // while "1"  (timeout="50000")
[17:15:01.425]      // while-condition  =>  TRUE
[17:15:01.425]      // while "1"  (timeout="50000")
[17:15:01.425]      // while-condition  =>  TRUE
[17:15:01.425]      // while "1"  (timeout="50000")
[17:15:01.425]      // while-condition  =>  TRUE
[17:15:01.425]      // while "1"  (timeout="50000")
[17:15:01.425]      // while-condition  =>  TRUE
[17:15:01.425]      // while "1"  (timeout="50000")
[17:15:01.426]      // while-condition  =>  TRUE
[17:15:01.426]      // while "1"  (timeout="50000")
[17:15:01.426]      // while-condition  =>  TRUE
[17:15:01.426]      // while "1"  (timeout="50000")
[17:15:01.426]      // while-condition  =>  TRUE
[17:15:01.427]      // while "1"  (timeout="50000")
[17:15:01.427]      // while-condition  =>  TRUE
[17:15:01.428]      // while "1"  (timeout="50000")
[17:15:01.428]      // while-condition  =>  TRUE
[17:15:01.428]      // while "1"  (timeout="50000")
[17:15:01.428]      // while-condition  =>  TRUE
[17:15:01.428]      // while "1"  (timeout="50000")
[17:15:01.429]      // while-condition  =>  TRUE
[17:15:01.429]      // while "1"  (timeout="50000")
[17:15:01.429]      // while-condition  =>  TRUE
[17:15:01.429]      // while "1"  (timeout="50000")
[17:15:01.429]      // while-condition  =>  TRUE
[17:15:01.430]      // while "1"  (timeout="50000")
[17:15:01.430]      // while-condition  =>  TRUE
[17:15:01.430]      // while "1"  (timeout="50000")
[17:15:01.430]      // while-condition  =>  TRUE
[17:15:01.431]      // while "1"  (timeout="50000")
[17:15:01.431]      // while-condition  =>  TRUE
[17:15:01.431]      // while "1"  (timeout="50000")
[17:15:01.431]      // while-condition  =>  TRUE
[17:15:01.431]      // while "1"  (timeout="50000")
[17:15:01.431]      // while-condition  =>  TRUE
[17:15:01.431]      // while "1"  (timeout="50000")
[17:15:01.432]      // while-condition  =>  TRUE
[17:15:01.432]      // while "1"  (timeout="50000")
[17:15:01.432]      // while-condition  =>  TRUE
[17:15:01.433]      // while "1"  (timeout="50000")
[17:15:01.433]      // while-condition  =>  TRUE
[17:15:01.433]      // while "1"  (timeout="50000")
[17:15:01.433]      // while-condition  =>  TRUE
[17:15:01.434]      // while "1"  (timeout="50000")
[17:15:01.434]      // while-condition  =>  TRUE
[17:15:01.434]      // while "1"  (timeout="50000")
[17:15:01.434]      // while-condition  =>  TRUE
[17:15:01.434]      // while "1"  (timeout="50000")
[17:15:01.435]      // while-condition  =>  TRUE
[17:15:01.435]      // while "1"  (timeout="50000")
[17:15:01.435]      // while-condition  =>  TRUE
[17:15:01.435]      // while "1"  (timeout="50000")
[17:15:01.435]      // while-condition  =>  TRUE
[17:15:01.436]      // while "1"  (timeout="50000")
[17:15:01.436]      // while-condition  =>  TRUE
[17:15:01.436]      // while "1"  (timeout="50000")
[17:15:01.436]      // while-condition  =>  TRUE
[17:15:01.436]      // while "1"  (timeout="50000")
[17:15:01.436]      // while-condition  =>  TRUE
[17:15:01.437]      // while "1"  (timeout="50000")
[17:15:01.437]      // while-condition  =>  TRUE
[17:15:01.437]      // while "1"  (timeout="50000")
[17:15:01.437]      // while-condition  =>  TRUE
[17:15:01.438]      // while "1"  (timeout="50000")
[17:15:01.438]      // while-condition  =>  TRUE
[17:15:01.438]      // while "1"  (timeout="50000")
[17:15:01.438]      // while-condition  =>  TRUE
[17:15:01.438]      // while "1"  (timeout="50000")
[17:15:01.439]      // while-condition  =>  TRUE
[17:15:01.439]      // while "1"  (timeout="50000")
[17:15:01.439]      // while-condition  =>  TRUE
[17:15:01.439]      // while "1"  (timeout="50000")
[17:15:01.439]      // while-condition  =>  TRUE
[17:15:01.439]      // while "1"  (timeout="50000")
[17:15:01.440]      // while-condition  =>  TRUE
[17:15:01.440]      // while "1"  (timeout="50000")
[17:15:01.440]      // while-condition  =>  TRUE
[17:15:01.440]      // while "1"  (timeout="50000")
[17:15:01.441]      // while-condition  =>  TRUE
[17:15:01.441]      // while "1"  (timeout="50000")
[17:15:01.441]      // while-condition  =>  TRUE
[17:15:01.441]      // while "1"  (timeout="50000")
[17:15:01.441]      // while-condition  =>  TRUE
[17:15:01.442]      // while "1"  (timeout="50000")
[17:15:01.442]      // while-condition  =>  TRUE
[17:15:01.442]      // while "1"  (timeout="50000")
[17:15:01.442]      // while-condition  =>  TRUE
[17:15:01.442]      // while "1"  (timeout="50000")
[17:15:01.443]      // while-condition  =>  TRUE
[17:15:01.443]      // while "1"  (timeout="50000")
[17:15:01.443]      // while-condition  =>  TRUE
[17:15:01.443]      // while "1"  (timeout="50000")
[17:15:01.443]      // while-condition  =>  TRUE
[17:15:01.443]      // while "1"  (timeout="50000")
[17:15:01.444]      // while-condition  =>  TRUE
[17:15:01.444]      // while "1"  (timeout="50000")
[17:15:01.444]      // while-condition  =>  TRUE
[17:15:01.444]      // while "1"  (timeout="50000")
[17:15:01.444]      // while-condition  =>  TRUE
[17:15:01.445]      // while "1"  (timeout="50000")
[17:15:01.445]      // while-condition  =>  TRUE
[17:15:01.445]      // while "1"  (timeout="50000")
[17:15:01.445]      // while-condition  =>  TRUE
[17:15:01.445]      // while "1"  (timeout="50000")
[17:15:01.446]      // while-condition  =>  TRUE
[17:15:01.446]      // while "1"  (timeout="50000")
[17:15:01.446]      // while-condition  =>  TRUE
[17:15:01.446]      // while "1"  (timeout="50000")
[17:15:01.446]      // while-condition  =>  TRUE
[17:15:01.446]      // while "1"  (timeout="50000")
[17:15:01.446]      // while-condition  =>  TRUE
[17:15:01.447]      // while "1"  (timeout="50000")
[17:15:01.447]      // while-condition  =>  TRUE
[17:15:01.447]      // while "1"  (timeout="50000")
[17:15:01.447]      // while-condition  =>  TRUE
[17:15:01.447]      // while "1"  (timeout="50000")
[17:15:01.447]      // while-condition  =>  TRUE
[17:15:01.448]      // while "1"  (timeout="50000")
[17:15:01.448]      // while-condition  =>  TRUE
[17:15:01.448]      // while "1"  (timeout="50000")
[17:15:01.448]      // while-condition  =>  TRUE
[17:15:01.449]      // while "1"  (timeout="50000")
[17:15:01.449]      // while-condition  =>  TRUE
[17:15:01.449]      // while "1"  (timeout="50000")
[17:15:01.449]      // while-condition  =>  TRUE
[17:15:01.450]      // while "1"  (timeout="50000")
[17:15:01.450]      // while-condition  =>  TRUE
[17:15:01.450]      // while "1"  (timeout="50000")
[17:15:01.450]      // while-condition  =>  TRUE
[17:15:01.450]      // while "1"  (timeout="50000")
[17:15:01.451]      // while-condition  =>  TRUE
[17:15:01.451]      // while "1"  (timeout="50000")
[17:15:01.451]      // while-condition  =>  TRUE
[17:15:01.451]      // while "1"  (timeout="50000")
[17:15:01.453]      // while-condition  =>  TRUE
[17:15:01.453]      // while "1"  (timeout="50000")
[17:15:01.453]      // while-condition  =>  TRUE
[17:15:01.453]      // while "1"  (timeout="50000")
[17:15:01.454]      // while-condition  =>  TRUE
[17:15:01.454]      // while "1"  (timeout="50000")
[17:15:01.454]      // while-condition  =>  TRUE
[17:15:01.454]      // while "1"  (timeout="50000")
[17:15:01.455]      // while-condition  =>  TRUE
[17:15:01.455]      // while "1"  (timeout="50000")
[17:15:01.455]      // while-condition  =>  TRUE
[17:15:01.455]      // while "1"  (timeout="50000")
[17:15:01.456]      // while-condition  =>  TRUE
[17:15:01.456]      // while "1"  (timeout="50000")
[17:15:01.456]      // while-condition  =>  TRUE
[17:15:01.456]      // while "1"  (timeout="50000")
[17:15:01.456]      // while-condition  =>  TRUE
[17:15:01.457]      // while "1"  (timeout="50000")
[17:15:01.457]      // while-condition  =>  TRUE
[17:15:01.457]      // while "1"  (timeout="50000")
[17:15:01.457]      // while-condition  =>  TRUE
[17:15:01.457]      // while "1"  (timeout="50000")
[17:15:01.457]      // while-condition  =>  TRUE
[17:15:01.457]      // while "1"  (timeout="50000")
[17:15:01.457]      // while-condition  =>  TRUE
[17:15:01.457]      // while "1"  (timeout="50000")
[17:15:01.458]      // while-condition  =>  TRUE
[17:15:01.459]      // while "1"  (timeout="50000")
[17:15:01.459]      // while  =>  TIMEOUT
[17:15:01.459]      // end while "1"
[17:15:01.459]    </control>
[17:15:01.459]    <block atomic="false" info="">
[17:15:01.460]      DAP_SWJ_Pins(nReset, nReset, 0);
[17:15:01.471]        // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0xFF]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=1, TDO=1, nTRST=1, nRESET=1)
[17:15:01.475]    </block>
[17:15:01.475]  </sequence>
[17:15:01.476]  
[17:16:03.940]  **********  Sequence "ResetHardware"  (Context="Connect", Pname="", info="")
[17:16:03.940]  
[17:16:03.940]  <debugvars>
[17:16:03.940]    // Pre-defined
[17:16:03.941]    __protocol=0x00000002      (Protocol="SWD", SWJ-DP="False")
[17:16:03.941]    __connection=0x00020202    (Connection Type="Flash", Reset Type="System Reset", Pre-Connect HW Reset)
[17:16:03.941]    __dp=0x00000000
[17:16:03.942]    __ap=0x00000000
[17:16:03.942]    __traceout=0x00000000      (Trace Disabled)
[17:16:03.942]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:16:03.942]    __FlashAddr=0x00000000
[17:16:03.943]    __FlashLen=0x00000000
[17:16:03.943]    __FlashArg=0x00000000
[17:16:03.943]    __FlashOp=0x00000000
[17:16:03.943]    __Result=0x00000000
[17:16:03.944]  </debugvars>
[17:16:03.944]  
[17:16:03.944]  <sequence name="ResetHardware" Pname="" disable="false" info="">
[17:16:03.944]    <block atomic="false" info="">
[17:16:03.944]      __var nReset      = 0x80;
[17:16:03.945]        // -> [nReset <= 0x00000080]
[17:16:03.945]      DAP_SWJ_Pins(0x00, nReset, 0);
[17:16:03.946]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0xFF]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=1, TDO=1, nTRST=1, nRESET=1)
[17:16:03.946]    </block>
[17:16:03.946]    <control if="" while="1" timeout="50000" info="">
[17:16:03.946]      // while "1"  (timeout="50000")
[17:16:03.947]      // while-condition  =>  TRUE
[17:16:03.947]      // while "1"  (timeout="50000")
[17:16:03.947]      // while-condition  =>  TRUE
[17:16:03.947]      // while "1"  (timeout="50000")
[17:16:03.948]      // while-condition  =>  TRUE
[17:16:03.948]      // while "1"  (timeout="50000")
[17:16:03.948]      // while-condition  =>  TRUE
[17:16:03.948]      // while "1"  (timeout="50000")
[17:16:03.948]      // while-condition  =>  TRUE
[17:16:03.949]      // while "1"  (timeout="50000")
[17:16:03.949]      // while-condition  =>  TRUE
[17:16:03.949]      // while "1"  (timeout="50000")
[17:16:03.949]      // while-condition  =>  TRUE
[17:16:03.950]      // while "1"  (timeout="50000")
[17:16:03.950]      // while-condition  =>  TRUE
[17:16:03.950]      // while "1"  (timeout="50000")
[17:16:03.950]      // while-condition  =>  TRUE
[17:16:03.951]      // while "1"  (timeout="50000")
[17:16:03.951]      // while-condition  =>  TRUE
[17:16:03.951]      // while "1"  (timeout="50000")
[17:16:03.951]      // while-condition  =>  TRUE
[17:16:03.952]      // while "1"  (timeout="50000")
[17:16:03.952]      // while-condition  =>  TRUE
[17:16:03.952]      // while "1"  (timeout="50000")
[17:16:03.952]      // while-condition  =>  TRUE
[17:16:03.953]      // while "1"  (timeout="50000")
[17:16:03.953]      // while-condition  =>  TRUE
[17:16:03.953]      // while "1"  (timeout="50000")
[17:16:03.953]      // while-condition  =>  TRUE
[17:16:03.953]      // while "1"  (timeout="50000")
[17:16:03.954]      // while-condition  =>  TRUE
[17:16:03.954]      // while "1"  (timeout="50000")
[17:16:03.954]      // while-condition  =>  TRUE
[17:16:03.955]      // while "1"  (timeout="50000")
[17:16:03.955]      // while-condition  =>  TRUE
[17:16:03.955]      // while "1"  (timeout="50000")
[17:16:03.956]      // while-condition  =>  TRUE
[17:16:03.956]      // while "1"  (timeout="50000")
[17:16:03.956]      // while-condition  =>  TRUE
[17:16:03.957]      // while "1"  (timeout="50000")
[17:16:03.957]      // while-condition  =>  TRUE
[17:16:03.957]      // while "1"  (timeout="50000")
[17:16:03.957]      // while-condition  =>  TRUE
[17:16:03.958]      // while "1"  (timeout="50000")
[17:16:03.958]      // while-condition  =>  TRUE
[17:16:03.958]      // while "1"  (timeout="50000")
[17:16:03.958]      // while-condition  =>  TRUE
[17:16:03.959]      // while "1"  (timeout="50000")
[17:16:03.959]      // while-condition  =>  TRUE
[17:16:03.959]      // while "1"  (timeout="50000")
[17:16:03.960]      // while-condition  =>  TRUE
[17:16:03.960]      // while "1"  (timeout="50000")
[17:16:03.960]      // while-condition  =>  TRUE
[17:16:03.960]      // while "1"  (timeout="50000")
[17:16:03.961]      // while-condition  =>  TRUE
[17:16:03.961]      // while "1"  (timeout="50000")
[17:16:03.962]      // while-condition  =>  TRUE
[17:16:03.962]      // while "1"  (timeout="50000")
[17:16:03.962]      // while-condition  =>  TRUE
[17:16:03.963]      // while "1"  (timeout="50000")
[17:16:03.963]      // while-condition  =>  TRUE
[17:16:03.963]      // while "1"  (timeout="50000")
[17:16:03.963]      // while-condition  =>  TRUE
[17:16:03.963]      // while "1"  (timeout="50000")
[17:16:03.964]      // while-condition  =>  TRUE
[17:16:03.964]      // while "1"  (timeout="50000")
[17:16:03.964]      // while-condition  =>  TRUE
[17:16:03.964]      // while "1"  (timeout="50000")
[17:16:03.965]      // while-condition  =>  TRUE
[17:16:03.965]      // while "1"  (timeout="50000")
[17:16:03.965]      // while-condition  =>  TRUE
[17:16:03.965]      // while "1"  (timeout="50000")
[17:16:03.965]      // while-condition  =>  TRUE
[17:16:03.966]      // while "1"  (timeout="50000")
[17:16:03.966]      // while-condition  =>  TRUE
[17:16:03.966]      // while "1"  (timeout="50000")
[17:16:03.966]      // while-condition  =>  TRUE
[17:16:03.967]      // while "1"  (timeout="50000")
[17:16:03.967]      // while-condition  =>  TRUE
[17:16:03.967]      // while "1"  (timeout="50000")
[17:16:03.967]      // while-condition  =>  TRUE
[17:16:03.968]      // while "1"  (timeout="50000")
[17:16:03.968]      // while-condition  =>  TRUE
[17:16:03.968]      // while "1"  (timeout="50000")
[17:16:03.968]      // while-condition  =>  TRUE
[17:16:03.968]      // while "1"  (timeout="50000")
[17:16:03.969]      // while-condition  =>  TRUE
[17:16:03.969]      // while "1"  (timeout="50000")
[17:16:03.969]      // while-condition  =>  TRUE
[17:16:03.969]      // while "1"  (timeout="50000")
[17:16:03.970]      // while-condition  =>  TRUE
[17:16:03.970]      // while "1"  (timeout="50000")
[17:16:03.970]      // while-condition  =>  TRUE
[17:16:03.970]      // while "1"  (timeout="50000")
[17:16:03.970]      // while-condition  =>  TRUE
[17:16:03.971]      // while "1"  (timeout="50000")
[17:16:03.971]      // while-condition  =>  TRUE
[17:16:03.971]      // while "1"  (timeout="50000")
[17:16:03.971]      // while-condition  =>  TRUE
[17:16:03.972]      // while "1"  (timeout="50000")
[17:16:03.972]      // while-condition  =>  TRUE
[17:16:03.972]      // while "1"  (timeout="50000")
[17:16:03.972]      // while-condition  =>  TRUE
[17:16:03.973]      // while "1"  (timeout="50000")
[17:16:03.973]      // while-condition  =>  TRUE
[17:16:03.973]      // while "1"  (timeout="50000")
[17:16:03.973]      // while-condition  =>  TRUE
[17:16:03.973]      // while "1"  (timeout="50000")
[17:16:03.974]      // while-condition  =>  TRUE
[17:16:03.974]      // while "1"  (timeout="50000")
[17:16:03.974]      // while-condition  =>  TRUE
[17:16:03.974]      // while "1"  (timeout="50000")
[17:16:03.975]      // while-condition  =>  TRUE
[17:16:03.975]      // while "1"  (timeout="50000")
[17:16:03.975]      // while-condition  =>  TRUE
[17:16:03.975]      // while "1"  (timeout="50000")
[17:16:03.976]      // while-condition  =>  TRUE
[17:16:03.976]      // while "1"  (timeout="50000")
[17:16:03.976]      // while-condition  =>  TRUE
[17:16:03.976]      // while "1"  (timeout="50000")
[17:16:03.977]      // while-condition  =>  TRUE
[17:16:03.977]      // while "1"  (timeout="50000")
[17:16:03.977]      // while-condition  =>  TRUE
[17:16:03.977]      // while "1"  (timeout="50000")
[17:16:03.977]      // while-condition  =>  TRUE
[17:16:03.978]      // while "1"  (timeout="50000")
[17:16:03.978]      // while-condition  =>  TRUE
[17:16:03.978]      // while "1"  (timeout="50000")
[17:16:03.978]      // while-condition  =>  TRUE
[17:16:03.979]      // while "1"  (timeout="50000")
[17:16:03.979]      // while-condition  =>  TRUE
[17:16:03.979]      // while "1"  (timeout="50000")
[17:16:03.979]      // while-condition  =>  TRUE
[17:16:03.979]      // while "1"  (timeout="50000")
[17:16:03.980]      // while-condition  =>  TRUE
[17:16:03.980]      // while "1"  (timeout="50000")
[17:16:03.980]      // while-condition  =>  TRUE
[17:16:03.980]      // while "1"  (timeout="50000")
[17:16:03.981]      // while-condition  =>  TRUE
[17:16:03.981]      // while "1"  (timeout="50000")
[17:16:03.981]      // while-condition  =>  TRUE
[17:16:03.981]      // while "1"  (timeout="50000")
[17:16:03.982]      // while-condition  =>  TRUE
[17:16:03.982]      // while "1"  (timeout="50000")
[17:16:03.983]      // while-condition  =>  TRUE
[17:16:03.983]      // while "1"  (timeout="50000")
[17:16:03.983]      // while-condition  =>  TRUE
[17:16:03.983]      // while "1"  (timeout="50000")
[17:16:03.984]      // while-condition  =>  TRUE
[17:16:03.984]      // while "1"  (timeout="50000")
[17:16:03.984]      // while-condition  =>  TRUE
[17:16:03.985]      // while "1"  (timeout="50000")
[17:16:03.985]      // while-condition  =>  TRUE
[17:16:03.985]      // while "1"  (timeout="50000")
[17:16:03.986]      // while-condition  =>  TRUE
[17:16:03.986]      // while "1"  (timeout="50000")
[17:16:03.986]      // while-condition  =>  TRUE
[17:16:03.986]      // while "1"  (timeout="50000")
[17:16:03.987]      // while-condition  =>  TRUE
[17:16:03.987]      // while "1"  (timeout="50000")
[17:16:03.987]      // while-condition  =>  TRUE
[17:16:03.988]      // while "1"  (timeout="50000")
[17:16:03.988]      // while-condition  =>  TRUE
[17:16:03.988]      // while "1"  (timeout="50000")
[17:16:03.989]      // while-condition  =>  TRUE
[17:16:03.989]      // while "1"  (timeout="50000")
[17:16:03.989]      // while-condition  =>  TRUE
[17:16:03.990]      // while "1"  (timeout="50000")
[17:16:03.990]      // while-condition  =>  TRUE
[17:16:03.990]      // while "1"  (timeout="50000")
[17:16:03.991]      // while-condition  =>  TRUE
[17:16:03.992]      // while "1"  (timeout="50000")
[17:16:03.992]      // while-condition  =>  TRUE
[17:16:03.992]      // while "1"  (timeout="50000")
[17:16:03.992]      // while-condition  =>  TRUE
[17:16:03.993]      // while "1"  (timeout="50000")
[17:16:03.993]      // while-condition  =>  TRUE
[17:16:03.993]      // while "1"  (timeout="50000")
[17:16:03.993]      // while-condition  =>  TRUE
[17:16:03.994]      // while "1"  (timeout="50000")
[17:16:03.994]      // while-condition  =>  TRUE
[17:16:03.994]      // while "1"  (timeout="50000")
[17:16:03.994]      // while-condition  =>  TRUE
[17:16:03.995]      // while "1"  (timeout="50000")
[17:16:03.995]      // while-condition  =>  TRUE
[17:16:03.995]      // while "1"  (timeout="50000")
[17:16:03.996]      // while-condition  =>  TRUE
[17:16:03.996]      // while "1"  (timeout="50000")
[17:16:03.996]      // while-condition  =>  TRUE
[17:16:03.997]      // while "1"  (timeout="50000")
[17:16:03.997]      // while-condition  =>  TRUE
[17:16:03.997]      // while "1"  (timeout="50000")
[17:16:03.998]      // while-condition  =>  TRUE
[17:16:03.998]      // while "1"  (timeout="50000")
[17:16:03.998]      // while-condition  =>  TRUE
[17:16:03.999]      // while "1"  (timeout="50000")
[17:16:03.999]      // while-condition  =>  TRUE
[17:16:03.999]      // while "1"  (timeout="50000")
[17:16:03.999]      // while-condition  =>  TRUE
[17:16:04.000]      // while "1"  (timeout="50000")
[17:16:04.000]      // while-condition  =>  TRUE
[17:16:04.000]      // while "1"  (timeout="50000")
[17:16:04.000]      // while-condition  =>  TRUE
[17:16:04.001]      // while "1"  (timeout="50000")
[17:16:04.001]      // while-condition  =>  TRUE
[17:16:04.001]      // while "1"  (timeout="50000")
[17:16:04.002]      // while-condition  =>  TRUE
[17:16:04.002]      // while "1"  (timeout="50000")
[17:16:04.002]      // while-condition  =>  TRUE
[17:16:04.003]      // while "1"  (timeout="50000")
[17:16:04.003]      // while-condition  =>  TRUE
[17:16:04.003]      // while "1"  (timeout="50000")
[17:16:04.003]      // while-condition  =>  TRUE
[17:16:04.004]      // while "1"  (timeout="50000")
[17:16:04.004]      // while-condition  =>  TRUE
[17:16:04.004]      // while "1"  (timeout="50000")
[17:16:04.004]      // while-condition  =>  TRUE
[17:16:04.004]      // while "1"  (timeout="50000")
[17:16:04.005]      // while-condition  =>  TRUE
[17:16:04.005]      // while "1"  (timeout="50000")
[17:16:04.005]      // while  =>  TIMEOUT
[17:16:04.005]      // end while "1"
[17:16:04.005]    </control>
[17:16:04.006]    <block atomic="false" info="">
[17:16:04.006]      DAP_SWJ_Pins(nReset, nReset, 0);
[17:16:04.017]        // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0xFF]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=1, TDO=1, nTRST=1, nRESET=1)
[17:16:04.021]    </block>
[17:16:04.021]    <control if="" while="1" timeout="10000" info="">
[17:16:04.022]      // while "1"  (timeout="10000")
[17:16:04.022]      // while-condition  =>  TRUE
[17:16:04.022]      // while "1"  (timeout="10000")
[17:16:04.023]      // while-condition  =>  TRUE
[17:16:04.023]      // while "1"  (timeout="10000")
[17:16:04.024]      // while-condition  =>  TRUE
[17:16:04.024]      // while "1"  (timeout="10000")
[17:16:04.024]      // while-condition  =>  TRUE
[17:16:04.024]      // while "1"  (timeout="10000")
[17:16:04.025]      // while-condition  =>  TRUE
[17:16:04.025]      // while "1"  (timeout="10000")
[17:16:04.025]      // while-condition  =>  TRUE
[17:16:04.025]      // while "1"  (timeout="10000")
[17:16:04.026]      // while-condition  =>  TRUE
[17:16:04.026]      // while "1"  (timeout="10000")
[17:16:04.026]      // while-condition  =>  TRUE
[17:16:04.027]      // while "1"  (timeout="10000")
[17:16:04.027]      // while-condition  =>  TRUE
[17:16:04.027]      // while "1"  (timeout="10000")
[17:16:04.027]      // while-condition  =>  TRUE
[17:16:04.028]      // while "1"  (timeout="10000")
[17:16:04.028]      // while-condition  =>  TRUE
[17:16:04.028]      // while "1"  (timeout="10000")
[17:16:04.028]      // while-condition  =>  TRUE
[17:16:04.029]      // while "1"  (timeout="10000")
[17:16:04.029]      // while-condition  =>  TRUE
[17:16:04.029]      // while "1"  (timeout="10000")
[17:16:04.029]      // while-condition  =>  TRUE
[17:16:04.030]      // while "1"  (timeout="10000")
[17:16:04.030]      // while-condition  =>  TRUE
[17:16:04.030]      // while "1"  (timeout="10000")
[17:16:04.030]      // while-condition  =>  TRUE
[17:16:04.031]      // while "1"  (timeout="10000")
[17:16:04.032]      // while-condition  =>  TRUE
[17:16:04.032]      // while "1"  (timeout="10000")
[17:16:04.032]      // while-condition  =>  TRUE
[17:16:04.032]      // while "1"  (timeout="10000")
[17:16:04.033]      // while-condition  =>  TRUE
[17:16:04.033]      // while "1"  (timeout="10000")
[17:16:04.033]      // while-condition  =>  TRUE
[17:16:04.034]      // while "1"  (timeout="10000")
[17:16:04.034]      // while-condition  =>  TRUE
[17:16:04.034]      // while "1"  (timeout="10000")
[17:16:04.034]      // while-condition  =>  TRUE
[17:16:04.035]      // while "1"  (timeout="10000")
[17:16:04.035]      // while-condition  =>  TRUE
[17:16:04.035]      // while "1"  (timeout="10000")
[17:16:04.035]      // while-condition  =>  TRUE
[17:16:04.036]      // while "1"  (timeout="10000")
[17:16:04.036]      // while-condition  =>  TRUE
[17:16:04.036]      // while "1"  (timeout="10000")
[17:16:04.036]      // while-condition  =>  TRUE
[17:16:04.036]      // while "1"  (timeout="10000")
[17:16:04.036]      // while  =>  TIMEOUT
[17:16:04.036]      // end while "1"
[17:16:04.037]    </control>
[17:16:04.037]    <block atomic="true" info="">
[17:16:04.037]      // ATOMIC SEQUENCE - EXECUTE
[17:16:04.039]      DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  // 50 cycles SWDIO/TMS High
[17:16:04.039]        // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:16:04.039]      DAP_SWJ_Sequence(3,  0x00);                // At least 3 idle cycles (SWDIO/TMS Low)
[17:16:04.039]        // -> [DAP_SWJ_Sequence(3, 0x0000000000000000)]
[17:16:04.040]      // ATOMIC SEQUENCE - DONE
[17:16:04.040]    </block>
[17:16:04.040]    <block atomic="false" info="">
[17:16:04.041]      __errorcontrol = 0x00000001;
[17:16:04.041]        // -> [__errorcontrol <= 0x00000001]  (Skip Errors="True")
[17:16:04.041]      ReadDP(0x0);
[17:16:04.043]        // -> [ReadDP(0x00000000) => 0x0BC11477]   (__dp=0x00000000)
[17:16:04.043]      __errorcontrol = 0x00000000;
[17:16:04.043]        // -> [__errorcontrol <= 0x00000000]  (Skip Errors="False")
[17:16:04.043]    </block>
[17:16:04.044]  </sequence>
[17:16:04.044]  
[17:16:04.044]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:16:04.044]  
[17:16:04.044]  <debugvars>
[17:16:04.045]    // Pre-defined
[17:16:04.045]    __protocol=0x00000002      (Protocol="SWD", SWJ-DP="False")
[17:16:04.045]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:16:04.045]    __dp=0x00000000
[17:16:04.046]    __ap=0x00000000
[17:16:04.046]    __traceout=0x00000000      (Trace Disabled)
[17:16:04.046]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:16:04.046]    __FlashAddr=0x00000000
[17:16:04.047]    __FlashLen=0x00000000
[17:16:04.047]    __FlashArg=0x00000000
[17:16:04.047]    __FlashOp=0x00000000
[17:16:04.048]    __Result=0x00000000
[17:16:04.048]  </debugvars>
[17:16:04.048]  
[17:16:04.048]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:16:04.049]  </sequence>
[17:16:04.049]  
[17:16:04.051]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:16:04.051]  
[17:16:04.051]  <debugvars>
[17:16:04.051]    // Pre-defined
[17:16:04.051]    __protocol=0x00000002      (Protocol="SWD", SWJ-DP="False")
[17:16:04.052]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:16:04.052]    __dp=0x00000000
[17:16:04.052]    __ap=0x00000000
[17:16:04.052]    __traceout=0x00000000      (Trace Disabled)
[17:16:04.053]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:16:04.053]    __FlashAddr=0x00000000
[17:16:04.053]    __FlashLen=0x00000000
[17:16:04.054]    __FlashArg=0x00000000
[17:16:04.054]    __FlashOp=0x00000000
[17:16:04.054]    __Result=0x00000000
[17:16:04.055]  </debugvars>
[17:16:04.055]  
[17:16:04.055]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:16:04.056]    <block atomic="false" info="">
[17:16:04.056]      __var SW_DP_ABORT  = 0x0;
[17:16:04.056]        // -> [SW_DP_ABORT <= 0x00000000]
[17:16:04.057]      __var DP_CTRL_STAT = 0x4;
[17:16:04.057]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:16:04.057]      __var DP_SELECT    = 0x8;
[17:16:04.058]        // -> [DP_SELECT <= 0x00000008]
[17:16:04.058]      __var powered_down = 0;
[17:16:04.059]        // -> [powered_down <= 0x00000000]
[17:16:04.059]      WriteDP(DP_SELECT, 0x00000000);
[17:16:04.061]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:16:04.061]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:16:04.063]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:16:04.063]        // -> [powered_down <= 0x00000001]
[17:16:04.064]    </block>
[17:16:04.064]    <control if="powered_down" while="" timeout="0" info="">
[17:16:04.064]      // if-block "powered_down"
[17:16:04.065]        // =>  TRUE
[17:16:04.065]      <block atomic="false" info="">
[17:16:04.065]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:16:04.066]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:16:04.067]      </block>
[17:16:04.067]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:16:04.067]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:16:04.068]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:16:04.069]        // while-condition  =>  FALSE
[17:16:04.069]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:16:04.069]      </control>
[17:16:04.069]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:16:04.070]        // if-block "(__protocol & 0xFFFF) == 1"
[17:16:04.070]          // =>  FALSE
[17:16:04.070]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:16:04.071]      </control>
[17:16:04.071]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:16:04.071]        // if-block "(__protocol & 0xFFFF) == 2"
[17:16:04.072]          // =>  TRUE
[17:16:04.073]        <block atomic="false" info="">
[17:16:04.073]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:16:04.074]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:16:04.075]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:16:04.076]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:16:04.077]        </block>
[17:16:04.077]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:16:04.077]      </control>
[17:16:04.078]      // end if-block "powered_down"
[17:16:04.078]    </control>
[17:16:04.078]  </sequence>
[17:16:04.079]  
[17:16:04.130]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[17:16:04.130]  
[17:16:04.130]  <debugvars>
[17:16:04.131]    // Pre-defined
[17:16:04.131]    __protocol=0x00000002      (Protocol="SWD", SWJ-DP="False")
[17:16:04.131]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:16:04.131]    __dp=0x00000000
[17:16:04.132]    __ap=0x00000000
[17:16:04.132]    __traceout=0x00000000      (Trace Disabled)
[17:16:04.132]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:16:04.133]    __FlashAddr=0x00000000
[17:16:04.133]    __FlashLen=0x00000000
[17:16:04.133]    __FlashArg=0x00000000
[17:16:04.134]    __FlashOp=0x00000000
[17:16:04.134]    __Result=0x00000000
[17:16:04.134]  </debugvars>
[17:16:04.135]  
[17:16:04.135]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[17:16:04.135]    <block atomic="true" info="">
[17:16:04.136]      // ATOMIC SEQUENCE - EXECUTE
[17:16:04.138]      __var DP_R_IDCODE    = 0x0;
[17:16:04.138]        // -> [DP_R_IDCODE <= 0x00000000]
[17:16:04.138]      __var DP_W_ABORT    = 0x0;
[17:16:04.139]        // -> [DP_W_ABORT <= 0x00000000]
[17:16:04.139]      __var DP_CTRLSTAT = 0x4;
[17:16:04.139]        // -> [DP_CTRLSTAT <= 0x00000004]
[17:16:04.140]      __var DP_W_SELECT    = 0x8;
[17:16:04.140]        // -> [DP_W_SELECT <= 0x00000008]
[17:16:04.140]      __var AP_TAR		= 0x4;
[17:16:04.141]        // -> [AP_TAR <= 0x00000004]
[17:16:04.141]      __var AP_BD0		= 0x0;
[17:16:04.141]        // -> [AP_BD0 <= 0x00000000]
[17:16:04.141]      __var AP_BD1		= 0x4;
[17:16:04.142]        // -> [AP_BD1 <= 0x00000004]
[17:16:04.142]      __var AP_BD2		= 0x8;
[17:16:04.142]        // -> [AP_BD2 <= 0x00000008]
[17:16:04.143]      __var PCWithinFlash = 0;
[17:16:04.143]        // -> [PCWithinFlash <= 0x00000000]
[17:16:04.143]      Write32(0xE000EDF0, 0xA05F0003);	// Halt the CORE
[17:16:04.143]        // -> [Write32(0xE000EDF0, 0xA05F0003)]   (__dp=0x00000000, __ap=0x00000000)
[17:16:04.143]      // ATOMIC SEQUENCE - DONE
[17:16:04.144]    </block>
[17:16:04.144]    <control if="" while="(Read32(0xE000EDF0) & 0x00020000) != 0x00020000" timeout="1000000" info="">
[17:16:04.144]      // while "(Read32(0xE000EDF0) & 0x00020000) != 0x00020000"  (timeout="1000000")
[17:16:04.147]        // -> [Read32(0xE000EDF0) => 0x03030003]   (__dp=0x00000000, __ap=0x00000000)
[17:16:04.147]      // while-condition  =>  FALSE
[17:16:04.148]      // end while "(Read32(0xE000EDF0) & 0x00020000) != 0x00020000"
[17:16:04.148]    </control>
[17:16:04.148]    <block atomic="true" info="">
[17:16:04.148]      // ATOMIC SEQUENCE - EXECUTE
[17:16:04.150]      WriteDP(DP_W_SELECT, 0x00000000);	//Select 0x00
[17:16:04.150]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:16:04.151]      WriteAP(AP_TAR, 0xE000EDF0);		//Set TAR to DHCSR
[17:16:04.151]        // -> [WriteAP(0x00000004, 0xE000EDF0)]   (__dp=0x00000000, __ap=0x00000000)
[17:16:04.151]      WriteDP(DP_W_SELECT, 0x00000010);	//Select 0x10
[17:16:04.151]        // -> [WriteDP(0x00000008, 0x00000010)]   (__dp=0x00000000)
[17:16:04.152]      WriteAP(AP_BD1, 0x0000000F);		//Trigger read of PC
[17:16:04.152]        // -> [WriteAP(0x00000004, 0x0000000F)]   (__dp=0x00000000, __ap=0x00000000)
[17:16:04.152]      // ATOMIC SEQUENCE - DONE
[17:16:04.152]    </block>
[17:16:04.153]    <control if="" while="(ReadAP(AP_BD0) & 0x00010000) != 0x00010000" timeout="100000" info="">
[17:16:04.153]      // while "(ReadAP(AP_BD0) & 0x00010000) != 0x00010000"  (timeout="100000")
[17:16:04.154]        // -> [ReadAP(0x00000000) => 0x01030003]   (__dp=0x00000000, __ap=0x00000000)
[17:16:04.154]      // while-condition  =>  FALSE
[17:16:04.155]      // end while "(ReadAP(AP_BD0) & 0x00010000) != 0x00010000"
[17:16:04.155]    </control>
[17:16:04.155]    <block atomic="false" info="">
[17:16:04.155]      PCWithinFlash = (ReadAP(AP_BD2) >= 0x10000800);
[17:16:04.157]        // -> [ReadAP(0x00000008) => 0x10000820]   (__dp=0x00000000, __ap=0x00000000)
[17:16:04.157]        // -> [PCWithinFlash <= 0x00000001]
[17:16:04.158]      WriteDP(DP_W_SELECT, 0x00000000);	//Select 0x00
[17:16:04.159]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:16:04.159]    </block>
[17:16:04.160]    <control if="PCWithinFlash == 0" while="" timeout="0" info="">
[17:16:04.160]      // if-block "PCWithinFlash == 0"
[17:16:04.160]        // =>  FALSE
[17:16:04.160]      // skip if-block "PCWithinFlash == 0"
[17:16:04.160]    </control>
[17:16:04.161]  </sequence>
[17:16:04.161]  
[17:16:04.185]  **********  Sequence "ResetCatchSet"  (Context="Reset", Pname="", info="")
[17:16:04.185]  
[17:16:04.185]  <debugvars>
[17:16:04.186]    // Pre-defined
[17:16:04.186]    __protocol=0x00000002      (Protocol="SWD", SWJ-DP="False")
[17:16:04.186]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:16:04.187]    __dp=0x00000000
[17:16:04.187]    __ap=0x00000000
[17:16:04.188]    __traceout=0x00000000      (Trace Disabled)
[17:16:04.188]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:16:04.188]    __FlashAddr=0x00000000
[17:16:04.189]    __FlashLen=0x00000000
[17:16:04.189]    __FlashArg=0x00000000
[17:16:04.189]    __FlashOp=0x00000000
[17:16:04.190]    __Result=0x00000000
[17:16:04.190]  </debugvars>
[17:16:04.190]  
[17:16:04.191]  <sequence name="ResetCatchSet" Pname="" disable="false" info="">
[17:16:04.191]    <block atomic="false" info="">
[17:16:04.191]    </block>
[17:16:04.191]  </sequence>
[17:16:04.192]  
[17:16:04.193]  **********  Sequence "ResetHardware"  (Context="Reset", Pname="", info="")
[17:16:04.193]  
[17:16:04.194]  <debugvars>
[17:16:04.194]    // Pre-defined
[17:16:04.194]    __protocol=0x00000002      (Protocol="SWD", SWJ-DP="False")
[17:16:04.194]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:16:04.195]    __dp=0x00000000
[17:16:04.195]    __ap=0x00000000
[17:16:04.195]    __traceout=0x00000000      (Trace Disabled)
[17:16:04.196]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:16:04.196]    __FlashAddr=0x00000000
[17:16:04.196]    __FlashLen=0x00000000
[17:16:04.196]    __FlashArg=0x00000000
[17:16:04.197]    __FlashOp=0x00000000
[17:16:04.197]    __Result=0x00000000
[17:16:04.197]  </debugvars>
[17:16:04.197]  
[17:16:04.198]  <sequence name="ResetHardware" Pname="" disable="false" info="">
[17:16:04.198]    <block atomic="false" info="">
[17:16:04.198]      __var nReset      = 0x80;
[17:16:04.198]        // -> [nReset <= 0x00000080]
[17:16:04.199]      DAP_SWJ_Pins(0x00, nReset, 0);
[17:16:04.200]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0xFF]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=1, TDO=1, nTRST=1, nRESET=1)
[17:16:04.201]    </block>
[17:16:04.201]    <control if="" while="1" timeout="50000" info="">
[17:16:04.201]      // while "1"  (timeout="50000")
[17:16:04.201]      // while-condition  =>  TRUE
[17:16:04.202]      // while "1"  (timeout="50000")
[17:16:04.202]      // while-condition  =>  TRUE
[17:16:04.202]      // while "1"  (timeout="50000")
[17:16:04.202]      // while-condition  =>  TRUE
[17:16:04.203]      // while "1"  (timeout="50000")
[17:16:04.203]      // while-condition  =>  TRUE
[17:16:04.203]      // while "1"  (timeout="50000")
[17:16:04.204]      // while-condition  =>  TRUE
[17:16:04.204]      // while "1"  (timeout="50000")
[17:16:04.204]      // while-condition  =>  TRUE
[17:16:04.204]      // while "1"  (timeout="50000")
[17:16:04.205]      // while-condition  =>  TRUE
[17:16:04.205]      // while "1"  (timeout="50000")
[17:16:04.205]      // while-condition  =>  TRUE
[17:16:04.205]      // while "1"  (timeout="50000")
[17:16:04.206]      // while-condition  =>  TRUE
[17:16:04.206]      // while "1"  (timeout="50000")
[17:16:04.206]      // while-condition  =>  TRUE
[17:16:04.206]      // while "1"  (timeout="50000")
[17:16:04.206]      // while-condition  =>  TRUE
[17:16:04.207]      // while "1"  (timeout="50000")
[17:16:04.207]      // while-condition  =>  TRUE
[17:16:04.207]      // while "1"  (timeout="50000")
[17:16:04.207]      // while-condition  =>  TRUE
[17:16:04.207]      // while "1"  (timeout="50000")
[17:16:04.208]      // while-condition  =>  TRUE
[17:16:04.208]      // while "1"  (timeout="50000")
[17:16:04.208]      // while-condition  =>  TRUE
[17:16:04.208]      // while "1"  (timeout="50000")
[17:16:04.209]      // while-condition  =>  TRUE
[17:16:04.209]      // while "1"  (timeout="50000")
[17:16:04.209]      // while-condition  =>  TRUE
[17:16:04.209]      // while "1"  (timeout="50000")
[17:16:04.210]      // while-condition  =>  TRUE
[17:16:04.210]      // while "1"  (timeout="50000")
[17:16:04.210]      // while-condition  =>  TRUE
[17:16:04.210]      // while "1"  (timeout="50000")
[17:16:04.211]      // while-condition  =>  TRUE
[17:16:04.211]      // while "1"  (timeout="50000")
[17:16:04.211]      // while-condition  =>  TRUE
[17:16:04.211]      // while "1"  (timeout="50000")
[17:16:04.212]      // while-condition  =>  TRUE
[17:16:04.212]      // while "1"  (timeout="50000")
[17:16:04.212]      // while-condition  =>  TRUE
[17:16:04.212]      // while "1"  (timeout="50000")
[17:16:04.213]      // while-condition  =>  TRUE
[17:16:04.213]      // while "1"  (timeout="50000")
[17:16:04.213]      // while-condition  =>  TRUE
[17:16:04.213]      // while "1"  (timeout="50000")
[17:16:04.214]      // while-condition  =>  TRUE
[17:16:04.214]      // while "1"  (timeout="50000")
[17:16:04.214]      // while-condition  =>  TRUE
[17:16:04.214]      // while "1"  (timeout="50000")
[17:16:04.214]      // while-condition  =>  TRUE
[17:16:04.215]      // while "1"  (timeout="50000")
[17:16:04.215]      // while-condition  =>  TRUE
[17:16:04.215]      // while "1"  (timeout="50000")
[17:16:04.215]      // while-condition  =>  TRUE
[17:16:04.215]      // while "1"  (timeout="50000")
[17:16:04.216]      // while-condition  =>  TRUE
[17:16:04.216]      // while "1"  (timeout="50000")
[17:16:04.216]      // while-condition  =>  TRUE
[17:16:04.216]      // while "1"  (timeout="50000")
[17:16:04.216]      // while-condition  =>  TRUE
[17:16:04.217]      // while "1"  (timeout="50000")
[17:16:04.217]      // while-condition  =>  TRUE
[17:16:04.217]      // while "1"  (timeout="50000")
[17:16:04.217]      // while-condition  =>  TRUE
[17:16:04.217]      // while "1"  (timeout="50000")
[17:16:04.218]      // while-condition  =>  TRUE
[17:16:04.218]      // while "1"  (timeout="50000")
[17:16:04.218]      // while-condition  =>  TRUE
[17:16:04.218]      // while "1"  (timeout="50000")
[17:16:04.218]      // while-condition  =>  TRUE
[17:16:04.219]      // while "1"  (timeout="50000")
[17:16:04.219]      // while-condition  =>  TRUE
[17:16:04.219]      // while "1"  (timeout="50000")
[17:16:04.219]      // while-condition  =>  TRUE
[17:16:04.219]      // while "1"  (timeout="50000")
[17:16:04.220]      // while-condition  =>  TRUE
[17:16:04.220]      // while "1"  (timeout="50000")
[17:16:04.220]      // while-condition  =>  TRUE
[17:16:04.220]      // while "1"  (timeout="50000")
[17:16:04.220]      // while-condition  =>  TRUE
[17:16:04.221]      // while "1"  (timeout="50000")
[17:16:04.221]      // while-condition  =>  TRUE
[17:16:04.221]      // while "1"  (timeout="50000")
[17:16:04.221]      // while-condition  =>  TRUE
[17:16:04.221]      // while "1"  (timeout="50000")
[17:16:04.222]      // while-condition  =>  TRUE
[17:16:04.222]      // while "1"  (timeout="50000")
[17:16:04.222]      // while-condition  =>  TRUE
[17:16:04.222]      // while "1"  (timeout="50000")
[17:16:04.222]      // while-condition  =>  TRUE
[17:16:04.223]      // while "1"  (timeout="50000")
[17:16:04.223]      // while-condition  =>  TRUE
[17:16:04.223]      // while "1"  (timeout="50000")
[17:16:04.223]      // while-condition  =>  TRUE
[17:16:04.223]      // while "1"  (timeout="50000")
[17:16:04.224]      // while-condition  =>  TRUE
[17:16:04.224]      // while "1"  (timeout="50000")
[17:16:04.224]      // while-condition  =>  TRUE
[17:16:04.224]      // while "1"  (timeout="50000")
[17:16:04.225]      // while-condition  =>  TRUE
[17:16:04.225]      // while "1"  (timeout="50000")
[17:16:04.225]      // while-condition  =>  TRUE
[17:16:04.225]      // while "1"  (timeout="50000")
[17:16:04.226]      // while-condition  =>  TRUE
[17:16:04.226]      // while "1"  (timeout="50000")
[17:16:04.226]      // while-condition  =>  TRUE
[17:16:04.226]      // while "1"  (timeout="50000")
[17:16:04.227]      // while-condition  =>  TRUE
[17:16:04.227]      // while "1"  (timeout="50000")
[17:16:04.227]      // while-condition  =>  TRUE
[17:16:04.227]      // while "1"  (timeout="50000")
[17:16:04.227]      // while-condition  =>  TRUE
[17:16:04.228]      // while "1"  (timeout="50000")
[17:16:04.228]      // while-condition  =>  TRUE
[17:16:04.228]      // while "1"  (timeout="50000")
[17:16:04.228]      // while-condition  =>  TRUE
[17:16:04.229]      // while "1"  (timeout="50000")
[17:16:04.229]      // while-condition  =>  TRUE
[17:16:04.229]      // while "1"  (timeout="50000")
[17:16:04.229]      // while-condition  =>  TRUE
[17:16:04.230]      // while "1"  (timeout="50000")
[17:16:04.230]      // while-condition  =>  TRUE
[17:16:04.230]      // while "1"  (timeout="50000")
[17:16:04.230]      // while-condition  =>  TRUE
[17:16:04.230]      // while "1"  (timeout="50000")
[17:16:04.231]      // while-condition  =>  TRUE
[17:16:04.231]      // while "1"  (timeout="50000")
[17:16:04.231]      // while-condition  =>  TRUE
[17:16:04.231]      // while "1"  (timeout="50000")
[17:16:04.232]      // while-condition  =>  TRUE
[17:16:04.232]      // while "1"  (timeout="50000")
[17:16:04.232]      // while-condition  =>  TRUE
[17:16:04.232]      // while "1"  (timeout="50000")
[17:16:04.232]      // while-condition  =>  TRUE
[17:16:04.233]      // while "1"  (timeout="50000")
[17:16:04.233]      // while-condition  =>  TRUE
[17:16:04.233]      // while "1"  (timeout="50000")
[17:16:04.233]      // while-condition  =>  TRUE
[17:16:04.234]      // while "1"  (timeout="50000")
[17:16:04.234]      // while-condition  =>  TRUE
[17:16:04.234]      // while "1"  (timeout="50000")
[17:16:04.234]      // while-condition  =>  TRUE
[17:16:04.235]      // while "1"  (timeout="50000")
[17:16:04.235]      // while-condition  =>  TRUE
[17:16:04.235]      // while "1"  (timeout="50000")
[17:16:04.235]      // while-condition  =>  TRUE
[17:16:04.235]      // while "1"  (timeout="50000")
[17:16:04.236]      // while-condition  =>  TRUE
[17:16:04.236]      // while "1"  (timeout="50000")
[17:16:04.236]      // while-condition  =>  TRUE
[17:16:04.236]      // while "1"  (timeout="50000")
[17:16:04.237]      // while-condition  =>  TRUE
[17:16:04.237]      // while "1"  (timeout="50000")
[17:16:04.237]      // while-condition  =>  TRUE
[17:16:04.237]      // while "1"  (timeout="50000")
[17:16:04.238]      // while-condition  =>  TRUE
[17:16:04.238]      // while "1"  (timeout="50000")
[17:16:04.238]      // while-condition  =>  TRUE
[17:16:04.238]      // while "1"  (timeout="50000")
[17:16:04.238]      // while-condition  =>  TRUE
[17:16:04.238]      // while "1"  (timeout="50000")
[17:16:04.238]      // while-condition  =>  TRUE
[17:16:04.238]      // while "1"  (timeout="50000")
[17:16:04.238]      // while-condition  =>  TRUE
[17:16:04.239]      // while "1"  (timeout="50000")
[17:16:04.239]      // while-condition  =>  TRUE
[17:16:04.239]      // while "1"  (timeout="50000")
[17:16:04.239]      // while-condition  =>  TRUE
[17:16:04.240]      // while "1"  (timeout="50000")
[17:16:04.240]      // while-condition  =>  TRUE
[17:16:04.241]      // while "1"  (timeout="50000")
[17:16:04.241]      // while-condition  =>  TRUE
[17:16:04.241]      // while "1"  (timeout="50000")
[17:16:04.241]      // while-condition  =>  TRUE
[17:16:04.242]      // while "1"  (timeout="50000")
[17:16:04.242]      // while-condition  =>  TRUE
[17:16:04.242]      // while "1"  (timeout="50000")
[17:16:04.242]      // while-condition  =>  TRUE
[17:16:04.243]      // while "1"  (timeout="50000")
[17:16:04.243]      // while-condition  =>  TRUE
[17:16:04.243]      // while "1"  (timeout="50000")
[17:16:04.243]      // while-condition  =>  TRUE
[17:16:04.243]      // while "1"  (timeout="50000")
[17:16:04.244]      // while-condition  =>  TRUE
[17:16:04.244]      // while "1"  (timeout="50000")
[17:16:04.244]      // while-condition  =>  TRUE
[17:16:04.245]      // while "1"  (timeout="50000")
[17:16:04.245]      // while-condition  =>  TRUE
[17:16:04.245]      // while "1"  (timeout="50000")
[17:16:04.245]      // while-condition  =>  TRUE
[17:16:04.246]      // while "1"  (timeout="50000")
[17:16:04.246]      // while-condition  =>  TRUE
[17:16:04.246]      // while "1"  (timeout="50000")
[17:16:04.246]      // while-condition  =>  TRUE
[17:16:04.247]      // while "1"  (timeout="50000")
[17:16:04.247]      // while-condition  =>  TRUE
[17:16:04.247]      // while "1"  (timeout="50000")
[17:16:04.247]      // while-condition  =>  TRUE
[17:16:04.248]      // while "1"  (timeout="50000")
[17:16:04.248]      // while-condition  =>  TRUE
[17:16:04.248]      // while "1"  (timeout="50000")
[17:16:04.249]      // while-condition  =>  TRUE
[17:16:04.249]      // while "1"  (timeout="50000")
[17:16:04.249]      // while-condition  =>  TRUE
[17:16:04.249]      // while "1"  (timeout="50000")
[17:16:04.250]      // while-condition  =>  TRUE
[17:16:04.251]      // while "1"  (timeout="50000")
[17:16:04.251]      // while-condition  =>  TRUE
[17:16:04.251]      // while "1"  (timeout="50000")
[17:16:04.251]      // while-condition  =>  TRUE
[17:16:04.252]      // while "1"  (timeout="50000")
[17:16:04.252]      // while-condition  =>  TRUE
[17:16:04.252]      // while "1"  (timeout="50000")
[17:16:04.252]      // while-condition  =>  TRUE
[17:16:04.253]      // while "1"  (timeout="50000")
[17:16:04.253]      // while-condition  =>  TRUE
[17:16:04.253]      // while "1"  (timeout="50000")
[17:16:04.253]      // while-condition  =>  TRUE
[17:16:04.254]      // while "1"  (timeout="50000")
[17:16:04.254]      // while-condition  =>  TRUE
[17:16:04.254]      // while "1"  (timeout="50000")
[17:16:04.255]      // while-condition  =>  TRUE
[17:16:04.255]      // while "1"  (timeout="50000")
[17:16:04.255]      // while  =>  TIMEOUT
[17:16:04.255]      // end while "1"
[17:16:04.255]    </control>
[17:16:04.256]    <block atomic="false" info="">
[17:16:04.256]      DAP_SWJ_Pins(nReset, nReset, 0);
[17:16:04.268]        // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0xFF]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=1, TDO=1, nTRST=1, nRESET=1)
[17:16:04.268]    </block>
[17:16:04.273]    <control if="" while="1" timeout="10000" info="">
[17:16:04.273]      // while "1"  (timeout="10000")
[17:16:04.273]      // while-condition  =>  TRUE
[17:16:04.274]      // while "1"  (timeout="10000")
[17:16:04.274]      // while-condition  =>  TRUE
[17:16:04.275]      // while "1"  (timeout="10000")
[17:16:04.275]      // while-condition  =>  TRUE
[17:16:04.276]      // while "1"  (timeout="10000")
[17:16:04.276]      // while-condition  =>  TRUE
[17:16:04.277]      // while "1"  (timeout="10000")
[17:16:04.277]      // while-condition  =>  TRUE
[17:16:04.277]      // while "1"  (timeout="10000")
[17:16:04.278]      // while-condition  =>  TRUE
[17:16:04.278]      // while "1"  (timeout="10000")
[17:16:04.278]      // while-condition  =>  TRUE
[17:16:04.279]      // while "1"  (timeout="10000")
[17:16:04.279]      // while-condition  =>  TRUE
[17:16:04.279]      // while "1"  (timeout="10000")
[17:16:04.280]      // while-condition  =>  TRUE
[17:16:04.280]      // while "1"  (timeout="10000")
[17:16:04.280]      // while-condition  =>  TRUE
[17:16:04.281]      // while "1"  (timeout="10000")
[17:16:04.281]      // while-condition  =>  TRUE
[17:16:04.281]      // while "1"  (timeout="10000")
[17:16:04.282]      // while-condition  =>  TRUE
[17:16:04.282]      // while "1"  (timeout="10000")
[17:16:04.282]      // while-condition  =>  TRUE
[17:16:04.283]      // while "1"  (timeout="10000")
[17:16:04.283]      // while-condition  =>  TRUE
[17:16:04.283]      // while "1"  (timeout="10000")
[17:16:04.283]      // while-condition  =>  TRUE
[17:16:04.284]      // while "1"  (timeout="10000")
[17:16:04.284]      // while-condition  =>  TRUE
[17:16:04.284]      // while "1"  (timeout="10000")
[17:16:04.285]      // while-condition  =>  TRUE
[17:16:04.285]      // while "1"  (timeout="10000")
[17:16:04.285]      // while-condition  =>  TRUE
[17:16:04.286]      // while "1"  (timeout="10000")
[17:16:04.286]      // while  =>  TIMEOUT
[17:16:04.286]      // end while "1"
[17:16:04.286]    </control>
[17:16:04.287]    <block atomic="true" info="">
[17:16:04.287]      // ATOMIC SEQUENCE - EXECUTE
[17:16:04.289]      DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  // 50 cycles SWDIO/TMS High
[17:16:04.289]        // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:16:04.289]      DAP_SWJ_Sequence(3,  0x00);                // At least 3 idle cycles (SWDIO/TMS Low)
[17:16:04.289]        // -> [DAP_SWJ_Sequence(3, 0x0000000000000000)]
[17:16:04.290]      // ATOMIC SEQUENCE - DONE
[17:16:04.290]    </block>
[17:16:04.290]    <block atomic="false" info="">
[17:16:04.291]      __errorcontrol = 0x00000001;
[17:16:04.291]        // -> [__errorcontrol <= 0x00000001]  (Skip Errors="True")
[17:16:04.291]      ReadDP(0x0);
[17:16:04.293]        // -> [ReadDP(0x00000000) => 0x0BC11477]   (__dp=0x00000000)
[17:16:04.293]      __errorcontrol = 0x00000000;
[17:16:04.293]        // -> [__errorcontrol <= 0x00000000]  (Skip Errors="False")
[17:16:04.293]    </block>
[17:16:04.293]  </sequence>
[17:16:04.294]  
[17:16:04.299]  **********  Sequence "DebugPortStart"  (Context="Reset", Pname="", info="")
[17:16:04.299]  
[17:16:04.299]  <debugvars>
[17:16:04.299]    // Pre-defined
[17:16:04.300]    __protocol=0x00000002      (Protocol="SWD", SWJ-DP="False")
[17:16:04.300]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:16:04.300]    __dp=0x00000000
[17:16:04.301]    __ap=0x00000000
[17:16:04.301]    __traceout=0x00000000      (Trace Disabled)
[17:16:04.302]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:16:04.302]    __FlashAddr=0x00000000
[17:16:04.302]    __FlashLen=0x00000000
[17:16:04.303]    __FlashArg=0x00000000
[17:16:04.303]    __FlashOp=0x00000000
[17:16:04.303]    __Result=0x00000000
[17:16:04.304]  </debugvars>
[17:16:04.304]  
[17:16:04.304]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:16:04.305]    <block atomic="false" info="">
[17:16:04.305]      __var SW_DP_ABORT  = 0x0;
[17:16:04.305]        // -> [SW_DP_ABORT <= 0x00000000]
[17:16:04.305]      __var DP_CTRL_STAT = 0x4;
[17:16:04.306]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:16:04.306]      __var DP_SELECT    = 0x8;
[17:16:04.306]        // -> [DP_SELECT <= 0x00000008]
[17:16:04.306]      __var powered_down = 0;
[17:16:04.307]        // -> [powered_down <= 0x00000000]
[17:16:04.307]      WriteDP(DP_SELECT, 0x00000000);
[17:16:04.309]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:16:04.309]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:16:04.310]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:16:04.310]        // -> [powered_down <= 0x00000001]
[17:16:04.310]    </block>
[17:16:04.310]    <control if="powered_down" while="" timeout="0" info="">
[17:16:04.311]      // if-block "powered_down"
[17:16:04.311]        // =>  TRUE
[17:16:04.311]      <block atomic="false" info="">
[17:16:04.311]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:16:04.313]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:16:04.313]      </block>
[17:16:04.313]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:16:04.313]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:16:04.315]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:16:04.315]        // while-condition  =>  FALSE
[17:16:04.315]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:16:04.316]      </control>
[17:16:04.316]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:16:04.316]        // if-block "(__protocol & 0xFFFF) == 1"
[17:16:04.317]          // =>  FALSE
[17:16:04.317]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:16:04.317]      </control>
[17:16:04.317]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:16:04.318]        // if-block "(__protocol & 0xFFFF) == 2"
[17:16:04.318]          // =>  TRUE
[17:16:04.318]        <block atomic="false" info="">
[17:16:04.318]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:16:04.320]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:16:04.320]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:16:04.322]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:16:04.322]        </block>
[17:16:04.322]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:16:04.323]      </control>
[17:16:04.323]      // end if-block "powered_down"
[17:16:04.323]    </control>
[17:16:04.323]  </sequence>
[17:16:04.323]  
[17:16:04.329]  **********  Sequence "DebugCoreStart"  (Context="Reset", Pname="", info="")
[17:16:04.329]  
[17:16:04.329]  <debugvars>
[17:16:04.330]    // Pre-defined
[17:16:04.330]    __protocol=0x00000002      (Protocol="SWD", SWJ-DP="False")
[17:16:04.330]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:16:04.330]    __dp=0x00000000
[17:16:04.331]    __ap=0x00000000
[17:16:04.331]    __traceout=0x00000000      (Trace Disabled)
[17:16:04.331]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:16:04.331]    __FlashAddr=0x00000000
[17:16:04.331]    __FlashLen=0x00000000
[17:16:04.332]    __FlashArg=0x00000000
[17:16:04.332]    __FlashOp=0x00000000
[17:16:04.332]    __Result=0x00000000
[17:16:04.332]  </debugvars>
[17:16:04.332]  
[17:16:04.333]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[17:16:04.333]    <block atomic="true" info="">
[17:16:04.333]      // ATOMIC SEQUENCE - EXECUTE
[17:16:04.335]      __var DP_R_IDCODE    = 0x0;
[17:16:04.335]        // -> [DP_R_IDCODE <= 0x00000000]
[17:16:04.335]      __var DP_W_ABORT    = 0x0;
[17:16:04.335]        // -> [DP_W_ABORT <= 0x00000000]
[17:16:04.336]      __var DP_CTRLSTAT = 0x4;
[17:16:04.336]        // -> [DP_CTRLSTAT <= 0x00000004]
[17:16:04.336]      __var DP_W_SELECT    = 0x8;
[17:16:04.336]        // -> [DP_W_SELECT <= 0x00000008]
[17:16:04.337]      __var AP_TAR		= 0x4;
[17:16:04.337]        // -> [AP_TAR <= 0x00000004]
[17:16:04.337]      __var AP_BD0		= 0x0;
[17:16:04.337]        // -> [AP_BD0 <= 0x00000000]
[17:16:04.337]      __var AP_BD1		= 0x4;
[17:16:04.338]        // -> [AP_BD1 <= 0x00000004]
[17:16:04.338]      __var AP_BD2		= 0x8;
[17:16:04.338]        // -> [AP_BD2 <= 0x00000008]
[17:16:04.339]      __var PCWithinFlash = 0;
[17:16:04.339]        // -> [PCWithinFlash <= 0x00000000]
[17:16:04.339]      Write32(0xE000EDF0, 0xA05F0003);	// Halt the CORE
[17:16:04.339]        // -> [Write32(0xE000EDF0, 0xA05F0003)]   (__dp=0x00000000, __ap=0x00000000)
[17:16:04.340]      // ATOMIC SEQUENCE - DONE
[17:16:04.340]    </block>
[17:16:04.340]    <control if="" while="(Read32(0xE000EDF0) & 0x00020000) != 0x00020000" timeout="1000000" info="">
[17:16:04.341]      // while "(Read32(0xE000EDF0) & 0x00020000) != 0x00020000"  (timeout="1000000")
[17:16:04.344]        // -> [Read32(0xE000EDF0) => 0x01030003]   (__dp=0x00000000, __ap=0x00000000)
[17:16:04.344]      // while-condition  =>  FALSE
[17:16:04.344]      // end while "(Read32(0xE000EDF0) & 0x00020000) != 0x00020000"
[17:16:04.345]    </control>
[17:16:04.345]    <block atomic="true" info="">
[17:16:04.345]      // ATOMIC SEQUENCE - EXECUTE
[17:16:04.348]      WriteDP(DP_W_SELECT, 0x00000000);	//Select 0x00
[17:16:04.348]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:16:04.348]      WriteAP(AP_TAR, 0xE000EDF0);		//Set TAR to DHCSR
[17:16:04.349]        // -> [WriteAP(0x00000004, 0xE000EDF0)]   (__dp=0x00000000, __ap=0x00000000)
[17:16:04.349]      WriteDP(DP_W_SELECT, 0x00000010);	//Select 0x10
[17:16:04.349]        // -> [WriteDP(0x00000008, 0x00000010)]   (__dp=0x00000000)
[17:16:04.350]      WriteAP(AP_BD1, 0x0000000F);		//Trigger read of PC
[17:16:04.350]        // -> [WriteAP(0x00000004, 0x0000000F)]   (__dp=0x00000000, __ap=0x00000000)
[17:16:04.350]      // ATOMIC SEQUENCE - DONE
[17:16:04.351]    </block>
[17:16:04.351]    <control if="" while="(ReadAP(AP_BD0) & 0x00010000) != 0x00010000" timeout="100000" info="">
[17:16:04.351]      // while "(ReadAP(AP_BD0) & 0x00010000) != 0x00010000"  (timeout="100000")
[17:16:04.353]        // -> [ReadAP(0x00000000) => 0x01030003]   (__dp=0x00000000, __ap=0x00000000)
[17:16:04.353]      // while-condition  =>  FALSE
[17:16:04.353]      // end while "(ReadAP(AP_BD0) & 0x00010000) != 0x00010000"
[17:16:04.354]    </control>
[17:16:04.354]    <block atomic="false" info="">
[17:16:04.354]      PCWithinFlash = (ReadAP(AP_BD2) >= 0x10000800);
[17:16:04.356]        // -> [ReadAP(0x00000008) => 0x10000820]   (__dp=0x00000000, __ap=0x00000000)
[17:16:04.356]        // -> [PCWithinFlash <= 0x00000001]
[17:16:04.356]      WriteDP(DP_W_SELECT, 0x00000000);	//Select 0x00
[17:16:04.358]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:16:04.358]    </block>
[17:16:04.358]    <control if="PCWithinFlash == 0" while="" timeout="0" info="">
[17:16:04.359]      // if-block "PCWithinFlash == 0"
[17:16:04.359]        // =>  FALSE
[17:16:04.359]      // skip if-block "PCWithinFlash == 0"
[17:16:04.359]    </control>
[17:16:04.360]  </sequence>
[17:16:04.360]  
[17:16:04.380]  **********  Sequence "ResetCatchClear"  (Context="Reset", Pname="", info="")
[17:16:04.380]  
[17:16:04.381]  <debugvars>
[17:16:04.382]    // Pre-defined
[17:16:04.382]    __protocol=0x00000002      (Protocol="SWD", SWJ-DP="False")
[17:16:04.382]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:16:04.383]    __dp=0x00000000
[17:16:04.383]    __ap=0x00000000
[17:16:04.383]    __traceout=0x00000000      (Trace Disabled)
[17:16:04.384]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:16:04.384]    __FlashAddr=0x00000000
[17:16:04.384]    __FlashLen=0x00000000
[17:16:04.384]    __FlashArg=0x00000000
[17:16:04.385]    __FlashOp=0x00000000
[17:16:04.385]    __Result=0x00000000
[17:16:04.385]  </debugvars>
[17:16:04.385]  
[17:16:04.386]  <sequence name="ResetCatchClear" Pname="" disable="false" info="">
[17:16:04.386]    <block atomic="false" info="">
[17:16:04.386]    </block>
[17:16:04.386]  </sequence>
[17:16:04.387]  
[17:16:04.556]  **********  Sequence "FlashEraseDone"  (Context="Flash Erase", Pname="", info="")
[17:16:04.556]  
[17:16:04.556]  <debugvars>
[17:16:04.556]    // Pre-defined
[17:16:04.557]    __protocol=0x00000002      (Protocol="SWD", SWJ-DP="False")
[17:16:04.557]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:16:04.571]    __dp=0x00000000
[17:16:04.571]    __ap=0x00000000
[17:16:04.572]    __traceout=0x00000000      (Trace Disabled)
[17:16:04.572]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:16:04.572]    __FlashAddr=0x00000000
[17:16:04.573]    __FlashLen=0x00000000
[17:16:04.573]    __FlashArg=0x00000000
[17:16:04.574]    __FlashOp=0x00000000
[17:16:04.574]    __Result=0x00000000
[17:16:04.574]  </debugvars>
[17:16:04.575]  
[17:16:04.575]  <sequence name="FlashEraseDone" Pname="" disable="false" info="">
[17:16:04.576]    <block atomic="false" info="">
[17:16:04.576]      Sequence("ResetHardware");
[17:16:04.577]        <sequence name="ResetHardware" Pname="" disable="false" info="">
[17:16:04.577]          <block atomic="false" info="">
[17:16:04.578]            __var nReset      = 0x80;
[17:16:04.578]              // -> [nReset <= 0x00000080]
[17:16:04.578]            DAP_SWJ_Pins(0x00, nReset, 0);
[17:16:04.580]              // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0xFF]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=1, TDO=1, nTRST=1, nRESET=1)
[17:16:04.581]          </block>
[17:16:04.581]          <control if="" while="1" timeout="50000" info="">
[17:16:04.581]            // while "1"  (timeout="50000")
[17:16:04.581]            // while-condition  =>  TRUE
[17:16:04.582]            // while "1"  (timeout="50000")
[17:16:04.582]            // while-condition  =>  TRUE
[17:16:04.582]            // while "1"  (timeout="50000")
[17:16:04.583]            // while-condition  =>  TRUE
[17:16:04.583]            // while "1"  (timeout="50000")
[17:16:04.583]            // while-condition  =>  TRUE
[17:16:04.584]            // while "1"  (timeout="50000")
[17:16:04.584]            // while-condition  =>  TRUE
[17:16:04.584]            // while "1"  (timeout="50000")
[17:16:04.584]            // while-condition  =>  TRUE
[17:16:04.585]            // while "1"  (timeout="50000")
[17:16:04.585]            // while-condition  =>  TRUE
[17:16:04.585]            // while "1"  (timeout="50000")
[17:16:04.585]            // while-condition  =>  TRUE
[17:16:04.586]            // while "1"  (timeout="50000")
[17:16:04.586]            // while-condition  =>  TRUE
[17:16:04.586]            // while "1"  (timeout="50000")
[17:16:04.586]            // while-condition  =>  TRUE
[17:16:04.587]            // while "1"  (timeout="50000")
[17:16:04.587]            // while-condition  =>  TRUE
[17:16:04.587]            // while "1"  (timeout="50000")
[17:16:04.587]            // while-condition  =>  TRUE
[17:16:04.587]            // while "1"  (timeout="50000")
[17:16:04.588]            // while-condition  =>  TRUE
[17:16:04.588]            // while "1"  (timeout="50000")
[17:16:04.588]            // while-condition  =>  TRUE
[17:16:04.588]            // while "1"  (timeout="50000")
[17:16:04.589]            // while-condition  =>  TRUE
[17:16:04.589]            // while "1"  (timeout="50000")
[17:16:04.589]            // while-condition  =>  TRUE
[17:16:04.589]            // while "1"  (timeout="50000")
[17:16:04.589]            // while-condition  =>  TRUE
[17:16:04.590]            // while "1"  (timeout="50000")
[17:16:04.590]            // while-condition  =>  TRUE
[17:16:04.590]            // while "1"  (timeout="50000")
[17:16:04.590]            // while-condition  =>  TRUE
[17:16:04.590]            // while "1"  (timeout="50000")
[17:16:04.591]            // while-condition  =>  TRUE
[17:16:04.591]            // while "1"  (timeout="50000")
[17:16:04.591]            // while-condition  =>  TRUE
[17:16:04.591]            // while "1"  (timeout="50000")
[17:16:04.592]            // while-condition  =>  TRUE
[17:16:04.592]            // while "1"  (timeout="50000")
[17:16:04.592]            // while-condition  =>  TRUE
[17:16:04.593]            // while "1"  (timeout="50000")
[17:16:04.593]            // while-condition  =>  TRUE
[17:16:04.593]            // while "1"  (timeout="50000")
[17:16:04.593]            // while-condition  =>  TRUE
[17:16:04.594]            // while "1"  (timeout="50000")
[17:16:04.594]            // while-condition  =>  TRUE
[17:16:04.594]            // while "1"  (timeout="50000")
[17:16:04.594]            // while-condition  =>  TRUE
[17:16:04.595]            // while "1"  (timeout="50000")
[17:16:04.595]            // while-condition  =>  TRUE
[17:16:04.595]            // while "1"  (timeout="50000")
[17:16:04.595]            // while-condition  =>  TRUE
[17:16:04.595]            // while "1"  (timeout="50000")
[17:16:04.596]            // while-condition  =>  TRUE
[17:16:04.596]            // while "1"  (timeout="50000")
[17:16:04.596]            // while-condition  =>  TRUE
[17:16:04.596]            // while "1"  (timeout="50000")
[17:16:04.596]            // while-condition  =>  TRUE
[17:16:04.597]            // while "1"  (timeout="50000")
[17:16:04.597]            // while-condition  =>  TRUE
[17:16:04.597]            // while "1"  (timeout="50000")
[17:16:04.597]            // while-condition  =>  TRUE
[17:16:04.597]            // while "1"  (timeout="50000")
[17:16:04.598]            // while-condition  =>  TRUE
[17:16:04.598]            // while "1"  (timeout="50000")
[17:16:04.598]            // while-condition  =>  TRUE
[17:16:04.598]            // while "1"  (timeout="50000")
[17:16:04.598]            // while-condition  =>  TRUE
[17:16:04.599]            // while "1"  (timeout="50000")
[17:16:04.599]            // while-condition  =>  TRUE
[17:16:04.599]            // while "1"  (timeout="50000")
[17:16:04.599]            // while-condition  =>  TRUE
[17:16:04.600]            // while "1"  (timeout="50000")
[17:16:04.600]            // while-condition  =>  TRUE
[17:16:04.600]            // while "1"  (timeout="50000")
[17:16:04.600]            // while-condition  =>  TRUE
[17:16:04.600]            // while "1"  (timeout="50000")
[17:16:04.601]            // while-condition  =>  TRUE
[17:16:04.601]            // while "1"  (timeout="50000")
[17:16:04.601]            // while-condition  =>  TRUE
[17:16:04.601]            // while "1"  (timeout="50000")
[17:16:04.601]            // while-condition  =>  TRUE
[17:16:04.602]            // while "1"  (timeout="50000")
[17:16:04.602]            // while-condition  =>  TRUE
[17:16:04.602]            // while "1"  (timeout="50000")
[17:16:04.602]            // while-condition  =>  TRUE
[17:16:04.602]            // while "1"  (timeout="50000")
[17:16:04.603]            // while-condition  =>  TRUE
[17:16:04.603]            // while "1"  (timeout="50000")
[17:16:04.603]            // while-condition  =>  TRUE
[17:16:04.603]            // while "1"  (timeout="50000")
[17:16:04.603]            // while-condition  =>  TRUE
[17:16:04.604]            // while "1"  (timeout="50000")
[17:16:04.604]            // while-condition  =>  TRUE
[17:16:04.604]            // while "1"  (timeout="50000")
[17:16:04.604]            // while-condition  =>  TRUE
[17:16:04.605]            // while "1"  (timeout="50000")
[17:16:04.605]            // while-condition  =>  TRUE
[17:16:04.605]            // while "1"  (timeout="50000")
[17:16:04.605]            // while-condition  =>  TRUE
[17:16:04.605]            // while "1"  (timeout="50000")
[17:16:04.606]            // while-condition  =>  TRUE
[17:16:04.606]            // while "1"  (timeout="50000")
[17:16:04.606]            // while-condition  =>  TRUE
[17:16:04.606]            // while "1"  (timeout="50000")
[17:16:04.607]            // while-condition  =>  TRUE
[17:16:04.607]            // while "1"  (timeout="50000")
[17:16:04.607]            // while-condition  =>  TRUE
[17:16:04.607]            // while "1"  (timeout="50000")
[17:16:04.607]            // while-condition  =>  TRUE
[17:16:04.608]            // while "1"  (timeout="50000")
[17:16:04.608]            // while-condition  =>  TRUE
[17:16:04.608]            // while "1"  (timeout="50000")
[17:16:04.609]            // while-condition  =>  TRUE
[17:16:04.609]            // while "1"  (timeout="50000")
[17:16:04.609]            // while-condition  =>  TRUE
[17:16:04.609]            // while "1"  (timeout="50000")
[17:16:04.610]            // while-condition  =>  TRUE
[17:16:04.610]            // while "1"  (timeout="50000")
[17:16:04.610]            // while-condition  =>  TRUE
[17:16:04.611]            // while "1"  (timeout="50000")
[17:16:04.611]            // while-condition  =>  TRUE
[17:16:04.611]            // while "1"  (timeout="50000")
[17:16:04.611]            // while-condition  =>  TRUE
[17:16:04.611]            // while "1"  (timeout="50000")
[17:16:04.612]            // while-condition  =>  TRUE
[17:16:04.612]            // while "1"  (timeout="50000")
[17:16:04.613]            // while-condition  =>  TRUE
[17:16:04.613]            // while "1"  (timeout="50000")
[17:16:04.613]            // while-condition  =>  TRUE
[17:16:04.614]            // while "1"  (timeout="50000")
[17:16:04.614]            // while-condition  =>  TRUE
[17:16:04.614]            // while "1"  (timeout="50000")
[17:16:04.614]            // while-condition  =>  TRUE
[17:16:04.615]            // while "1"  (timeout="50000")
[17:16:04.615]            // while-condition  =>  TRUE
[17:16:04.615]            // while "1"  (timeout="50000")
[17:16:04.615]            // while-condition  =>  TRUE
[17:16:04.616]            // while "1"  (timeout="50000")
[17:16:04.616]            // while-condition  =>  TRUE
[17:16:04.616]            // while "1"  (timeout="50000")
[17:16:04.616]            // while-condition  =>  TRUE
[17:16:04.616]            // while "1"  (timeout="50000")
[17:16:04.617]            // while-condition  =>  TRUE
[17:16:04.617]            // while "1"  (timeout="50000")
[17:16:04.617]            // while-condition  =>  TRUE
[17:16:04.617]            // while "1"  (timeout="50000")
[17:16:04.618]            // while-condition  =>  TRUE
[17:16:04.618]            // while "1"  (timeout="50000")
[17:16:04.618]            // while-condition  =>  TRUE
[17:16:04.619]            // while "1"  (timeout="50000")
[17:16:04.619]            // while-condition  =>  TRUE
[17:16:04.619]            // while "1"  (timeout="50000")
[17:16:04.619]            // while-condition  =>  TRUE
[17:16:04.620]            // while "1"  (timeout="50000")
[17:16:04.620]            // while-condition  =>  TRUE
[17:16:04.620]            // while "1"  (timeout="50000")
[17:16:04.621]            // while-condition  =>  TRUE
[17:16:04.621]            // while "1"  (timeout="50000")
[17:16:04.621]            // while-condition  =>  TRUE
[17:16:04.622]            // while "1"  (timeout="50000")
[17:16:04.622]            // while-condition  =>  TRUE
[17:16:04.622]            // while "1"  (timeout="50000")
[17:16:04.622]            // while-condition  =>  TRUE
[17:16:04.623]            // while "1"  (timeout="50000")
[17:16:04.623]            // while-condition  =>  TRUE
[17:16:04.623]            // while "1"  (timeout="50000")
[17:16:04.623]            // while-condition  =>  TRUE
[17:16:04.624]            // while "1"  (timeout="50000")
[17:16:04.624]            // while-condition  =>  TRUE
[17:16:04.624]            // while "1"  (timeout="50000")
[17:16:04.624]            // while-condition  =>  TRUE
[17:16:04.624]            // while "1"  (timeout="50000")
[17:16:04.625]            // while-condition  =>  TRUE
[17:16:04.625]            // while "1"  (timeout="50000")
[17:16:04.625]            // while-condition  =>  TRUE
[17:16:04.626]            // while "1"  (timeout="50000")
[17:16:04.626]            // while-condition  =>  TRUE
[17:16:04.626]            // while "1"  (timeout="50000")
[17:16:04.626]            // while-condition  =>  TRUE
[17:16:04.626]            // while "1"  (timeout="50000")
[17:16:04.627]            // while-condition  =>  TRUE
[17:16:04.627]            // while "1"  (timeout="50000")
[17:16:04.627]            // while-condition  =>  TRUE
[17:16:04.627]            // while "1"  (timeout="50000")
[17:16:04.628]            // while-condition  =>  TRUE
[17:16:04.628]            // while "1"  (timeout="50000")
[17:16:04.628]            // while-condition  =>  TRUE
[17:16:04.628]            // while "1"  (timeout="50000")
[17:16:04.629]            // while-condition  =>  TRUE
[17:16:04.629]            // while "1"  (timeout="50000")
[17:16:04.629]            // while-condition  =>  TRUE
[17:16:04.629]            // while "1"  (timeout="50000")
[17:16:04.629]            // while-condition  =>  TRUE
[17:16:04.630]            // while "1"  (timeout="50000")
[17:16:04.630]            // while  =>  TIMEOUT
[17:16:04.631]            // end while "1"
[17:16:04.631]          </control>
[17:16:04.631]          <block atomic="false" info="">
[17:16:04.632]            DAP_SWJ_Pins(nReset, nReset, 0);
[17:16:04.642]              // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0xFF]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=1, TDO=1, nTRST=1, nRESET=1)
[17:16:04.642]          </block>
[17:16:04.643]          <control if="" while="1" timeout="10000" info="">
[17:16:04.644]            // while "1"  (timeout="10000")
[17:16:04.644]            // while-condition  =>  TRUE
[17:16:04.645]            // while "1"  (timeout="10000")
[17:16:04.645]            // while-condition  =>  TRUE
[17:16:04.645]            // while "1"  (timeout="10000")
[17:16:04.646]            // while-condition  =>  TRUE
[17:16:04.646]            // while "1"  (timeout="10000")
[17:16:04.646]            // while  =>  TIMEOUT
[17:16:04.647]            // end while "1"
[17:16:04.647]          </control>
[17:16:04.647]          <block atomic="true" info="">
[17:16:04.648]            // ATOMIC SEQUENCE - EXECUTE
[17:16:04.649]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  // 50 cycles SWDIO/TMS High
[17:16:04.649]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:16:04.650]            DAP_SWJ_Sequence(3,  0x00);                // At least 3 idle cycles (SWDIO/TMS Low)
[17:16:04.650]              // -> [DAP_SWJ_Sequence(3, 0x0000000000000000)]
[17:16:04.650]            // ATOMIC SEQUENCE - DONE
[17:16:04.651]          </block>
[17:16:04.651]          <block atomic="false" info="">
[17:16:04.651]            __errorcontrol = 0x00000001;
[17:16:04.651]              // -> [__errorcontrol <= 0x00000001]  (Skip Errors="True")
[17:16:04.652]            ReadDP(0x0);
[17:16:04.653]              // -> [ReadDP(0x00000000) => 0x0BC11477]   (__dp=0x00000000)
[17:16:04.653]            __errorcontrol = 0x00000000;
[17:16:04.654]              // -> [__errorcontrol <= 0x00000000]  (Skip Errors="False")
[17:16:04.654]          </block>
[17:16:04.654]        </sequence>
[17:16:04.655]      Sequence("DebugPortSetup");
[17:16:04.655]        <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:16:04.655]        </sequence>
[17:16:04.655]      Sequence("DebugPortStart");
[17:16:04.656]        <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:16:04.656]          <block atomic="false" info="">
[17:16:04.656]            __var SW_DP_ABORT  = 0x0;
[17:16:04.656]              // -> [SW_DP_ABORT <= 0x00000000]
[17:16:04.657]            __var DP_CTRL_STAT = 0x4;
[17:16:04.657]              // -> [DP_CTRL_STAT <= 0x00000004]
[17:16:04.657]            __var DP_SELECT    = 0x8;
[17:16:04.657]              // -> [DP_SELECT <= 0x00000008]
[17:16:04.657]            __var powered_down = 0;
[17:16:04.658]              // -> [powered_down <= 0x00000000]
[17:16:04.658]            WriteDP(DP_SELECT, 0x00000000);
[17:16:04.659]              // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:16:04.659]            powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:16:04.660]              // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:16:04.660]              // -> [powered_down <= 0x00000001]
[17:16:04.660]          </block>
[17:16:04.661]          <control if="powered_down" while="" timeout="0" info="">
[17:16:04.661]            // if-block "powered_down"
[17:16:04.661]              // =>  TRUE
[17:16:04.661]            <block atomic="false" info="">
[17:16:04.662]              WriteDP(DP_CTRL_STAT, 0x50000000);
[17:16:04.663]                // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:16:04.664]            </block>
[17:16:04.664]            <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:16:04.664]              // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:16:04.666]                // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:16:04.666]              // while-condition  =>  FALSE
[17:16:04.666]              // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:16:04.667]            </control>
[17:16:04.667]            <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:16:04.667]              // if-block "(__protocol & 0xFFFF) == 1"
[17:16:04.667]                // =>  FALSE
[17:16:04.668]              // skip if-block "(__protocol & 0xFFFF) == 1"
[17:16:04.668]            </control>
[17:16:04.668]            <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:16:04.668]              // if-block "(__protocol & 0xFFFF) == 2"
[17:16:04.669]                // =>  TRUE
[17:16:04.669]              <block atomic="false" info="">
[17:16:04.669]                WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:16:04.670]                  // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:16:04.670]                WriteDP(SW_DP_ABORT, 0x0000001E);
[17:16:04.672]                  // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:16:04.672]              </block>
[17:16:04.672]              // end if-block "(__protocol & 0xFFFF) == 2"
[17:16:04.673]            </control>
[17:16:04.673]            // end if-block "powered_down"
[17:16:04.673]          </control>
[17:16:04.673]        </sequence>
[17:16:04.674]      Sequence("DebugCoreStart");
[17:16:04.674]        <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[17:16:04.674]          <block atomic="true" info="">
[17:16:04.674]            // ATOMIC SEQUENCE - EXECUTE
[17:16:04.676]            __var DP_R_IDCODE    = 0x0;
[17:16:04.676]              // -> [DP_R_IDCODE <= 0x00000000]
[17:16:04.676]            __var DP_W_ABORT    = 0x0;
[17:16:04.677]              // -> [DP_W_ABORT <= 0x00000000]
[17:16:04.677]            __var DP_CTRLSTAT = 0x4;
[17:16:04.677]              // -> [DP_CTRLSTAT <= 0x00000004]
[17:16:04.677]            __var DP_W_SELECT    = 0x8;
[17:16:04.678]              // -> [DP_W_SELECT <= 0x00000008]
[17:16:04.678]            __var AP_TAR		= 0x4;
[17:16:04.678]              // -> [AP_TAR <= 0x00000004]
[17:16:04.678]            __var AP_BD0		= 0x0;
[17:16:04.678]              // -> [AP_BD0 <= 0x00000000]
[17:16:04.679]            __var AP_BD1		= 0x4;
[17:16:04.679]              // -> [AP_BD1 <= 0x00000004]
[17:16:04.679]            __var AP_BD2		= 0x8;
[17:16:04.679]              // -> [AP_BD2 <= 0x00000008]
[17:16:04.679]            __var PCWithinFlash = 0;
[17:16:04.680]              // -> [PCWithinFlash <= 0x00000000]
[17:16:04.680]            Write32(0xE000EDF0, 0xA05F0003);	// Halt the CORE
[17:16:04.680]              // -> [Write32(0xE000EDF0, 0xA05F0003)]   (__dp=0x00000000, __ap=0x00000000)
[17:16:04.680]            // ATOMIC SEQUENCE - DONE
[17:16:04.680]          </block>
[17:16:04.681]          <control if="" while="(Read32(0xE000EDF0) & 0x00020000) != 0x00020000" timeout="1000000" info="">
[17:16:04.681]            // while "(Read32(0xE000EDF0) & 0x00020000) != 0x00020000"  (timeout="1000000")
[17:16:04.684]              // -> [Read32(0xE000EDF0) => 0x03030003]   (__dp=0x00000000, __ap=0x00000000)
[17:16:04.684]            // while-condition  =>  FALSE
[17:16:04.684]            // end while "(Read32(0xE000EDF0) & 0x00020000) != 0x00020000"
[17:16:04.685]          </control>
[17:16:04.685]          <block atomic="true" info="">
[17:16:04.685]            // ATOMIC SEQUENCE - EXECUTE
[17:16:04.687]            WriteDP(DP_W_SELECT, 0x00000000);	//Select 0x00
[17:16:04.687]              // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:16:04.688]            WriteAP(AP_TAR, 0xE000EDF0);		//Set TAR to DHCSR
[17:16:04.688]              // -> [WriteAP(0x00000004, 0xE000EDF0)]   (__dp=0x00000000, __ap=0x00000000)
[17:16:04.688]            WriteDP(DP_W_SELECT, 0x00000010);	//Select 0x10
[17:16:04.688]              // -> [WriteDP(0x00000008, 0x00000010)]   (__dp=0x00000000)
[17:16:04.688]            WriteAP(AP_BD1, 0x0000000F);		//Trigger read of PC
[17:16:04.689]              // -> [WriteAP(0x00000004, 0x0000000F)]   (__dp=0x00000000, __ap=0x00000000)
[17:16:04.689]            // ATOMIC SEQUENCE - DONE
[17:16:04.689]          </block>
[17:16:04.689]          <control if="" while="(ReadAP(AP_BD0) & 0x00010000) != 0x00010000" timeout="100000" info="">
[17:16:04.690]            // while "(ReadAP(AP_BD0) & 0x00010000) != 0x00010000"  (timeout="100000")
[17:16:04.691]              // -> [ReadAP(0x00000000) => 0x01030003]   (__dp=0x00000000, __ap=0x00000000)
[17:16:04.691]            // while-condition  =>  FALSE
[17:16:04.692]            // end while "(ReadAP(AP_BD0) & 0x00010000) != 0x00010000"
[17:16:04.692]          </control>
[17:16:04.692]          <block atomic="false" info="">
[17:16:04.692]            PCWithinFlash = (ReadAP(AP_BD2) >= 0x10000800);
[17:16:04.694]              // -> [ReadAP(0x00000008) => 0x10000820]   (__dp=0x00000000, __ap=0x00000000)
[17:16:04.694]              // -> [PCWithinFlash <= 0x00000001]
[17:16:04.695]            WriteDP(DP_W_SELECT, 0x00000000);	//Select 0x00
[17:16:04.696]              // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:16:04.696]          </block>
[17:16:04.697]          <control if="PCWithinFlash == 0" while="" timeout="0" info="">
[17:16:04.697]            // if-block "PCWithinFlash == 0"
[17:16:04.697]              // =>  FALSE
[17:16:04.698]            // skip if-block "PCWithinFlash == 0"
[17:16:04.698]          </control>
[17:16:04.698]        </sequence>
[17:16:04.699]    </block>
[17:16:04.699]  </sequence>
[17:16:04.699]  
[17:16:12.053]  **********  Sequence "DebugPortStop"  (Context="Disconnect", Pname="", info="")
[17:16:12.053]  
[17:16:12.053]  <debugvars>
[17:16:12.054]    // Pre-defined
[17:16:12.054]    __protocol=0x00000002      (Protocol="SWD", SWJ-DP="False")
[17:16:12.055]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:16:12.055]    __dp=0x00000000
[17:16:12.056]    __ap=0x00000000
[17:16:12.056]    __traceout=0x00000000      (Trace Disabled)
[17:16:12.057]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:16:12.057]    __FlashAddr=0x00000000
[17:16:12.058]    __FlashLen=0x00000000
[17:16:12.058]    __FlashArg=0x00000000
[17:16:12.058]    __FlashOp=0x00000000
[17:16:12.059]    __Result=0x00000000
[17:16:12.059]  </debugvars>
[17:16:12.059]  
[17:16:12.060]  <sequence name="DebugPortStop" Pname="" disable="false" info="">
[17:16:12.060]    <block atomic="false" info="">
[17:16:12.060]      __var nReset      = 0x80;
[17:16:12.060]        // -> [nReset <= 0x00000080]
[17:16:12.061]      DAP_SWJ_Pins(0x00, nReset, 0);
[17:16:12.062]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0xFF]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=1, TDO=1, nTRST=1, nRESET=1)
[17:16:12.063]    </block>
[17:16:12.063]    <control if="" while="1" timeout="50000" info="">
[17:16:12.063]      // while "1"  (timeout="50000")
[17:16:12.063]      // while-condition  =>  TRUE
[17:16:12.063]      // while "1"  (timeout="50000")
[17:16:12.063]      // while-condition  =>  TRUE
[17:16:12.063]      // while "1"  (timeout="50000")
[17:16:12.065]      // while-condition  =>  TRUE
[17:16:12.065]      // while "1"  (timeout="50000")
[17:16:12.065]      // while-condition  =>  TRUE
[17:16:12.065]      // while "1"  (timeout="50000")
[17:16:12.066]      // while-condition  =>  TRUE
[17:16:12.066]      // while "1"  (timeout="50000")
[17:16:12.066]      // while-condition  =>  TRUE
[17:16:12.066]      // while "1"  (timeout="50000")
[17:16:12.066]      // while-condition  =>  TRUE
[17:16:12.067]      // while "1"  (timeout="50000")
[17:16:12.067]      // while-condition  =>  TRUE
[17:16:12.067]      // while "1"  (timeout="50000")
[17:16:12.067]      // while-condition  =>  TRUE
[17:16:12.068]      // while "1"  (timeout="50000")
[17:16:12.068]      // while-condition  =>  TRUE
[17:16:12.068]      // while "1"  (timeout="50000")
[17:16:12.068]      // while-condition  =>  TRUE
[17:16:12.068]      // while "1"  (timeout="50000")
[17:16:12.069]      // while-condition  =>  TRUE
[17:16:12.069]      // while "1"  (timeout="50000")
[17:16:12.069]      // while-condition  =>  TRUE
[17:16:12.069]      // while "1"  (timeout="50000")
[17:16:12.069]      // while-condition  =>  TRUE
[17:16:12.070]      // while "1"  (timeout="50000")
[17:16:12.070]      // while-condition  =>  TRUE
[17:16:12.070]      // while "1"  (timeout="50000")
[17:16:12.070]      // while-condition  =>  TRUE
[17:16:12.070]      // while "1"  (timeout="50000")
[17:16:12.070]      // while-condition  =>  TRUE
[17:16:12.071]      // while "1"  (timeout="50000")
[17:16:12.071]      // while-condition  =>  TRUE
[17:16:12.071]      // while "1"  (timeout="50000")
[17:16:12.071]      // while-condition  =>  TRUE
[17:16:12.071]      // while "1"  (timeout="50000")
[17:16:12.072]      // while-condition  =>  TRUE
[17:16:12.072]      // while "1"  (timeout="50000")
[17:16:12.072]      // while-condition  =>  TRUE
[17:16:12.072]      // while "1"  (timeout="50000")
[17:16:12.072]      // while-condition  =>  TRUE
[17:16:12.073]      // while "1"  (timeout="50000")
[17:16:12.073]      // while-condition  =>  TRUE
[17:16:12.073]      // while "1"  (timeout="50000")
[17:16:12.073]      // while-condition  =>  TRUE
[17:16:12.073]      // while "1"  (timeout="50000")
[17:16:12.074]      // while-condition  =>  TRUE
[17:16:12.074]      // while "1"  (timeout="50000")
[17:16:12.074]      // while-condition  =>  TRUE
[17:16:12.074]      // while "1"  (timeout="50000")
[17:16:12.074]      // while-condition  =>  TRUE
[17:16:12.074]      // while "1"  (timeout="50000")
[17:16:12.075]      // while-condition  =>  TRUE
[17:16:12.075]      // while "1"  (timeout="50000")
[17:16:12.075]      // while-condition  =>  TRUE
[17:16:12.075]      // while "1"  (timeout="50000")
[17:16:12.075]      // while-condition  =>  TRUE
[17:16:12.076]      // while "1"  (timeout="50000")
[17:16:12.076]      // while-condition  =>  TRUE
[17:16:12.076]      // while "1"  (timeout="50000")
[17:16:12.076]      // while-condition  =>  TRUE
[17:16:12.077]      // while "1"  (timeout="50000")
[17:16:12.077]      // while-condition  =>  TRUE
[17:16:12.077]      // while "1"  (timeout="50000")
[17:16:12.077]      // while-condition  =>  TRUE
[17:16:12.078]      // while "1"  (timeout="50000")
[17:16:12.078]      // while-condition  =>  TRUE
[17:16:12.078]      // while "1"  (timeout="50000")
[17:16:12.078]      // while-condition  =>  TRUE
[17:16:12.078]      // while "1"  (timeout="50000")
[17:16:12.079]      // while-condition  =>  TRUE
[17:16:12.079]      // while "1"  (timeout="50000")
[17:16:12.079]      // while-condition  =>  TRUE
[17:16:12.079]      // while "1"  (timeout="50000")
[17:16:12.079]      // while-condition  =>  TRUE
[17:16:12.080]      // while "1"  (timeout="50000")
[17:16:12.080]      // while-condition  =>  TRUE
[17:16:12.080]      // while "1"  (timeout="50000")
[17:16:12.080]      // while-condition  =>  TRUE
[17:16:12.080]      // while "1"  (timeout="50000")
[17:16:12.081]      // while-condition  =>  TRUE
[17:16:12.081]      // while "1"  (timeout="50000")
[17:16:12.081]      // while-condition  =>  TRUE
[17:16:12.081]      // while "1"  (timeout="50000")
[17:16:12.081]      // while-condition  =>  TRUE
[17:16:12.082]      // while "1"  (timeout="50000")
[17:16:12.082]      // while-condition  =>  TRUE
[17:16:12.082]      // while "1"  (timeout="50000")
[17:16:12.082]      // while-condition  =>  TRUE
[17:16:12.083]      // while "1"  (timeout="50000")
[17:16:12.083]      // while-condition  =>  TRUE
[17:16:12.083]      // while "1"  (timeout="50000")
[17:16:12.083]      // while-condition  =>  TRUE
[17:16:12.084]      // while "1"  (timeout="50000")
[17:16:12.084]      // while-condition  =>  TRUE
[17:16:12.084]      // while "1"  (timeout="50000")
[17:16:12.084]      // while-condition  =>  TRUE
[17:16:12.084]      // while "1"  (timeout="50000")
[17:16:12.085]      // while-condition  =>  TRUE
[17:16:12.085]      // while "1"  (timeout="50000")
[17:16:12.085]      // while-condition  =>  TRUE
[17:16:12.085]      // while "1"  (timeout="50000")
[17:16:12.085]      // while-condition  =>  TRUE
[17:16:12.086]      // while "1"  (timeout="50000")
[17:16:12.086]      // while-condition  =>  TRUE
[17:16:12.086]      // while "1"  (timeout="50000")
[17:16:12.086]      // while-condition  =>  TRUE
[17:16:12.086]      // while "1"  (timeout="50000")
[17:16:12.087]      // while-condition  =>  TRUE
[17:16:12.087]      // while "1"  (timeout="50000")
[17:16:12.087]      // while-condition  =>  TRUE
[17:16:12.087]      // while "1"  (timeout="50000")
[17:16:12.087]      // while-condition  =>  TRUE
[17:16:12.088]      // while "1"  (timeout="50000")
[17:16:12.088]      // while-condition  =>  TRUE
[17:16:12.088]      // while "1"  (timeout="50000")
[17:16:12.088]      // while-condition  =>  TRUE
[17:16:12.088]      // while "1"  (timeout="50000")
[17:16:12.089]      // while-condition  =>  TRUE
[17:16:12.089]      // while "1"  (timeout="50000")
[17:16:12.089]      // while-condition  =>  TRUE
[17:16:12.089]      // while "1"  (timeout="50000")
[17:16:12.089]      // while-condition  =>  TRUE
[17:16:12.089]      // while "1"  (timeout="50000")
[17:16:12.090]      // while-condition  =>  TRUE
[17:16:12.090]      // while "1"  (timeout="50000")
[17:16:12.090]      // while-condition  =>  TRUE
[17:16:12.090]      // while "1"  (timeout="50000")
[17:16:12.090]      // while-condition  =>  TRUE
[17:16:12.090]      // while "1"  (timeout="50000")
[17:16:12.091]      // while-condition  =>  TRUE
[17:16:12.091]      // while "1"  (timeout="50000")
[17:16:12.091]      // while-condition  =>  TRUE
[17:16:12.091]      // while "1"  (timeout="50000")
[17:16:12.092]      // while-condition  =>  TRUE
[17:16:12.092]      // while "1"  (timeout="50000")
[17:16:12.092]      // while-condition  =>  TRUE
[17:16:12.092]      // while "1"  (timeout="50000")
[17:16:12.092]      // while-condition  =>  TRUE
[17:16:12.093]      // while "1"  (timeout="50000")
[17:16:12.093]      // while-condition  =>  TRUE
[17:16:12.093]      // while "1"  (timeout="50000")
[17:16:12.093]      // while-condition  =>  TRUE
[17:16:12.093]      // while "1"  (timeout="50000")
[17:16:12.094]      // while-condition  =>  TRUE
[17:16:12.094]      // while "1"  (timeout="50000")
[17:16:12.094]      // while-condition  =>  TRUE
[17:16:12.094]      // while "1"  (timeout="50000")
[17:16:12.094]      // while-condition  =>  TRUE
[17:16:12.095]      // while "1"  (timeout="50000")
[17:16:12.095]      // while-condition  =>  TRUE
[17:16:12.095]      // while "1"  (timeout="50000")
[17:16:12.095]      // while-condition  =>  TRUE
[17:16:12.095]      // while "1"  (timeout="50000")
[17:16:12.096]      // while-condition  =>  TRUE
[17:16:12.096]      // while "1"  (timeout="50000")
[17:16:12.096]      // while-condition  =>  TRUE
[17:16:12.096]      // while "1"  (timeout="50000")
[17:16:12.096]      // while-condition  =>  TRUE
[17:16:12.097]      // while "1"  (timeout="50000")
[17:16:12.097]      // while-condition  =>  TRUE
[17:16:12.097]      // while "1"  (timeout="50000")
[17:16:12.097]      // while-condition  =>  TRUE
[17:16:12.097]      // while "1"  (timeout="50000")
[17:16:12.098]      // while-condition  =>  TRUE
[17:16:12.098]      // while "1"  (timeout="50000")
[17:16:12.098]      // while-condition  =>  TRUE
[17:16:12.098]      // while "1"  (timeout="50000")
[17:16:12.098]      // while-condition  =>  TRUE
[17:16:12.098]      // while "1"  (timeout="50000")
[17:16:12.098]      // while-condition  =>  TRUE
[17:16:12.099]      // while "1"  (timeout="50000")
[17:16:12.099]      // while-condition  =>  TRUE
[17:16:12.099]      // while "1"  (timeout="50000")
[17:16:12.099]      // while-condition  =>  TRUE
[17:16:12.099]      // while "1"  (timeout="50000")
[17:16:12.099]      // while-condition  =>  TRUE
[17:16:12.100]      // while "1"  (timeout="50000")
[17:16:12.100]      // while-condition  =>  TRUE
[17:16:12.100]      // while "1"  (timeout="50000")
[17:16:12.100]      // while-condition  =>  TRUE
[17:16:12.100]      // while "1"  (timeout="50000")
[17:16:12.101]      // while-condition  =>  TRUE
[17:16:12.101]      // while "1"  (timeout="50000")
[17:16:12.101]      // while-condition  =>  TRUE
[17:16:12.102]      // while "1"  (timeout="50000")
[17:16:12.102]      // while-condition  =>  TRUE
[17:16:12.102]      // while "1"  (timeout="50000")
[17:16:12.102]      // while-condition  =>  TRUE
[17:16:12.102]      // while "1"  (timeout="50000")
[17:16:12.103]      // while-condition  =>  TRUE
[17:16:12.103]      // while "1"  (timeout="50000")
[17:16:12.103]      // while-condition  =>  TRUE
[17:16:12.103]      // while "1"  (timeout="50000")
[17:16:12.103]      // while-condition  =>  TRUE
[17:16:12.103]      // while "1"  (timeout="50000")
[17:16:12.104]      // while-condition  =>  TRUE
[17:16:12.104]      // while "1"  (timeout="50000")
[17:16:12.104]      // while-condition  =>  TRUE
[17:16:12.105]      // while "1"  (timeout="50000")
[17:16:12.105]      // while-condition  =>  TRUE
[17:16:12.105]      // while "1"  (timeout="50000")
[17:16:12.105]      // while-condition  =>  TRUE
[17:16:12.105]      // while "1"  (timeout="50000")
[17:16:12.105]      // while-condition  =>  TRUE
[17:16:12.105]      // while "1"  (timeout="50000")
[17:16:12.105]      // while-condition  =>  TRUE
[17:16:12.106]      // while "1"  (timeout="50000")
[17:16:12.106]      // while-condition  =>  TRUE
[17:16:12.107]      // while "1"  (timeout="50000")
[17:16:12.107]      // while-condition  =>  TRUE
[17:16:12.107]      // while "1"  (timeout="50000")
[17:16:12.107]      // while-condition  =>  TRUE
[17:16:12.107]      // while "1"  (timeout="50000")
[17:16:12.107]      // while-condition  =>  TRUE
[17:16:12.108]      // while "1"  (timeout="50000")
[17:16:12.108]      // while-condition  =>  TRUE
[17:16:12.108]      // while "1"  (timeout="50000")
[17:16:12.108]      // while-condition  =>  TRUE
[17:16:12.108]      // while "1"  (timeout="50000")
[17:16:12.109]      // while-condition  =>  TRUE
[17:16:12.109]      // while "1"  (timeout="50000")
[17:16:12.109]      // while-condition  =>  TRUE
[17:16:12.109]      // while "1"  (timeout="50000")
[17:16:12.109]      // while-condition  =>  TRUE
[17:16:12.110]      // while "1"  (timeout="50000")
[17:16:12.110]      // while-condition  =>  TRUE
[17:16:12.110]      // while "1"  (timeout="50000")
[17:16:12.110]      // while-condition  =>  TRUE
[17:16:12.110]      // while "1"  (timeout="50000")
[17:16:12.111]      // while-condition  =>  TRUE
[17:16:12.111]      // while "1"  (timeout="50000")
[17:16:12.111]      // while-condition  =>  TRUE
[17:16:12.111]      // while "1"  (timeout="50000")
[17:16:12.111]      // while-condition  =>  TRUE
[17:16:12.112]      // while "1"  (timeout="50000")
[17:16:12.112]      // while-condition  =>  TRUE
[17:16:12.112]      // while "1"  (timeout="50000")
[17:16:12.112]      // while-condition  =>  TRUE
[17:16:12.112]      // while "1"  (timeout="50000")
[17:16:12.113]      // while-condition  =>  TRUE
[17:16:12.113]      // while "1"  (timeout="50000")
[17:16:12.113]      // while-condition  =>  TRUE
[17:16:12.113]      // while "1"  (timeout="50000")
[17:16:12.113]      // while-condition  =>  TRUE
[17:16:12.114]      // while "1"  (timeout="50000")
[17:16:12.114]      // while-condition  =>  TRUE
[17:16:12.114]      // while "1"  (timeout="50000")
[17:16:12.114]      // while-condition  =>  TRUE
[17:16:12.114]      // while "1"  (timeout="50000")
[17:16:12.115]      // while  =>  TIMEOUT
[17:16:12.115]      // end while "1"
[17:16:12.115]    </control>
[17:16:12.115]    <block atomic="false" info="">
[17:16:12.115]      DAP_SWJ_Pins(nReset, nReset, 0);
[17:16:12.127]        // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0xFF]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=1, TDO=1, nTRST=1, nRESET=1)
[17:16:12.145]    </block>
[17:16:12.146]  </sequence>
[17:16:12.147]  
