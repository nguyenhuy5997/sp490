/*
 * Copyright (c) 2009-2016 ARM Limited. All rights reserved.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * 
 * Licensed under the Apache License, Version 2.0 (the License); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @file     SP49.h
 * @brief    CMSIS HeaderFile
 * @version  B21
 * @date     22. January 2021
 * @note     Generated by SVDConv V3.3.9 on Friday, 22.01.2021 09:09:42
 *           from File 'Files/SVD/SP49.svd',
 *           last modified on Thursday, 17.12.2020 13:46:39
 */



/** @addtogroup 
  * @{
  */


/** @addtogroup SP49
  * @{
  */


#ifndef SP49_H
#define SP49_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup Configuration_of_CMSIS
  * @{
  */



/* =========================================================================================================================== */
/* ================                                Interrupt Number Definition                                ================ */
/* =========================================================================================================================== */

typedef enum {
/* =======================================  ARM Cortex-M0+ Specific Interrupt Numbers  ======================================= */
  Reset_IRQn                = -15,              /*!< -15  Reset Vector, invoked on Power up and warm reset                     */
  NonMaskableInt_IRQn       = -14,              /*!< -14  Non maskable Interrupt, cannot be stopped or preempted               */
  HardFault_IRQn            = -13,              /*!< -13  Hard Fault, all classes of Fault                                     */
  SVCall_IRQn               =  -5,              /*!< -5 System Service Call via SVC instruction                                */
  PendSV_IRQn               =  -2,              /*!< -2 Pendable request for system service                                    */
  SysTick_IRQn              =  -1,              /*!< -1 System Tick Timer                                                      */
/* ============================================  SP49 Specific Interrupt Numbers  ============================================ */
} IRQn_Type;



/* =========================================================================================================================== */
/* ================                           Processor and Core Peripheral Section                           ================ */
/* =========================================================================================================================== */

/* ==========================  Configuration of the ARM Cortex-M0+ Processor and Core Peripherals  =========================== */
#define __CM0PLUS_REV                 0x0001U   /*!< CM0PLUS Core Revision                                                     */
#define __NVIC_PRIO_BITS               2        /*!< Number of Bits used for Priority Levels                                   */
#define __Vendor_SysTickConfig         0        /*!< Set to 1 if different SysTick Config is used                              */
#define __VTOR_PRESENT                 1        /*!< Set to 1 if CPU supports Vector Table Offset Register                     */


/** @} */ /* End of group Configuration_of_CMSIS */

#include "core_cm0plus.h"                       /*!< ARM Cortex-M0+ processor and core peripherals                             */
#include "system_SP49.h"                        /*!< SP49 System                                                               */

#ifndef __IM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __IM   __I
#endif
#ifndef __OM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __OM   __O
#endif
#ifndef __IOM                                   /*!< Fallback for older CMSIS versions                                         */
  #define __IOM  __IO
#endif


/* ========================================  Start of section using anonymous unions  ======================================== */
#if defined (__CC_ARM)
  #pragma push
  #pragma anon_unions
#elif defined (__ICCARM__)
  #pragma language=extended
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wc11-extensions"
  #pragma clang diagnostic ignored "-Wreserved-id-macro"
  #pragma clang diagnostic ignored "-Wgnu-anonymous-struct"
  #pragma clang diagnostic ignored "-Wnested-anon-types"
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning 586
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#else
  #warning Not supported compiler type
#endif


/* =========================================================================================================================== */
/* ================                            Device Specific Peripheral Section                             ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                         Corelogic                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief Register Interface of the Corelogic Transmitter (Corelogic)
  */

typedef struct {                                /*!< (@ 0x40005000) Corelogic Structure                                        */
  
  union {
    __IOM uint32_t TIMERCFG01;                  /*!< (@ 0x00000000) Timer Control Register for customer Timers                 */
    
    struct {
      __IOM uint32_t T0CLKSEL   : 4;            /*!< [3..0] Setting the clock source for GP-Timer 0                            */
      __IOM uint32_t T0DIVSEL   : 4;            /*!< [7..4] Clock division selection, APP Timer0                               */
      __IOM uint32_t T0RUN      : 1;            /*!< [8..8] Timer 0 Run                                                        */
      __IM  uint32_t            : 3;
      __OM  uint32_t WDRES      : 1;            /*!< [12..12] Reset Watchdog Timer                                             */
      __IM  uint32_t            : 3;
      __IOM uint32_t T1CLKSEL   : 4;            /*!< [19..16] Setting the clock source for GP-Timer 1                          */
      __IOM uint32_t T1DIVSEL   : 4;            /*!< [23..20] Clock division selection, APP Timer1                             */
      __IOM uint32_t T1RUN      : 1;            /*!< [24..24] Timer 1 Run                                                      */
      __IM  uint32_t            : 2;
      __IOM uint32_t T01MODE    : 3;            /*!< [29..27] Mode Selection for GP Timer 0/1                                  */
      __IM  uint32_t            : 1;
      __IOM uint32_t T01EN      : 1;            /*!< [31..31] Enable Application Timers and all related registers              */
    } TIMERCFG01_b;
  } ;
  
  union {
    __IOM uint32_t TIMER01;                     /*!< (@ 0x00000004) Timervalues for customer timers                            */
    
    struct {
      __IOM uint32_t T0L        : 8;            /*!< [7..0] Timer 0 lower 8 bits                                               */
      __IOM uint32_t T0H        : 8;            /*!< [15..8] Timer 0 higher 8 bits                                             */
      __IOM uint32_t T1L        : 8;            /*!< [23..16] Timer 1 lower 8 bits                                             */
      __IOM uint32_t T1H        : 8;            /*!< [31..24] Timer 1 higher 8 bits                                            */
    } TIMER01_b;
  } ;
  
  union {
    __IOM uint32_t COLFLAGS;                    /*!< (@ 0x00000008) Timer Status and Hardware Fault Register                   */
    
    struct {
      __IM  uint32_t            : 9;
      __IOM uint32_t T0FULL     : 1;            /*!< [9..9] Timer 0 full event                                                 */
      __IOM uint32_t T1FULL     : 1;            /*!< [10..10] Timer 1 full event                                               */
      __IM  uint32_t ITSTATUS   : 21;           /*!< [31..11] provides the current value of Interval Timer (Pre-
                                                     and Post-Counter)                                                         */
    } COLFLAGS_b;
  } ;
  
  union {
    __IOM uint32_t HARDFAULTMASK;               /*!< (@ 0x0000000C) Hardware Fault Mask Register                               */
    
    struct {
      __IOM uint32_t HFMSFRSIZE : 1;            /*!< [0..0] Mask for SFR size fault                                            */
      __IOM uint32_t HFMADDR    : 1;            /*!< [1..1] Mask for AddressFault                                              */
      __IOM uint32_t HFMSFRPROT : 1;            /*!< [2..2] Mask for SFR internal Fault                                        */
      __IOM uint32_t HFMROMREAD : 1;            /*!< [3..3] Mask for ROM/Flash Read Fault                                      */
    } HARDFAULTMASK_b;
  } ;
  
  union {
    __IOM uint32_t PROTCTRL;                    /*!< (@ 0x00000010) Password protection for Internal SFRs                      */
    
    struct {
      __IOM uint32_t SFRPW      : 8;            /*!< [7..0] Password to unlock temporarily internal SFRs                       */
      __IM  uint32_t            : 23;
      __IM  uint32_t SFRLOCKED  : 1;            /*!< [31..31] Lock status of internal SFRs                                     */
    } PROTCTRL_b;
  } ;
} Corelogic_Type;                               /*!< Size = 20 (0x14)                                                          */



/* =========================================================================================================================== */
/* ================                                    Extended_Corelogic                                     ================ */
/* =========================================================================================================================== */


/**
  * @brief Register Interface of the ECL Transmitter (Extended_Corelogic)
  */

typedef struct {                                /*!< (@ 0x40007000) Extended_Corelogic Structure                               */
  
  union {
    __IM  uint32_t I2CDIN;                      /*!< (@ 0x00000000) I2C Data In Register                                       */
    
    struct {
      __IM  uint32_t I2CDI      : 8;            /*!< [7..0] Received data from I2C controller                                  */
    } I2CDIN_b;
  } ;
  
  union {
    __IOM uint32_t I2CDOUT;                     /*!< (@ 0x00000004) Data to be transmitted via I2C controller                  */
    
    struct {
      __IOM uint32_t I2CDO      : 8;            /*!< [7..0] Data                                                               */
    } I2CDOUT_b;
  } ;
  
  union {
    __IOM uint32_t I2CCFG;                      /*!< (@ 0x00000008) I2C configuration                                          */
    
    struct {
      __OM  uint32_t SEN        : 1;            /*!< [0..0] Start Condition Enable                                             */
      __OM  uint32_t RSEN       : 1;            /*!< [1..1] ReStart Condition Enable                                           */
      __OM  uint32_t PEN        : 1;            /*!< [2..2] Stop Condition Enable                                              */
      __OM  uint32_t ACKEN      : 1;            /*!< [3..3] Acknowledge Enable                                                 */
      __IOM uint32_t ACKDT      : 1;            /*!< [4..4] Acknowledge Data                                                   */
      __IM  uint32_t            : 1;
      __IOM uint32_t GCEN       : 1;            /*!< [6..6] General Call Enable                                                */
      __IOM uint32_t FS         : 1;            /*!< [7..7] Filter skipping Enable                                             */
      __IOM uint32_t BDR        : 8;            /*!< [15..8] Baud rate register                                                */
    } I2CCFG_b;
  } ;
  
  union {
    __IOM uint32_t I2CS;                        /*!< (@ 0x0000000C) I2C Status Register                                        */
    
    struct {
      __IM  uint32_t I2C_RBF    : 1;            /*!< [0..0] I2C Receive Buffer Full                                            */
      __IM  uint32_t I2C_TBF    : 1;            /*!< [1..1] I2C Transmit Buffer Full                                           */
      __IM  uint32_t I2C_RACK   : 1;            /*!< [2..2] I2C Acknowledge                                                    */
      __IM  uint32_t I2C_RNW    : 1;            /*!< [3..3] I2C Read/Write Information                                         */
      __IOM uint32_t I2C_S      : 1;            /*!< [4..4] I2C Stop Condition                                                 */
      __IOM uint32_t I2C_OV     : 1;            /*!< [5..5] I2C Overflow                                                       */
      __IOM uint32_t I2C_CD     : 1;            /*!< [6..6] I2C Collision Detected                                             */
      __IOM uint32_t I2C_AM     : 1;            /*!< [7..7] I2C Address Match                                                  */
    } I2CS_b;
  } ;
  
  union {
    __IM  uint32_t P1IN;                        /*!< (@ 0x00000010) IO-Port 1 Data In Register                                 */
    
    struct {
      __IM  uint32_t PPI0       : 1;            /*!< [0..0] PP0 I/O-Port Input Data                                            */
      __IM  uint32_t PPI1       : 1;            /*!< [1..1] PP1 I/O-Port Input Data                                            */
      __IM  uint32_t PPI2       : 1;            /*!< [2..2] PP2 I/O-Port Input Data                                            */
      __IM  uint32_t PPI3       : 1;            /*!< [3..3] PP3 I/O-Port Input Data                                            */
    } P1IN_b;
  } ;
} Extended_Corelogic_Type;                      /*!< Size = 20 (0x14)                                                          */



/* =========================================================================================================================== */
/* ================                                        LF_Receiver                                        ================ */
/* =========================================================================================================================== */


/**
  * @brief Register Interface of the LF Receiver (LF_Receiver)
  */

typedef struct {                                /*!< (@ 0x40002000) LF_Receiver Structure                                      */
  
  union {
    __IM  uint32_t LFDRXBUF0;                   /*!< (@ 0x00000000) LF Receiver Data Register 0                                */
    
    struct {
      __IM  uint32_t LFRXB0     : 8;            /*!< [7..0] received data byte 0                                               */
      __IM  uint32_t LFRXB1     : 8;            /*!< [15..8] received data byte 1                                              */
      __IM  uint32_t LFRXB2     : 8;            /*!< [23..16] received data byte 2                                             */
      __IM  uint32_t LFRXB3     : 8;            /*!< [31..24] received data byte 3                                             */
    } LFDRXBUF0_b;
  } ;
  
  union {
    __IM  uint32_t LFDRXBUF1;                   /*!< (@ 0x00000004) LF Receiver Data Register 1                                */
    
    struct {
      __IM  uint32_t LFRXB4     : 8;            /*!< [7..0] received data byte 4                                               */
      __IM  uint32_t LFRXB5     : 8;            /*!< [15..8] received data byte 5                                              */
      __IM  uint32_t LFRXB6     : 8;            /*!< [23..16] received data byte 6                                             */
      __IM  uint32_t LFRXB7     : 8;            /*!< [31..24] received data byte 7                                             */
    } LFDRXBUF1_b;
  } ;
  
  union {
    __IOM uint32_t LFDRXINFO;                   /*!< (@ 0x00000008) LF Receiver Datareception info                             */
    
    struct {
      __IOM uint32_t ERRB0      : 1;            /*!< [0..0] Error Flag for Byte 0                                              */
      __IOM uint32_t ERRB1      : 1;            /*!< [1..1] Error Flag for Byte 1                                              */
      __IOM uint32_t ERRB2      : 1;            /*!< [2..2] Error Flag for Byte 2                                              */
      __IOM uint32_t ERRB3      : 1;            /*!< [3..3] Error Flag for Byte 3                                              */
      __IOM uint32_t ERRB4      : 1;            /*!< [4..4] Error Flag for Byte 4                                              */
      __IOM uint32_t ERRB5      : 1;            /*!< [5..5] Error Flag for Byte 5                                              */
      __IOM uint32_t ERRB6      : 1;            /*!< [6..6] Error Flag for Byte 6                                              */
      __IOM uint32_t ERRB7      : 1;            /*!< [7..7] Error Flag for Byte 7                                              */
      __IOM uint32_t STATB0     : 1;            /*!< [8..8] Status Flag for Byte 0                                             */
      __IOM uint32_t STATB1     : 1;            /*!< [9..9] Status Flag for Byte 1                                             */
      __IOM uint32_t STATB2     : 1;            /*!< [10..10] Status Flag for Byte 2                                           */
      __IOM uint32_t STATB3     : 1;            /*!< [11..11] Status Flag for Byte 3                                           */
      __IOM uint32_t STATB4     : 1;            /*!< [12..12] Status Flag for Byte 4                                           */
      __IOM uint32_t STATB5     : 1;            /*!< [13..13] Status Flag for Byte 5                                           */
      __IOM uint32_t STATB6     : 1;            /*!< [14..14] Status Flag for Byte 6                                           */
      __IOM uint32_t STATB7     : 1;            /*!< [15..15] Status Flag for Byte 7                                           */
      __IOM uint32_t TOM        : 1;            /*!< [16..16] Tail of messsage                                                 */
      __IM  uint32_t            : 7;
      __IOM uint32_t DECERR     : 1;            /*!< [24..24] Decoding Error                                                   */
      __IOM uint32_t LFBP       : 1;            /*!< [25..25] LF Data Pending                                                  */
      __IOM uint32_t LFOV       : 1;            /*!< [26..26] LF data bit overwritten                                          */
      __IM  uint32_t LFDATA     : 1;            /*!< [27..27] Received LF data byte                                            */
      __IM  uint32_t SYNCIND    : 1;            /*!< [28..28] LFRX synchronized                                                */
      __IM  uint32_t SENSTRAW   : 1;            /*!< [29..29] Sensitivity raw data                                             */
      __IM  uint32_t CDRAW      : 1;            /*!< [30..30] Carrier detector raw data                                        */
      __IM  uint32_t DATARAW    : 1;            /*!< [31..31] LF receiver data                                                 */
    } LFDRXINFO_b;
  } ;
} LF_Receiver_Type;                             /*!< Size = 12 (0xc)                                                           */



/* =========================================================================================================================== */
/* ================                                       LF_Retention                                        ================ */
/* =========================================================================================================================== */


/**
  * @brief Retention Register Interface of the LF Receiver (LF_Retention)
  */

typedef struct {                                /*!< (@ 0x40003000) LF_Retention Structure                                     */
  
  union {
    __IOM uint32_t LFRXDPAT0;                   /*!< (@ 0x00000000) LF Pattern 0 Detector Sequence Data                        */
    
    struct {
      __IOM uint32_t LFCODEP0   : 16;           /*!< [15..0] LF Pattern 0 Sequence Data                                        */
    } LFRXDPAT0_b;
  } ;
  
  union {
    __IOM uint32_t LFRXDPAT1;                   /*!< (@ 0x00000004) LF Pattern 1 Detector Sequence Data                        */
    
    struct {
      __IOM uint32_t LFCODEP1   : 16;           /*!< [15..0] LF Pattern 1 Sequence Data                                        */
    } LFRXDPAT1_b;
  } ;
  
  union {
    __IOM uint32_t LFRXDPAT2;                   /*!< (@ 0x00000008) LF Pattern 2 Detector Sequence Data                        */
    
    struct {
      __IOM uint32_t LFCODEP2   : 16;           /*!< [15..0] LF Pattern 2 Sequence Data                                        */
    } LFRXDPAT2_b;
  } ;
  
  union {
    __IOM uint32_t LFRXDPAT3;                   /*!< (@ 0x0000000C) LF Pattern 3 Detector Sequence Data                        */
    
    struct {
      __IOM uint32_t LFCODEP3   : 16;           /*!< [15..0] LF Pattern 3 Sequence Data                                        */
    } LFRXDPAT3_b;
  } ;
  
  union {
    __IOM uint32_t LFDRXCFG0;                   /*!< (@ 0x00000010) LF Receiver Control Register 0                             */
    
    struct {
      __IOM uint32_t LFBBM      : 3;            /*!< [2..0] LF Baseband Processor Mode                                         */
      __IOM uint32_t WUONBUF    : 3;            /*!< [5..3] Configures the address of the data buffer on which the
                                                     databuffer wakeup-flag is set by the lf receiver. The wakup
                                                     has to be masked seperatly by the DEVCTRL.BF_MASK register.               */
      __IM  uint32_t            : 2;
      __IOM uint32_t CDCNT      : 6;            /*!< [13..8] Carrier Detect counter threshold.                                 */
      __IOM uint32_t TSBTOT     : 1;            /*!< [14..14] Terminate Syncsearch by Timeout Timer                            */
      __IOM uint32_t MANCODE    : 1;            /*!< [15..15] Manchester Code                                                  */
    } LFDRXCFG0_b;
  } ;
  
  union {
    __IOM uint32_t LFDRXCFG1;                   /*!< (@ 0x00000014) LF Receiver Control Register 1                             */
    
    struct {
      __IOM uint32_t PSEL0      : 1;            /*!< [0..0] Pattern match selection for Pattern 0                              */
      __IOM uint32_t PSEL1      : 1;            /*!< [1..1] Pattern match selection for Pattern 1                              */
      __IOM uint32_t PSEL2      : 1;            /*!< [2..2] Pattern match selection for Pattern 2                              */
      __IOM uint32_t PSEL3      : 1;            /*!< [3..3] Pattern match selection for Pattern 3                              */
      __IOM uint32_t PSL0       : 1;            /*!< [4..4] Pattern Sequence Length for Pattern 0                              */
      __IOM uint32_t PSL1       : 1;            /*!< [5..5] Pattern Sequence Length for Pattern 1                              */
      __IOM uint32_t PSL2       : 1;            /*!< [6..6] Pattern Sequence Length for Pattern 2                              */
      __IOM uint32_t PSL3       : 1;            /*!< [7..7] Pattern Sequence Length for Pattern 3                              */
      __IOM uint32_t LFDIV      : 6;            /*!< [13..8] LF Bitrate Divider                                                */
      __IM  uint32_t            : 1;
      __IOM uint32_t ENAGC      : 1;            /*!< [15..15] AGC block                                                        */
    } LFDRXCFG1_b;
  } ;
} LF_Retention_Type;                            /*!< Size = 24 (0x18)                                                          */



/* =========================================================================================================================== */
/* ================                                     System_Controller                                     ================ */
/* =========================================================================================================================== */


/**
  * @brief System Controller comprises digital power management (incl. resume events) (System_Controller)
  */

typedef struct {                                /*!< (@ 0x40001000) System_Controller Structure                                */
  
  union {
    __IOM uint32_t STMR;                        /*!< (@ 0x00000000) sampling timer                                             */
    
    struct {
      __IOM uint32_t STMRPERIOD : 19;           /*!< [18..0] sampling timer period = (STMRPERIOD +1)/MP-RC                     */
      __IM  uint32_t            : 12;
      __IOM uint32_t STMREN     : 1;            /*!< [31..31] Sampling Timer enable                                            */
    } STMR_b;
  } ;
  
  union {
    __IM  uint32_t STMRCNT;                     /*!< (@ 0x00000004) sampling timer counter value                               */
    
    struct {
      __IM  uint32_t CNTVAL     : 19;           /*!< [18..0] Reading from this register provides the current value
                                                     of sampling timer to FW/SW.                                               */
    } STMRCNT_b;
  } ;
  
  union {
    __IOM uint32_t RESUMEFLAGS;                 /*!< (@ 0x00000008) resume flags for customers                                 */
    
    struct {
      __IOM uint32_t RET0       : 1;            /*!< [0..0] resume caused by timer 0 (application timer), irrespective
                                                     its corresponding mask                                                    */
      __IOM uint32_t RET1       : 1;            /*!< [1..1] resume caused by timer 1 (application timer), irrespective
                                                     its corresponding mask                                                    */
      __IOM uint32_t RESTF      : 1;            /*!< [2..2] resume caused by sampling timer underflow event, irrespective
                                                     its corresponding mask                                                    */
      __IOM uint32_t EOC        : 1;            /*!< [3..3] End of ADC conversion (raw result available), irrespective
                                                     its corresponding mask                                                    */
    } RESUMEFLAGS_b;
  } ;
  
  union {
    __IOM uint32_t RESUMEMASK;                  /*!< (@ 0x0000000C) resume event mask for customers                            */
    
    struct {
      __IOM uint32_t RET0M      : 1;            /*!< [0..0] mask for resume event from timer 0                                 */
      __IOM uint32_t RET1M      : 1;            /*!< [1..1] mask for resume event from timer 1                                 */
      __IOM uint32_t RESTFM     : 1;            /*!< [2..2] mask for resume event from sampling timer                          */
      __IOM uint32_t REEOCM     : 1;            /*!< [3..3] mask for resume event from raw ADC conversion                      */
    } RESUMEMASK_b;
  } ;
  
  union {
    __IOM uint32_t SYSCCTRL;                    /*!< (@ 0x00000010) SYSC control                                               */
    
    struct {
      __IOM uint32_t DIVIC      : 3;            /*!< [2..0] CLK divider for System Clock                                       */
      __IM  uint32_t            : 28;
      __OM  uint32_t IDLE       : 1;            /*!< [31..31] this trigger bit will bring the device into idle state           */
    } SYSCCTRL_b;
  } ;
} System_Controller_Type;                       /*!< Size = 20 (0x14)                                                          */



/* =========================================================================================================================== */
/* ================                                     Wakeup_Controller                                     ================ */
/* =========================================================================================================================== */


/**
  * @brief Wake-up Controller (Wakeup_Controller)
  */

typedef struct {                                /*!< (@ 0x40000000) Wakeup_Controller Structure                                */
  
  union {
    __IOM uint32_t GPIO;                        /*!< (@ 0x00000000) GPIOs                                                      */
    
    struct {
      __IOM uint32_t PPD0       : 1;            /*!< [0..0] Port direction of PP0                                              */
      __IOM uint32_t PPD1       : 1;            /*!< [1..1] Port direction of PP1                                              */
      __IOM uint32_t PPD2       : 1;            /*!< [2..2] Port direction of PP2                                              */
      __IOM uint32_t PPD3       : 1;            /*!< [3..3] Port direction of PP3                                              */
      __IM  uint32_t            : 4;
      __IOM uint32_t PPO0       : 1;            /*!< [8..8] PP0 I/O-Port Output Data / Pulling Resistor                        */
      __IOM uint32_t PPO1       : 1;            /*!< [9..9] PP1 I/O-Port Output Data / Pulling Resistor                        */
      __IOM uint32_t PPO2       : 1;            /*!< [10..10] PP2 I/O-Port Output Data / Pulling Resistor                      */
      __IOM uint32_t PPO3       : 1;            /*!< [11..11] PP3 I/O-Port Output Data / Pulling Resistor                      */
      __IM  uint32_t            : 4;
      __IOM uint32_t PPULL0     : 1;            /*!< [16..16] PP0 Resistor setting                                             */
      __IOM uint32_t PPULL1     : 1;            /*!< [17..17] PP1 Resistor setting                                             */
      __IOM uint32_t PPULL2     : 1;            /*!< [18..18] PP2 Resistor setting                                             */
      __IOM uint32_t PPULL3     : 1;            /*!< [19..19] PP3 Resistor setting                                             */
      __IM  uint32_t            : 4;
      __IOM uint32_t PPIEN0     : 1;            /*!< [24..24] PP0 Input buffer enabled                                         */
      __IOM uint32_t PPIEN1     : 1;            /*!< [25..25] PP1 Input buffer enabled                                         */
      __IOM uint32_t PPIEN2     : 1;            /*!< [26..26] PP2 Input buffer enabled                                         */
      __IOM uint32_t PPIEN3     : 1;            /*!< [27..27] PP3 Input buffer enabled                                         */
    } GPIO_b;
  } ;
  
  union {
    __IOM uint32_t DEVSTATUS;                   /*!< (@ 0x00000004) Device status                                              */
    
    struct {
      __IOM uint32_t CD_FLAG    : 1;            /*!< [0..0] LF Carrier Detect Wakeup (Edge Sensitive)                          */
      __IOM uint32_t SYNC_FLAG  : 1;            /*!< [1..1] LF Sync Match Wakeup (Edge Sensitive)                              */
      __IOM uint32_t PM0_FLAG   : 1;            /*!< [2..2] LF Pattern 0 Match Wakeup (Edge Sensitive)                         */
      __IOM uint32_t PM1_FLAG   : 1;            /*!< [3..3] LF Pattern 1 Match Wakeup (Edge Sensitive)                         */
      __IOM uint32_t PM2_FLAG   : 1;            /*!< [4..4] LF Pattern 2 Match Wakeup (Edge Sensitive)                         */
      __IOM uint32_t PM3_FLAG   : 1;            /*!< [5..5] LF Pattern 3 Match Wakeup (Edge Sensitive)                         */
      __IOM uint32_t EOM_FLAG   : 1;            /*!< [6..6] LF End Of Message Wakeup (Edge Sensitive)                          */
      __IOM uint32_t BF_FLAG    : 1;            /*!< [7..7] LF Buffer Full Wakeup (Edge Sensitive)                             */
      __IOM uint32_t ITIM_FLAG  : 1;            /*!< [8..8] Interval Timer Wakeup (Edge Sensitive)                             */
      __IOM uint32_t EXT_FLAG   : 1;            /*!< [9..9] I/O-Port PP1/2 External Wakeup (Level Sensitive)                   */
      __IOM uint32_t LPMP_PEND  : 1;            /*!< [10..10] LPM pending flag (for FW)                                        */
      __IOM uint32_t LPMT_PEND  : 1;            /*!< [11..11] LPM pending flag (for FW)                                        */
      __IOM uint32_t LPMA_PEND  : 1;            /*!< [12..12] LPM pending flag (for FW)                                        */
      __IOM uint32_t LPMP_FLAG  : 1;            /*!< [13..13] LPM pressure Wakeup (for SW)                                     */
      __IOM uint32_t LPMT_FLAG  : 1;            /*!< [14..14] LPM temperature Wakeup (for SW)                                  */
      __IOM uint32_t LPMA_FLAG  : 1;            /*!< [15..15] LPM acceleration Wakeup (for SW)                                 */
      __IOM uint32_t BOD        : 1;            /*!< [16..16] Brown Out Detect                                                 */
      __IOM uint32_t ECC2       : 1;            /*!< [17..17] ECC two Bit failure Reset Flag                                   */
      __IOM uint32_t WDOG       : 1;            /*!< [18..18] Watchdog reset                                                   */
      __IOM uint32_t POR        : 1;            /*!< [19..19] Power On Reset Flag                                              */
      __IOM uint32_t SRESET     : 1;            /*!< [20..20] Software System Reset Flag                                       */
      __IOM uint32_t TDET       : 1;            /*!< [21..21] Wake-up by thermal shutdown release                              */
      __IOM uint32_t UVR        : 1;            /*!< [22..22] Under Voltage Flag                                               */
      __IOM uint32_t WUPDWN     : 1;            /*!< [23..23] Indicates a wakeup was triggered by one of the sources
                                                     in DEVSTATUS (*_FLAG), if it is not masked by corresponding
                                                     *_MASK bit in DEVCTRL.                                                    */
      __IM  uint32_t            : 3;
      __IM  uint32_t ITINIT_STATUS : 1;         /*!< [27..27] Status of initialization triggered by ITINIT                     */
      __IM  uint32_t LFINIT_STATUS : 1;         /*!< [28..28] Status of initialization triggered by LFINIT                     */
      __IM  uint32_t LFRXON     : 1;            /*!< [29..29] LFRX active (LF reset is disabled and the clock is
                                                     enabled)                                                                  */
    } DEVSTATUS_b;
  } ;
  
  union {
    __IOM uint32_t DEVCTRL;                     /*!< (@ 0x00000008) Device control                                             */
    
    struct {
      __IOM uint32_t CD_MASK    : 1;            /*!< [0..0] Disable LF Carrier Wakeup                                          */
      __IOM uint32_t SYNC_MASK  : 1;            /*!< [1..1] Disable LF Sync Match Wakeup                                       */
      __IOM uint32_t PM0_MASK   : 1;            /*!< [2..2] Disable LF Pattern 0 Match Wakeup                                  */
      __IOM uint32_t PM1_MASK   : 1;            /*!< [3..3] Disable LF Pattern 1 Match Wakeup                                  */
      __IOM uint32_t PM2_MASK   : 1;            /*!< [4..4] Disable LF Pattern 2 Match Wakeup                                  */
      __IOM uint32_t PM3_MASK   : 1;            /*!< [5..5] Disable LF Pattern 3 Match Wakeup                                  */
      __IOM uint32_t EOM_MASK   : 1;            /*!< [6..6] Disable LF End of Message Wakeup                                   */
      __IOM uint32_t BF_MASK    : 1;            /*!< [7..7] Disable LF Buffer Full Wakeup                                      */
      __IOM uint32_t ITIM_MASK  : 1;            /*!< [8..8] Disable Interval Timer Wakeup                                      */
      __IOM uint32_t EXT_MASK   : 1;            /*!< [9..9] Disable I/O-Port External Wakeup                                   */
      __IOM uint32_t LPMP_MASK  : 1;            /*!< [10..10] Disable LPM pressure wakeup                                      */
      __IOM uint32_t LPMT_MASK  : 1;            /*!< [11..11] Disable LPM temperature wakeup                                   */
      __IOM uint32_t LPMA_MASK  : 1;            /*!< [12..12] Disable LPM acceleration wakeup                                  */
      __IM  uint32_t            : 1;
      __IOM uint32_t WUP_PIN_SEL : 1;           /*!< [14..14] WakeUp Pin Selection (external device wake-up option)            */
      __IM  uint32_t            : 1;
      __OM  uint32_t ITINIT     : 1;            /*!< [16..16] Interval Timer Initialization                                    */
      __OM  uint32_t SOFTRESET  : 1;            /*!< [17..17] Software System Reset Trigger                                    */
      __IM  uint32_t            : 5;
      __IOM uint32_t I2CEN      : 1;            /*!< [23..23] I2C Enable                                                       */
      __IOM uint32_t LFOOTIMEN  : 1;            /*!< [24..24] Enable On/Off Timer when LFRXEN set                              */
      __IOM uint32_t LFRXEN     : 1;            /*!< [25..25] Enable LFRX                                                      */
      __IOM uint32_t LFMODEPOL  : 1;            /*!< [26..26] LFRX starting mode                                               */
      __IOM uint32_t LFOOTIMPOL : 1;            /*!< [27..27] LFRx ON/OFF start period                                         */
      __OM  uint32_t LFINIT     : 1;            /*!< [28..28] Initialize LFRX                                                  */
      __IOM uint32_t RETMEM0    : 1;            /*!< [29..29] Enable Retention Power for Retention Memory Block 0              */
      __IOM uint32_t RETMEM1    : 1;            /*!< [30..30] Enable Retention Power for Retention Memory Block 1              */
      __IOM uint32_t RETMEM2    : 1;            /*!< [31..31] Enable Retention Power for Retention Memory Block 2              */
    } DEVCTRL_b;
  } ;
} Wakeup_Controller_Type;                       /*!< Size = 12 (0xc)                                                           */


/** @} */ /* End of group Device_Peripheral_peripherals */


/* =========================================================================================================================== */
/* ================                          Device Specific Peripheral Address Map                           ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripheralAddr
  * @{
  */

#define Corelogic_BASE              0x40005000UL
#define Extended_Corelogic_BASE     0x40007000UL
#define LF_Receiver_BASE            0x40002000UL
#define LF_Retention_BASE           0x40003000UL
#define System_Controller_BASE      0x40001000UL
#define Wakeup_Controller_BASE      0x40000000UL

/** @} */ /* End of group Device_Peripheral_peripheralAddr */


/* =========================================================================================================================== */
/* ================                                  Peripheral declaration                                   ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_declaration
  * @{
  */

#define Corelogic                   ((Corelogic_Type*)         Corelogic_BASE)
#define Extended_Corelogic          ((Extended_Corelogic_Type*)  Extended_Corelogic_BASE)
#define LF_Receiver                 ((LF_Receiver_Type*)       LF_Receiver_BASE)
#define LF_Retention                ((LF_Retention_Type*)      LF_Retention_BASE)
#define System_Controller           ((System_Controller_Type*)  System_Controller_BASE)
#define Wakeup_Controller           ((Wakeup_Controller_Type*)  Wakeup_Controller_BASE)

/** @} */ /* End of group Device_Peripheral_declaration */


/* =========================================  End of section using anonymous unions  ========================================= */
#if defined (__CC_ARM)
  #pragma pop
#elif defined (__ICCARM__)
  /* leave anonymous unions enabled */
#elif (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic pop
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning restore
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#endif


/* =========================================================================================================================== */
/* ================                                Pos/Mask Peripheral Section                                ================ */
/* =========================================================================================================================== */


/** @addtogroup PosMask_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                         Corelogic                                         ================ */
/* =========================================================================================================================== */

/* ======================================================  TIMERCFG01  ======================================================= */
#define Corelogic_TIMERCFG01_T0CLKSEL_Pos (0UL)                     /*!< Corelogic TIMERCFG01: T0CLKSEL (Bit 0)                */
#define Corelogic_TIMERCFG01_T0CLKSEL_Msk (0xfUL)                   /*!< Corelogic TIMERCFG01: T0CLKSEL (Bitfield-Mask: 0x0f)  */
#define Corelogic_TIMERCFG01_T0DIVSEL_Pos (4UL)                     /*!< Corelogic TIMERCFG01: T0DIVSEL (Bit 4)                */
#define Corelogic_TIMERCFG01_T0DIVSEL_Msk (0xf0UL)                  /*!< Corelogic TIMERCFG01: T0DIVSEL (Bitfield-Mask: 0x0f)  */
#define Corelogic_TIMERCFG01_T0RUN_Pos    (8UL)                     /*!< Corelogic TIMERCFG01: T0RUN (Bit 8)                   */
#define Corelogic_TIMERCFG01_T0RUN_Msk    (0x100UL)                 /*!< Corelogic TIMERCFG01: T0RUN (Bitfield-Mask: 0x01)     */
#define Corelogic_TIMERCFG01_WDRES_Pos    (12UL)                    /*!< Corelogic TIMERCFG01: WDRES (Bit 12)                  */
#define Corelogic_TIMERCFG01_WDRES_Msk    (0x1000UL)                /*!< Corelogic TIMERCFG01: WDRES (Bitfield-Mask: 0x01)     */
#define Corelogic_TIMERCFG01_T1CLKSEL_Pos (16UL)                    /*!< Corelogic TIMERCFG01: T1CLKSEL (Bit 16)               */
#define Corelogic_TIMERCFG01_T1CLKSEL_Msk (0xf0000UL)               /*!< Corelogic TIMERCFG01: T1CLKSEL (Bitfield-Mask: 0x0f)  */
#define Corelogic_TIMERCFG01_T1DIVSEL_Pos (20UL)                    /*!< Corelogic TIMERCFG01: T1DIVSEL (Bit 20)               */
#define Corelogic_TIMERCFG01_T1DIVSEL_Msk (0xf00000UL)              /*!< Corelogic TIMERCFG01: T1DIVSEL (Bitfield-Mask: 0x0f)  */
#define Corelogic_TIMERCFG01_T1RUN_Pos    (24UL)                    /*!< Corelogic TIMERCFG01: T1RUN (Bit 24)                  */
#define Corelogic_TIMERCFG01_T1RUN_Msk    (0x1000000UL)             /*!< Corelogic TIMERCFG01: T1RUN (Bitfield-Mask: 0x01)     */
#define Corelogic_TIMERCFG01_T01MODE_Pos  (27UL)                    /*!< Corelogic TIMERCFG01: T01MODE (Bit 27)                */
#define Corelogic_TIMERCFG01_T01MODE_Msk  (0x38000000UL)            /*!< Corelogic TIMERCFG01: T01MODE (Bitfield-Mask: 0x07)   */
#define Corelogic_TIMERCFG01_T01EN_Pos    (31UL)                    /*!< Corelogic TIMERCFG01: T01EN (Bit 31)                  */
#define Corelogic_TIMERCFG01_T01EN_Msk    (0x80000000UL)            /*!< Corelogic TIMERCFG01: T01EN (Bitfield-Mask: 0x01)     */
/* ========================================================  TIMER01  ======================================================== */
#define Corelogic_TIMER01_T0L_Pos         (0UL)                     /*!< Corelogic TIMER01: T0L (Bit 0)                        */
#define Corelogic_TIMER01_T0L_Msk         (0xffUL)                  /*!< Corelogic TIMER01: T0L (Bitfield-Mask: 0xff)          */
#define Corelogic_TIMER01_T0H_Pos         (8UL)                     /*!< Corelogic TIMER01: T0H (Bit 8)                        */
#define Corelogic_TIMER01_T0H_Msk         (0xff00UL)                /*!< Corelogic TIMER01: T0H (Bitfield-Mask: 0xff)          */
#define Corelogic_TIMER01_T1L_Pos         (16UL)                    /*!< Corelogic TIMER01: T1L (Bit 16)                       */
#define Corelogic_TIMER01_T1L_Msk         (0xff0000UL)              /*!< Corelogic TIMER01: T1L (Bitfield-Mask: 0xff)          */
#define Corelogic_TIMER01_T1H_Pos         (24UL)                    /*!< Corelogic TIMER01: T1H (Bit 24)                       */
#define Corelogic_TIMER01_T1H_Msk         (0xff000000UL)            /*!< Corelogic TIMER01: T1H (Bitfield-Mask: 0xff)          */
/* =======================================================  COLFLAGS  ======================================================== */
#define Corelogic_COLFLAGS_T0FULL_Pos     (9UL)                     /*!< Corelogic COLFLAGS: T0FULL (Bit 9)                    */
#define Corelogic_COLFLAGS_T0FULL_Msk     (0x200UL)                 /*!< Corelogic COLFLAGS: T0FULL (Bitfield-Mask: 0x01)      */
#define Corelogic_COLFLAGS_T1FULL_Pos     (10UL)                    /*!< Corelogic COLFLAGS: T1FULL (Bit 10)                   */
#define Corelogic_COLFLAGS_T1FULL_Msk     (0x400UL)                 /*!< Corelogic COLFLAGS: T1FULL (Bitfield-Mask: 0x01)      */
#define Corelogic_COLFLAGS_ITSTATUS_Pos   (11UL)                    /*!< Corelogic COLFLAGS: ITSTATUS (Bit 11)                 */
#define Corelogic_COLFLAGS_ITSTATUS_Msk   (0xfffff800UL)            /*!< Corelogic COLFLAGS: ITSTATUS (Bitfield-Mask: 0x1fffff) */
/* =====================================================  HARDFAULTMASK  ===================================================== */
#define Corelogic_HARDFAULTMASK_HFMSFRSIZE_Pos (0UL)                /*!< Corelogic HARDFAULTMASK: HFMSFRSIZE (Bit 0)           */
#define Corelogic_HARDFAULTMASK_HFMSFRSIZE_Msk (0x1UL)              /*!< Corelogic HARDFAULTMASK: HFMSFRSIZE (Bitfield-Mask: 0x01) */
#define Corelogic_HARDFAULTMASK_HFMADDR_Pos (1UL)                   /*!< Corelogic HARDFAULTMASK: HFMADDR (Bit 1)              */
#define Corelogic_HARDFAULTMASK_HFMADDR_Msk (0x2UL)                 /*!< Corelogic HARDFAULTMASK: HFMADDR (Bitfield-Mask: 0x01) */
#define Corelogic_HARDFAULTMASK_HFMSFRPROT_Pos (2UL)                /*!< Corelogic HARDFAULTMASK: HFMSFRPROT (Bit 2)           */
#define Corelogic_HARDFAULTMASK_HFMSFRPROT_Msk (0x4UL)              /*!< Corelogic HARDFAULTMASK: HFMSFRPROT (Bitfield-Mask: 0x01) */
#define Corelogic_HARDFAULTMASK_HFMROMREAD_Pos (3UL)                /*!< Corelogic HARDFAULTMASK: HFMROMREAD (Bit 3)           */
#define Corelogic_HARDFAULTMASK_HFMROMREAD_Msk (0x8UL)              /*!< Corelogic HARDFAULTMASK: HFMROMREAD (Bitfield-Mask: 0x01) */
/* =======================================================  PROTCTRL  ======================================================== */
#define Corelogic_PROTCTRL_SFRPW_Pos      (0UL)                     /*!< Corelogic PROTCTRL: SFRPW (Bit 0)                     */
#define Corelogic_PROTCTRL_SFRPW_Msk      (0xffUL)                  /*!< Corelogic PROTCTRL: SFRPW (Bitfield-Mask: 0xff)       */
#define Corelogic_PROTCTRL_SFRLOCKED_Pos  (31UL)                    /*!< Corelogic PROTCTRL: SFRLOCKED (Bit 31)                */
#define Corelogic_PROTCTRL_SFRLOCKED_Msk  (0x80000000UL)            /*!< Corelogic PROTCTRL: SFRLOCKED (Bitfield-Mask: 0x01)   */


/* =========================================================================================================================== */
/* ================                                    Extended_Corelogic                                     ================ */
/* =========================================================================================================================== */

/* ========================================================  I2CDIN  ========================================================= */
#define Extended_Corelogic_I2CDIN_I2CDI_Pos (0UL)                   /*!< Extended_Corelogic I2CDIN: I2CDI (Bit 0)              */
#define Extended_Corelogic_I2CDIN_I2CDI_Msk (0xffUL)                /*!< Extended_Corelogic I2CDIN: I2CDI (Bitfield-Mask: 0xff) */
/* ========================================================  I2CDOUT  ======================================================== */
#define Extended_Corelogic_I2CDOUT_I2CDO_Pos (0UL)                  /*!< Extended_Corelogic I2CDOUT: I2CDO (Bit 0)             */
#define Extended_Corelogic_I2CDOUT_I2CDO_Msk (0xffUL)               /*!< Extended_Corelogic I2CDOUT: I2CDO (Bitfield-Mask: 0xff) */
/* ========================================================  I2CCFG  ========================================================= */
#define Extended_Corelogic_I2CCFG_SEN_Pos (0UL)                     /*!< Extended_Corelogic I2CCFG: SEN (Bit 0)                */
#define Extended_Corelogic_I2CCFG_SEN_Msk (0x1UL)                   /*!< Extended_Corelogic I2CCFG: SEN (Bitfield-Mask: 0x01)  */
#define Extended_Corelogic_I2CCFG_RSEN_Pos (1UL)                    /*!< Extended_Corelogic I2CCFG: RSEN (Bit 1)               */
#define Extended_Corelogic_I2CCFG_RSEN_Msk (0x2UL)                  /*!< Extended_Corelogic I2CCFG: RSEN (Bitfield-Mask: 0x01) */
#define Extended_Corelogic_I2CCFG_PEN_Pos (2UL)                     /*!< Extended_Corelogic I2CCFG: PEN (Bit 2)                */
#define Extended_Corelogic_I2CCFG_PEN_Msk (0x4UL)                   /*!< Extended_Corelogic I2CCFG: PEN (Bitfield-Mask: 0x01)  */
#define Extended_Corelogic_I2CCFG_ACKEN_Pos (3UL)                   /*!< Extended_Corelogic I2CCFG: ACKEN (Bit 3)              */
#define Extended_Corelogic_I2CCFG_ACKEN_Msk (0x8UL)                 /*!< Extended_Corelogic I2CCFG: ACKEN (Bitfield-Mask: 0x01) */
#define Extended_Corelogic_I2CCFG_ACKDT_Pos (4UL)                   /*!< Extended_Corelogic I2CCFG: ACKDT (Bit 4)              */
#define Extended_Corelogic_I2CCFG_ACKDT_Msk (0x10UL)                /*!< Extended_Corelogic I2CCFG: ACKDT (Bitfield-Mask: 0x01) */
#define Extended_Corelogic_I2CCFG_GCEN_Pos (6UL)                    /*!< Extended_Corelogic I2CCFG: GCEN (Bit 6)               */
#define Extended_Corelogic_I2CCFG_GCEN_Msk (0x40UL)                 /*!< Extended_Corelogic I2CCFG: GCEN (Bitfield-Mask: 0x01) */
#define Extended_Corelogic_I2CCFG_FS_Pos  (7UL)                     /*!< Extended_Corelogic I2CCFG: FS (Bit 7)                 */
#define Extended_Corelogic_I2CCFG_FS_Msk  (0x80UL)                  /*!< Extended_Corelogic I2CCFG: FS (Bitfield-Mask: 0x01)   */
#define Extended_Corelogic_I2CCFG_BDR_Pos (8UL)                     /*!< Extended_Corelogic I2CCFG: BDR (Bit 8)                */
#define Extended_Corelogic_I2CCFG_BDR_Msk (0xff00UL)                /*!< Extended_Corelogic I2CCFG: BDR (Bitfield-Mask: 0xff)  */
/* =========================================================  I2CS  ========================================================== */
#define Extended_Corelogic_I2CS_I2C_RBF_Pos (0UL)                   /*!< Extended_Corelogic I2CS: I2C_RBF (Bit 0)              */
#define Extended_Corelogic_I2CS_I2C_RBF_Msk (0x1UL)                 /*!< Extended_Corelogic I2CS: I2C_RBF (Bitfield-Mask: 0x01) */
#define Extended_Corelogic_I2CS_I2C_TBF_Pos (1UL)                   /*!< Extended_Corelogic I2CS: I2C_TBF (Bit 1)              */
#define Extended_Corelogic_I2CS_I2C_TBF_Msk (0x2UL)                 /*!< Extended_Corelogic I2CS: I2C_TBF (Bitfield-Mask: 0x01) */
#define Extended_Corelogic_I2CS_I2C_RACK_Pos (2UL)                  /*!< Extended_Corelogic I2CS: I2C_RACK (Bit 2)             */
#define Extended_Corelogic_I2CS_I2C_RACK_Msk (0x4UL)                /*!< Extended_Corelogic I2CS: I2C_RACK (Bitfield-Mask: 0x01) */
#define Extended_Corelogic_I2CS_I2C_RNW_Pos (3UL)                   /*!< Extended_Corelogic I2CS: I2C_RNW (Bit 3)              */
#define Extended_Corelogic_I2CS_I2C_RNW_Msk (0x8UL)                 /*!< Extended_Corelogic I2CS: I2C_RNW (Bitfield-Mask: 0x01) */
#define Extended_Corelogic_I2CS_I2C_S_Pos (4UL)                     /*!< Extended_Corelogic I2CS: I2C_S (Bit 4)                */
#define Extended_Corelogic_I2CS_I2C_S_Msk (0x10UL)                  /*!< Extended_Corelogic I2CS: I2C_S (Bitfield-Mask: 0x01)  */
#define Extended_Corelogic_I2CS_I2C_OV_Pos (5UL)                    /*!< Extended_Corelogic I2CS: I2C_OV (Bit 5)               */
#define Extended_Corelogic_I2CS_I2C_OV_Msk (0x20UL)                 /*!< Extended_Corelogic I2CS: I2C_OV (Bitfield-Mask: 0x01) */
#define Extended_Corelogic_I2CS_I2C_CD_Pos (6UL)                    /*!< Extended_Corelogic I2CS: I2C_CD (Bit 6)               */
#define Extended_Corelogic_I2CS_I2C_CD_Msk (0x40UL)                 /*!< Extended_Corelogic I2CS: I2C_CD (Bitfield-Mask: 0x01) */
#define Extended_Corelogic_I2CS_I2C_AM_Pos (7UL)                    /*!< Extended_Corelogic I2CS: I2C_AM (Bit 7)               */
#define Extended_Corelogic_I2CS_I2C_AM_Msk (0x80UL)                 /*!< Extended_Corelogic I2CS: I2C_AM (Bitfield-Mask: 0x01) */
/* =========================================================  P1IN  ========================================================== */
#define Extended_Corelogic_P1IN_PPI0_Pos  (0UL)                     /*!< Extended_Corelogic P1IN: PPI0 (Bit 0)                 */
#define Extended_Corelogic_P1IN_PPI0_Msk  (0x1UL)                   /*!< Extended_Corelogic P1IN: PPI0 (Bitfield-Mask: 0x01)   */
#define Extended_Corelogic_P1IN_PPI1_Pos  (1UL)                     /*!< Extended_Corelogic P1IN: PPI1 (Bit 1)                 */
#define Extended_Corelogic_P1IN_PPI1_Msk  (0x2UL)                   /*!< Extended_Corelogic P1IN: PPI1 (Bitfield-Mask: 0x01)   */
#define Extended_Corelogic_P1IN_PPI2_Pos  (2UL)                     /*!< Extended_Corelogic P1IN: PPI2 (Bit 2)                 */
#define Extended_Corelogic_P1IN_PPI2_Msk  (0x4UL)                   /*!< Extended_Corelogic P1IN: PPI2 (Bitfield-Mask: 0x01)   */
#define Extended_Corelogic_P1IN_PPI3_Pos  (3UL)                     /*!< Extended_Corelogic P1IN: PPI3 (Bit 3)                 */
#define Extended_Corelogic_P1IN_PPI3_Msk  (0x8UL)                   /*!< Extended_Corelogic P1IN: PPI3 (Bitfield-Mask: 0x01)   */


/* =========================================================================================================================== */
/* ================                                        LF_Receiver                                        ================ */
/* =========================================================================================================================== */

/* =======================================================  LFDRXBUF0  ======================================================= */
#define LF_Receiver_LFDRXBUF0_LFRXB0_Pos  (0UL)                     /*!< LF_Receiver LFDRXBUF0: LFRXB0 (Bit 0)                 */
#define LF_Receiver_LFDRXBUF0_LFRXB0_Msk  (0xffUL)                  /*!< LF_Receiver LFDRXBUF0: LFRXB0 (Bitfield-Mask: 0xff)   */
#define LF_Receiver_LFDRXBUF0_LFRXB1_Pos  (8UL)                     /*!< LF_Receiver LFDRXBUF0: LFRXB1 (Bit 8)                 */
#define LF_Receiver_LFDRXBUF0_LFRXB1_Msk  (0xff00UL)                /*!< LF_Receiver LFDRXBUF0: LFRXB1 (Bitfield-Mask: 0xff)   */
#define LF_Receiver_LFDRXBUF0_LFRXB2_Pos  (16UL)                    /*!< LF_Receiver LFDRXBUF0: LFRXB2 (Bit 16)                */
#define LF_Receiver_LFDRXBUF0_LFRXB2_Msk  (0xff0000UL)              /*!< LF_Receiver LFDRXBUF0: LFRXB2 (Bitfield-Mask: 0xff)   */
#define LF_Receiver_LFDRXBUF0_LFRXB3_Pos  (24UL)                    /*!< LF_Receiver LFDRXBUF0: LFRXB3 (Bit 24)                */
#define LF_Receiver_LFDRXBUF0_LFRXB3_Msk  (0xff000000UL)            /*!< LF_Receiver LFDRXBUF0: LFRXB3 (Bitfield-Mask: 0xff)   */
/* =======================================================  LFDRXBUF1  ======================================================= */
#define LF_Receiver_LFDRXBUF1_LFRXB4_Pos  (0UL)                     /*!< LF_Receiver LFDRXBUF1: LFRXB4 (Bit 0)                 */
#define LF_Receiver_LFDRXBUF1_LFRXB4_Msk  (0xffUL)                  /*!< LF_Receiver LFDRXBUF1: LFRXB4 (Bitfield-Mask: 0xff)   */
#define LF_Receiver_LFDRXBUF1_LFRXB5_Pos  (8UL)                     /*!< LF_Receiver LFDRXBUF1: LFRXB5 (Bit 8)                 */
#define LF_Receiver_LFDRXBUF1_LFRXB5_Msk  (0xff00UL)                /*!< LF_Receiver LFDRXBUF1: LFRXB5 (Bitfield-Mask: 0xff)   */
#define LF_Receiver_LFDRXBUF1_LFRXB6_Pos  (16UL)                    /*!< LF_Receiver LFDRXBUF1: LFRXB6 (Bit 16)                */
#define LF_Receiver_LFDRXBUF1_LFRXB6_Msk  (0xff0000UL)              /*!< LF_Receiver LFDRXBUF1: LFRXB6 (Bitfield-Mask: 0xff)   */
#define LF_Receiver_LFDRXBUF1_LFRXB7_Pos  (24UL)                    /*!< LF_Receiver LFDRXBUF1: LFRXB7 (Bit 24)                */
#define LF_Receiver_LFDRXBUF1_LFRXB7_Msk  (0xff000000UL)            /*!< LF_Receiver LFDRXBUF1: LFRXB7 (Bitfield-Mask: 0xff)   */
/* =======================================================  LFDRXINFO  ======================================================= */
#define LF_Receiver_LFDRXINFO_ERRB0_Pos   (0UL)                     /*!< LF_Receiver LFDRXINFO: ERRB0 (Bit 0)                  */
#define LF_Receiver_LFDRXINFO_ERRB0_Msk   (0x1UL)                   /*!< LF_Receiver LFDRXINFO: ERRB0 (Bitfield-Mask: 0x01)    */
#define LF_Receiver_LFDRXINFO_ERRB1_Pos   (1UL)                     /*!< LF_Receiver LFDRXINFO: ERRB1 (Bit 1)                  */
#define LF_Receiver_LFDRXINFO_ERRB1_Msk   (0x2UL)                   /*!< LF_Receiver LFDRXINFO: ERRB1 (Bitfield-Mask: 0x01)    */
#define LF_Receiver_LFDRXINFO_ERRB2_Pos   (2UL)                     /*!< LF_Receiver LFDRXINFO: ERRB2 (Bit 2)                  */
#define LF_Receiver_LFDRXINFO_ERRB2_Msk   (0x4UL)                   /*!< LF_Receiver LFDRXINFO: ERRB2 (Bitfield-Mask: 0x01)    */
#define LF_Receiver_LFDRXINFO_ERRB3_Pos   (3UL)                     /*!< LF_Receiver LFDRXINFO: ERRB3 (Bit 3)                  */
#define LF_Receiver_LFDRXINFO_ERRB3_Msk   (0x8UL)                   /*!< LF_Receiver LFDRXINFO: ERRB3 (Bitfield-Mask: 0x01)    */
#define LF_Receiver_LFDRXINFO_ERRB4_Pos   (4UL)                     /*!< LF_Receiver LFDRXINFO: ERRB4 (Bit 4)                  */
#define LF_Receiver_LFDRXINFO_ERRB4_Msk   (0x10UL)                  /*!< LF_Receiver LFDRXINFO: ERRB4 (Bitfield-Mask: 0x01)    */
#define LF_Receiver_LFDRXINFO_ERRB5_Pos   (5UL)                     /*!< LF_Receiver LFDRXINFO: ERRB5 (Bit 5)                  */
#define LF_Receiver_LFDRXINFO_ERRB5_Msk   (0x20UL)                  /*!< LF_Receiver LFDRXINFO: ERRB5 (Bitfield-Mask: 0x01)    */
#define LF_Receiver_LFDRXINFO_ERRB6_Pos   (6UL)                     /*!< LF_Receiver LFDRXINFO: ERRB6 (Bit 6)                  */
#define LF_Receiver_LFDRXINFO_ERRB6_Msk   (0x40UL)                  /*!< LF_Receiver LFDRXINFO: ERRB6 (Bitfield-Mask: 0x01)    */
#define LF_Receiver_LFDRXINFO_ERRB7_Pos   (7UL)                     /*!< LF_Receiver LFDRXINFO: ERRB7 (Bit 7)                  */
#define LF_Receiver_LFDRXINFO_ERRB7_Msk   (0x80UL)                  /*!< LF_Receiver LFDRXINFO: ERRB7 (Bitfield-Mask: 0x01)    */
#define LF_Receiver_LFDRXINFO_STATB0_Pos  (8UL)                     /*!< LF_Receiver LFDRXINFO: STATB0 (Bit 8)                 */
#define LF_Receiver_LFDRXINFO_STATB0_Msk  (0x100UL)                 /*!< LF_Receiver LFDRXINFO: STATB0 (Bitfield-Mask: 0x01)   */
#define LF_Receiver_LFDRXINFO_STATB1_Pos  (9UL)                     /*!< LF_Receiver LFDRXINFO: STATB1 (Bit 9)                 */
#define LF_Receiver_LFDRXINFO_STATB1_Msk  (0x200UL)                 /*!< LF_Receiver LFDRXINFO: STATB1 (Bitfield-Mask: 0x01)   */
#define LF_Receiver_LFDRXINFO_STATB2_Pos  (10UL)                    /*!< LF_Receiver LFDRXINFO: STATB2 (Bit 10)                */
#define LF_Receiver_LFDRXINFO_STATB2_Msk  (0x400UL)                 /*!< LF_Receiver LFDRXINFO: STATB2 (Bitfield-Mask: 0x01)   */
#define LF_Receiver_LFDRXINFO_STATB3_Pos  (11UL)                    /*!< LF_Receiver LFDRXINFO: STATB3 (Bit 11)                */
#define LF_Receiver_LFDRXINFO_STATB3_Msk  (0x800UL)                 /*!< LF_Receiver LFDRXINFO: STATB3 (Bitfield-Mask: 0x01)   */
#define LF_Receiver_LFDRXINFO_STATB4_Pos  (12UL)                    /*!< LF_Receiver LFDRXINFO: STATB4 (Bit 12)                */
#define LF_Receiver_LFDRXINFO_STATB4_Msk  (0x1000UL)                /*!< LF_Receiver LFDRXINFO: STATB4 (Bitfield-Mask: 0x01)   */
#define LF_Receiver_LFDRXINFO_STATB5_Pos  (13UL)                    /*!< LF_Receiver LFDRXINFO: STATB5 (Bit 13)                */
#define LF_Receiver_LFDRXINFO_STATB5_Msk  (0x2000UL)                /*!< LF_Receiver LFDRXINFO: STATB5 (Bitfield-Mask: 0x01)   */
#define LF_Receiver_LFDRXINFO_STATB6_Pos  (14UL)                    /*!< LF_Receiver LFDRXINFO: STATB6 (Bit 14)                */
#define LF_Receiver_LFDRXINFO_STATB6_Msk  (0x4000UL)                /*!< LF_Receiver LFDRXINFO: STATB6 (Bitfield-Mask: 0x01)   */
#define LF_Receiver_LFDRXINFO_STATB7_Pos  (15UL)                    /*!< LF_Receiver LFDRXINFO: STATB7 (Bit 15)                */
#define LF_Receiver_LFDRXINFO_STATB7_Msk  (0x8000UL)                /*!< LF_Receiver LFDRXINFO: STATB7 (Bitfield-Mask: 0x01)   */
#define LF_Receiver_LFDRXINFO_TOM_Pos     (16UL)                    /*!< LF_Receiver LFDRXINFO: TOM (Bit 16)                   */
#define LF_Receiver_LFDRXINFO_TOM_Msk     (0x10000UL)               /*!< LF_Receiver LFDRXINFO: TOM (Bitfield-Mask: 0x01)      */
#define LF_Receiver_LFDRXINFO_DECERR_Pos  (24UL)                    /*!< LF_Receiver LFDRXINFO: DECERR (Bit 24)                */
#define LF_Receiver_LFDRXINFO_DECERR_Msk  (0x1000000UL)             /*!< LF_Receiver LFDRXINFO: DECERR (Bitfield-Mask: 0x01)   */
#define LF_Receiver_LFDRXINFO_LFBP_Pos    (25UL)                    /*!< LF_Receiver LFDRXINFO: LFBP (Bit 25)                  */
#define LF_Receiver_LFDRXINFO_LFBP_Msk    (0x2000000UL)             /*!< LF_Receiver LFDRXINFO: LFBP (Bitfield-Mask: 0x01)     */
#define LF_Receiver_LFDRXINFO_LFOV_Pos    (26UL)                    /*!< LF_Receiver LFDRXINFO: LFOV (Bit 26)                  */
#define LF_Receiver_LFDRXINFO_LFOV_Msk    (0x4000000UL)             /*!< LF_Receiver LFDRXINFO: LFOV (Bitfield-Mask: 0x01)     */
#define LF_Receiver_LFDRXINFO_LFDATA_Pos  (27UL)                    /*!< LF_Receiver LFDRXINFO: LFDATA (Bit 27)                */
#define LF_Receiver_LFDRXINFO_LFDATA_Msk  (0x8000000UL)             /*!< LF_Receiver LFDRXINFO: LFDATA (Bitfield-Mask: 0x01)   */
#define LF_Receiver_LFDRXINFO_SYNCIND_Pos (28UL)                    /*!< LF_Receiver LFDRXINFO: SYNCIND (Bit 28)               */
#define LF_Receiver_LFDRXINFO_SYNCIND_Msk (0x10000000UL)            /*!< LF_Receiver LFDRXINFO: SYNCIND (Bitfield-Mask: 0x01)  */
#define LF_Receiver_LFDRXINFO_SENSTRAW_Pos (29UL)                   /*!< LF_Receiver LFDRXINFO: SENSTRAW (Bit 29)              */
#define LF_Receiver_LFDRXINFO_SENSTRAW_Msk (0x20000000UL)           /*!< LF_Receiver LFDRXINFO: SENSTRAW (Bitfield-Mask: 0x01) */
#define LF_Receiver_LFDRXINFO_CDRAW_Pos   (30UL)                    /*!< LF_Receiver LFDRXINFO: CDRAW (Bit 30)                 */
#define LF_Receiver_LFDRXINFO_CDRAW_Msk   (0x40000000UL)            /*!< LF_Receiver LFDRXINFO: CDRAW (Bitfield-Mask: 0x01)    */
#define LF_Receiver_LFDRXINFO_DATARAW_Pos (31UL)                    /*!< LF_Receiver LFDRXINFO: DATARAW (Bit 31)               */
#define LF_Receiver_LFDRXINFO_DATARAW_Msk (0x80000000UL)            /*!< LF_Receiver LFDRXINFO: DATARAW (Bitfield-Mask: 0x01)  */


/* =========================================================================================================================== */
/* ================                                       LF_Retention                                        ================ */
/* =========================================================================================================================== */

/* =======================================================  LFRXDPAT0  ======================================================= */
#define LF_Retention_LFRXDPAT0_LFCODEP0_Pos (0UL)                   /*!< LF_Retention LFRXDPAT0: LFCODEP0 (Bit 0)              */
#define LF_Retention_LFRXDPAT0_LFCODEP0_Msk (0xffffUL)              /*!< LF_Retention LFRXDPAT0: LFCODEP0 (Bitfield-Mask: 0xffff) */
/* =======================================================  LFRXDPAT1  ======================================================= */
#define LF_Retention_LFRXDPAT1_LFCODEP1_Pos (0UL)                   /*!< LF_Retention LFRXDPAT1: LFCODEP1 (Bit 0)              */
#define LF_Retention_LFRXDPAT1_LFCODEP1_Msk (0xffffUL)              /*!< LF_Retention LFRXDPAT1: LFCODEP1 (Bitfield-Mask: 0xffff) */
/* =======================================================  LFRXDPAT2  ======================================================= */
#define LF_Retention_LFRXDPAT2_LFCODEP2_Pos (0UL)                   /*!< LF_Retention LFRXDPAT2: LFCODEP2 (Bit 0)              */
#define LF_Retention_LFRXDPAT2_LFCODEP2_Msk (0xffffUL)              /*!< LF_Retention LFRXDPAT2: LFCODEP2 (Bitfield-Mask: 0xffff) */
/* =======================================================  LFRXDPAT3  ======================================================= */
#define LF_Retention_LFRXDPAT3_LFCODEP3_Pos (0UL)                   /*!< LF_Retention LFRXDPAT3: LFCODEP3 (Bit 0)              */
#define LF_Retention_LFRXDPAT3_LFCODEP3_Msk (0xffffUL)              /*!< LF_Retention LFRXDPAT3: LFCODEP3 (Bitfield-Mask: 0xffff) */
/* =======================================================  LFDRXCFG0  ======================================================= */
#define LF_Retention_LFDRXCFG0_LFBBM_Pos  (0UL)                     /*!< LF_Retention LFDRXCFG0: LFBBM (Bit 0)                 */
#define LF_Retention_LFDRXCFG0_LFBBM_Msk  (0x7UL)                   /*!< LF_Retention LFDRXCFG0: LFBBM (Bitfield-Mask: 0x07)   */
#define LF_Retention_LFDRXCFG0_WUONBUF_Pos (3UL)                    /*!< LF_Retention LFDRXCFG0: WUONBUF (Bit 3)               */
#define LF_Retention_LFDRXCFG0_WUONBUF_Msk (0x38UL)                 /*!< LF_Retention LFDRXCFG0: WUONBUF (Bitfield-Mask: 0x07) */
#define LF_Retention_LFDRXCFG0_CDCNT_Pos  (8UL)                     /*!< LF_Retention LFDRXCFG0: CDCNT (Bit 8)                 */
#define LF_Retention_LFDRXCFG0_CDCNT_Msk  (0x3f00UL)                /*!< LF_Retention LFDRXCFG0: CDCNT (Bitfield-Mask: 0x3f)   */
#define LF_Retention_LFDRXCFG0_TSBTOT_Pos (14UL)                    /*!< LF_Retention LFDRXCFG0: TSBTOT (Bit 14)               */
#define LF_Retention_LFDRXCFG0_TSBTOT_Msk (0x4000UL)                /*!< LF_Retention LFDRXCFG0: TSBTOT (Bitfield-Mask: 0x01)  */
#define LF_Retention_LFDRXCFG0_MANCODE_Pos (15UL)                   /*!< LF_Retention LFDRXCFG0: MANCODE (Bit 15)              */
#define LF_Retention_LFDRXCFG0_MANCODE_Msk (0x8000UL)               /*!< LF_Retention LFDRXCFG0: MANCODE (Bitfield-Mask: 0x01) */
/* =======================================================  LFDRXCFG1  ======================================================= */
#define LF_Retention_LFDRXCFG1_PSEL0_Pos  (0UL)                     /*!< LF_Retention LFDRXCFG1: PSEL0 (Bit 0)                 */
#define LF_Retention_LFDRXCFG1_PSEL0_Msk  (0x1UL)                   /*!< LF_Retention LFDRXCFG1: PSEL0 (Bitfield-Mask: 0x01)   */
#define LF_Retention_LFDRXCFG1_PSEL1_Pos  (1UL)                     /*!< LF_Retention LFDRXCFG1: PSEL1 (Bit 1)                 */
#define LF_Retention_LFDRXCFG1_PSEL1_Msk  (0x2UL)                   /*!< LF_Retention LFDRXCFG1: PSEL1 (Bitfield-Mask: 0x01)   */
#define LF_Retention_LFDRXCFG1_PSEL2_Pos  (2UL)                     /*!< LF_Retention LFDRXCFG1: PSEL2 (Bit 2)                 */
#define LF_Retention_LFDRXCFG1_PSEL2_Msk  (0x4UL)                   /*!< LF_Retention LFDRXCFG1: PSEL2 (Bitfield-Mask: 0x01)   */
#define LF_Retention_LFDRXCFG1_PSEL3_Pos  (3UL)                     /*!< LF_Retention LFDRXCFG1: PSEL3 (Bit 3)                 */
#define LF_Retention_LFDRXCFG1_PSEL3_Msk  (0x8UL)                   /*!< LF_Retention LFDRXCFG1: PSEL3 (Bitfield-Mask: 0x01)   */
#define LF_Retention_LFDRXCFG1_PSL0_Pos   (4UL)                     /*!< LF_Retention LFDRXCFG1: PSL0 (Bit 4)                  */
#define LF_Retention_LFDRXCFG1_PSL0_Msk   (0x10UL)                  /*!< LF_Retention LFDRXCFG1: PSL0 (Bitfield-Mask: 0x01)    */
#define LF_Retention_LFDRXCFG1_PSL1_Pos   (5UL)                     /*!< LF_Retention LFDRXCFG1: PSL1 (Bit 5)                  */
#define LF_Retention_LFDRXCFG1_PSL1_Msk   (0x20UL)                  /*!< LF_Retention LFDRXCFG1: PSL1 (Bitfield-Mask: 0x01)    */
#define LF_Retention_LFDRXCFG1_PSL2_Pos   (6UL)                     /*!< LF_Retention LFDRXCFG1: PSL2 (Bit 6)                  */
#define LF_Retention_LFDRXCFG1_PSL2_Msk   (0x40UL)                  /*!< LF_Retention LFDRXCFG1: PSL2 (Bitfield-Mask: 0x01)    */
#define LF_Retention_LFDRXCFG1_PSL3_Pos   (7UL)                     /*!< LF_Retention LFDRXCFG1: PSL3 (Bit 7)                  */
#define LF_Retention_LFDRXCFG1_PSL3_Msk   (0x80UL)                  /*!< LF_Retention LFDRXCFG1: PSL3 (Bitfield-Mask: 0x01)    */
#define LF_Retention_LFDRXCFG1_LFDIV_Pos  (8UL)                     /*!< LF_Retention LFDRXCFG1: LFDIV (Bit 8)                 */
#define LF_Retention_LFDRXCFG1_LFDIV_Msk  (0x3f00UL)                /*!< LF_Retention LFDRXCFG1: LFDIV (Bitfield-Mask: 0x3f)   */
#define LF_Retention_LFDRXCFG1_ENAGC_Pos  (15UL)                    /*!< LF_Retention LFDRXCFG1: ENAGC (Bit 15)                */
#define LF_Retention_LFDRXCFG1_ENAGC_Msk  (0x8000UL)                /*!< LF_Retention LFDRXCFG1: ENAGC (Bitfield-Mask: 0x01)   */


/* =========================================================================================================================== */
/* ================                                     System_Controller                                     ================ */
/* =========================================================================================================================== */

/* =========================================================  STMR  ========================================================== */
#define System_Controller_STMR_STMRPERIOD_Pos (0UL)                 /*!< System_Controller STMR: STMRPERIOD (Bit 0)            */
#define System_Controller_STMR_STMRPERIOD_Msk (0x7ffffUL)           /*!< System_Controller STMR: STMRPERIOD (Bitfield-Mask: 0x7ffff) */
#define System_Controller_STMR_STMREN_Pos (31UL)                    /*!< System_Controller STMR: STMREN (Bit 31)               */
#define System_Controller_STMR_STMREN_Msk (0x80000000UL)            /*!< System_Controller STMR: STMREN (Bitfield-Mask: 0x01)  */
/* ========================================================  STMRCNT  ======================================================== */
#define System_Controller_STMRCNT_CNTVAL_Pos (0UL)                  /*!< System_Controller STMRCNT: CNTVAL (Bit 0)             */
#define System_Controller_STMRCNT_CNTVAL_Msk (0x7ffffUL)            /*!< System_Controller STMRCNT: CNTVAL (Bitfield-Mask: 0x7ffff) */
/* ======================================================  RESUMEFLAGS  ====================================================== */
#define System_Controller_RESUMEFLAGS_RET0_Pos (0UL)                /*!< System_Controller RESUMEFLAGS: RET0 (Bit 0)           */
#define System_Controller_RESUMEFLAGS_RET0_Msk (0x1UL)              /*!< System_Controller RESUMEFLAGS: RET0 (Bitfield-Mask: 0x01) */
#define System_Controller_RESUMEFLAGS_RET1_Pos (1UL)                /*!< System_Controller RESUMEFLAGS: RET1 (Bit 1)           */
#define System_Controller_RESUMEFLAGS_RET1_Msk (0x2UL)              /*!< System_Controller RESUMEFLAGS: RET1 (Bitfield-Mask: 0x01) */
#define System_Controller_RESUMEFLAGS_RESTF_Pos (2UL)               /*!< System_Controller RESUMEFLAGS: RESTF (Bit 2)          */
#define System_Controller_RESUMEFLAGS_RESTF_Msk (0x4UL)             /*!< System_Controller RESUMEFLAGS: RESTF (Bitfield-Mask: 0x01) */
#define System_Controller_RESUMEFLAGS_EOC_Pos (3UL)                 /*!< System_Controller RESUMEFLAGS: EOC (Bit 3)            */
#define System_Controller_RESUMEFLAGS_EOC_Msk (0x8UL)               /*!< System_Controller RESUMEFLAGS: EOC (Bitfield-Mask: 0x01) */
/* ======================================================  RESUMEMASK  ======================================================= */
#define System_Controller_RESUMEMASK_RET0M_Pos (0UL)                /*!< System_Controller RESUMEMASK: RET0M (Bit 0)           */
#define System_Controller_RESUMEMASK_RET0M_Msk (0x1UL)              /*!< System_Controller RESUMEMASK: RET0M (Bitfield-Mask: 0x01) */
#define System_Controller_RESUMEMASK_RET1M_Pos (1UL)                /*!< System_Controller RESUMEMASK: RET1M (Bit 1)           */
#define System_Controller_RESUMEMASK_RET1M_Msk (0x2UL)              /*!< System_Controller RESUMEMASK: RET1M (Bitfield-Mask: 0x01) */
#define System_Controller_RESUMEMASK_RESTFM_Pos (2UL)               /*!< System_Controller RESUMEMASK: RESTFM (Bit 2)          */
#define System_Controller_RESUMEMASK_RESTFM_Msk (0x4UL)             /*!< System_Controller RESUMEMASK: RESTFM (Bitfield-Mask: 0x01) */
#define System_Controller_RESUMEMASK_REEOCM_Pos (3UL)               /*!< System_Controller RESUMEMASK: REEOCM (Bit 3)          */
#define System_Controller_RESUMEMASK_REEOCM_Msk (0x8UL)             /*!< System_Controller RESUMEMASK: REEOCM (Bitfield-Mask: 0x01) */
/* =======================================================  SYSCCTRL  ======================================================== */
#define System_Controller_SYSCCTRL_DIVIC_Pos (0UL)                  /*!< System_Controller SYSCCTRL: DIVIC (Bit 0)             */
#define System_Controller_SYSCCTRL_DIVIC_Msk (0x7UL)                /*!< System_Controller SYSCCTRL: DIVIC (Bitfield-Mask: 0x07) */
#define System_Controller_SYSCCTRL_IDLE_Pos (31UL)                  /*!< System_Controller SYSCCTRL: IDLE (Bit 31)             */
#define System_Controller_SYSCCTRL_IDLE_Msk (0x80000000UL)          /*!< System_Controller SYSCCTRL: IDLE (Bitfield-Mask: 0x01) */


/* =========================================================================================================================== */
/* ================                                     Wakeup_Controller                                     ================ */
/* =========================================================================================================================== */

/* =========================================================  GPIO  ========================================================== */
#define Wakeup_Controller_GPIO_PPD0_Pos   (0UL)                     /*!< Wakeup_Controller GPIO: PPD0 (Bit 0)                  */
#define Wakeup_Controller_GPIO_PPD0_Msk   (0x1UL)                   /*!< Wakeup_Controller GPIO: PPD0 (Bitfield-Mask: 0x01)    */
#define Wakeup_Controller_GPIO_PPD1_Pos   (1UL)                     /*!< Wakeup_Controller GPIO: PPD1 (Bit 1)                  */
#define Wakeup_Controller_GPIO_PPD1_Msk   (0x2UL)                   /*!< Wakeup_Controller GPIO: PPD1 (Bitfield-Mask: 0x01)    */
#define Wakeup_Controller_GPIO_PPD2_Pos   (2UL)                     /*!< Wakeup_Controller GPIO: PPD2 (Bit 2)                  */
#define Wakeup_Controller_GPIO_PPD2_Msk   (0x4UL)                   /*!< Wakeup_Controller GPIO: PPD2 (Bitfield-Mask: 0x01)    */
#define Wakeup_Controller_GPIO_PPD3_Pos   (3UL)                     /*!< Wakeup_Controller GPIO: PPD3 (Bit 3)                  */
#define Wakeup_Controller_GPIO_PPD3_Msk   (0x8UL)                   /*!< Wakeup_Controller GPIO: PPD3 (Bitfield-Mask: 0x01)    */
#define Wakeup_Controller_GPIO_PPO0_Pos   (8UL)                     /*!< Wakeup_Controller GPIO: PPO0 (Bit 8)                  */
#define Wakeup_Controller_GPIO_PPO0_Msk   (0x100UL)                 /*!< Wakeup_Controller GPIO: PPO0 (Bitfield-Mask: 0x01)    */
#define Wakeup_Controller_GPIO_PPO1_Pos   (9UL)                     /*!< Wakeup_Controller GPIO: PPO1 (Bit 9)                  */
#define Wakeup_Controller_GPIO_PPO1_Msk   (0x200UL)                 /*!< Wakeup_Controller GPIO: PPO1 (Bitfield-Mask: 0x01)    */
#define Wakeup_Controller_GPIO_PPO2_Pos   (10UL)                    /*!< Wakeup_Controller GPIO: PPO2 (Bit 10)                 */
#define Wakeup_Controller_GPIO_PPO2_Msk   (0x400UL)                 /*!< Wakeup_Controller GPIO: PPO2 (Bitfield-Mask: 0x01)    */
#define Wakeup_Controller_GPIO_PPO3_Pos   (11UL)                    /*!< Wakeup_Controller GPIO: PPO3 (Bit 11)                 */
#define Wakeup_Controller_GPIO_PPO3_Msk   (0x800UL)                 /*!< Wakeup_Controller GPIO: PPO3 (Bitfield-Mask: 0x01)    */
#define Wakeup_Controller_GPIO_PPULL0_Pos (16UL)                    /*!< Wakeup_Controller GPIO: PPULL0 (Bit 16)               */
#define Wakeup_Controller_GPIO_PPULL0_Msk (0x10000UL)               /*!< Wakeup_Controller GPIO: PPULL0 (Bitfield-Mask: 0x01)  */
#define Wakeup_Controller_GPIO_PPULL1_Pos (17UL)                    /*!< Wakeup_Controller GPIO: PPULL1 (Bit 17)               */
#define Wakeup_Controller_GPIO_PPULL1_Msk (0x20000UL)               /*!< Wakeup_Controller GPIO: PPULL1 (Bitfield-Mask: 0x01)  */
#define Wakeup_Controller_GPIO_PPULL2_Pos (18UL)                    /*!< Wakeup_Controller GPIO: PPULL2 (Bit 18)               */
#define Wakeup_Controller_GPIO_PPULL2_Msk (0x40000UL)               /*!< Wakeup_Controller GPIO: PPULL2 (Bitfield-Mask: 0x01)  */
#define Wakeup_Controller_GPIO_PPULL3_Pos (19UL)                    /*!< Wakeup_Controller GPIO: PPULL3 (Bit 19)               */
#define Wakeup_Controller_GPIO_PPULL3_Msk (0x80000UL)               /*!< Wakeup_Controller GPIO: PPULL3 (Bitfield-Mask: 0x01)  */
#define Wakeup_Controller_GPIO_PPIEN0_Pos (24UL)                    /*!< Wakeup_Controller GPIO: PPIEN0 (Bit 24)               */
#define Wakeup_Controller_GPIO_PPIEN0_Msk (0x1000000UL)             /*!< Wakeup_Controller GPIO: PPIEN0 (Bitfield-Mask: 0x01)  */
#define Wakeup_Controller_GPIO_PPIEN1_Pos (25UL)                    /*!< Wakeup_Controller GPIO: PPIEN1 (Bit 25)               */
#define Wakeup_Controller_GPIO_PPIEN1_Msk (0x2000000UL)             /*!< Wakeup_Controller GPIO: PPIEN1 (Bitfield-Mask: 0x01)  */
#define Wakeup_Controller_GPIO_PPIEN2_Pos (26UL)                    /*!< Wakeup_Controller GPIO: PPIEN2 (Bit 26)               */
#define Wakeup_Controller_GPIO_PPIEN2_Msk (0x4000000UL)             /*!< Wakeup_Controller GPIO: PPIEN2 (Bitfield-Mask: 0x01)  */
#define Wakeup_Controller_GPIO_PPIEN3_Pos (27UL)                    /*!< Wakeup_Controller GPIO: PPIEN3 (Bit 27)               */
#define Wakeup_Controller_GPIO_PPIEN3_Msk (0x8000000UL)             /*!< Wakeup_Controller GPIO: PPIEN3 (Bitfield-Mask: 0x01)  */
/* =======================================================  DEVSTATUS  ======================================================= */
#define Wakeup_Controller_DEVSTATUS_CD_FLAG_Pos (0UL)               /*!< Wakeup_Controller DEVSTATUS: CD_FLAG (Bit 0)          */
#define Wakeup_Controller_DEVSTATUS_CD_FLAG_Msk (0x1UL)             /*!< Wakeup_Controller DEVSTATUS: CD_FLAG (Bitfield-Mask: 0x01) */
#define Wakeup_Controller_DEVSTATUS_SYNC_FLAG_Pos (1UL)             /*!< Wakeup_Controller DEVSTATUS: SYNC_FLAG (Bit 1)        */
#define Wakeup_Controller_DEVSTATUS_SYNC_FLAG_Msk (0x2UL)           /*!< Wakeup_Controller DEVSTATUS: SYNC_FLAG (Bitfield-Mask: 0x01) */
#define Wakeup_Controller_DEVSTATUS_PM0_FLAG_Pos (2UL)              /*!< Wakeup_Controller DEVSTATUS: PM0_FLAG (Bit 2)         */
#define Wakeup_Controller_DEVSTATUS_PM0_FLAG_Msk (0x4UL)            /*!< Wakeup_Controller DEVSTATUS: PM0_FLAG (Bitfield-Mask: 0x01) */
#define Wakeup_Controller_DEVSTATUS_PM1_FLAG_Pos (3UL)              /*!< Wakeup_Controller DEVSTATUS: PM1_FLAG (Bit 3)         */
#define Wakeup_Controller_DEVSTATUS_PM1_FLAG_Msk (0x8UL)            /*!< Wakeup_Controller DEVSTATUS: PM1_FLAG (Bitfield-Mask: 0x01) */
#define Wakeup_Controller_DEVSTATUS_PM2_FLAG_Pos (4UL)              /*!< Wakeup_Controller DEVSTATUS: PM2_FLAG (Bit 4)         */
#define Wakeup_Controller_DEVSTATUS_PM2_FLAG_Msk (0x10UL)           /*!< Wakeup_Controller DEVSTATUS: PM2_FLAG (Bitfield-Mask: 0x01) */
#define Wakeup_Controller_DEVSTATUS_PM3_FLAG_Pos (5UL)              /*!< Wakeup_Controller DEVSTATUS: PM3_FLAG (Bit 5)         */
#define Wakeup_Controller_DEVSTATUS_PM3_FLAG_Msk (0x20UL)           /*!< Wakeup_Controller DEVSTATUS: PM3_FLAG (Bitfield-Mask: 0x01) */
#define Wakeup_Controller_DEVSTATUS_EOM_FLAG_Pos (6UL)              /*!< Wakeup_Controller DEVSTATUS: EOM_FLAG (Bit 6)         */
#define Wakeup_Controller_DEVSTATUS_EOM_FLAG_Msk (0x40UL)           /*!< Wakeup_Controller DEVSTATUS: EOM_FLAG (Bitfield-Mask: 0x01) */
#define Wakeup_Controller_DEVSTATUS_BF_FLAG_Pos (7UL)               /*!< Wakeup_Controller DEVSTATUS: BF_FLAG (Bit 7)          */
#define Wakeup_Controller_DEVSTATUS_BF_FLAG_Msk (0x80UL)            /*!< Wakeup_Controller DEVSTATUS: BF_FLAG (Bitfield-Mask: 0x01) */
#define Wakeup_Controller_DEVSTATUS_ITIM_FLAG_Pos (8UL)             /*!< Wakeup_Controller DEVSTATUS: ITIM_FLAG (Bit 8)        */
#define Wakeup_Controller_DEVSTATUS_ITIM_FLAG_Msk (0x100UL)         /*!< Wakeup_Controller DEVSTATUS: ITIM_FLAG (Bitfield-Mask: 0x01) */
#define Wakeup_Controller_DEVSTATUS_EXT_FLAG_Pos (9UL)              /*!< Wakeup_Controller DEVSTATUS: EXT_FLAG (Bit 9)         */
#define Wakeup_Controller_DEVSTATUS_EXT_FLAG_Msk (0x200UL)          /*!< Wakeup_Controller DEVSTATUS: EXT_FLAG (Bitfield-Mask: 0x01) */
#define Wakeup_Controller_DEVSTATUS_LPMP_PEND_Pos (10UL)            /*!< Wakeup_Controller DEVSTATUS: LPMP_PEND (Bit 10)       */
#define Wakeup_Controller_DEVSTATUS_LPMP_PEND_Msk (0x400UL)         /*!< Wakeup_Controller DEVSTATUS: LPMP_PEND (Bitfield-Mask: 0x01) */
#define Wakeup_Controller_DEVSTATUS_LPMT_PEND_Pos (11UL)            /*!< Wakeup_Controller DEVSTATUS: LPMT_PEND (Bit 11)       */
#define Wakeup_Controller_DEVSTATUS_LPMT_PEND_Msk (0x800UL)         /*!< Wakeup_Controller DEVSTATUS: LPMT_PEND (Bitfield-Mask: 0x01) */
#define Wakeup_Controller_DEVSTATUS_LPMA_PEND_Pos (12UL)            /*!< Wakeup_Controller DEVSTATUS: LPMA_PEND (Bit 12)       */
#define Wakeup_Controller_DEVSTATUS_LPMA_PEND_Msk (0x1000UL)        /*!< Wakeup_Controller DEVSTATUS: LPMA_PEND (Bitfield-Mask: 0x01) */
#define Wakeup_Controller_DEVSTATUS_LPMP_FLAG_Pos (13UL)            /*!< Wakeup_Controller DEVSTATUS: LPMP_FLAG (Bit 13)       */
#define Wakeup_Controller_DEVSTATUS_LPMP_FLAG_Msk (0x2000UL)        /*!< Wakeup_Controller DEVSTATUS: LPMP_FLAG (Bitfield-Mask: 0x01) */
#define Wakeup_Controller_DEVSTATUS_LPMT_FLAG_Pos (14UL)            /*!< Wakeup_Controller DEVSTATUS: LPMT_FLAG (Bit 14)       */
#define Wakeup_Controller_DEVSTATUS_LPMT_FLAG_Msk (0x4000UL)        /*!< Wakeup_Controller DEVSTATUS: LPMT_FLAG (Bitfield-Mask: 0x01) */
#define Wakeup_Controller_DEVSTATUS_LPMA_FLAG_Pos (15UL)            /*!< Wakeup_Controller DEVSTATUS: LPMA_FLAG (Bit 15)       */
#define Wakeup_Controller_DEVSTATUS_LPMA_FLAG_Msk (0x8000UL)        /*!< Wakeup_Controller DEVSTATUS: LPMA_FLAG (Bitfield-Mask: 0x01) */
#define Wakeup_Controller_DEVSTATUS_BOD_Pos (16UL)                  /*!< Wakeup_Controller DEVSTATUS: BOD (Bit 16)             */
#define Wakeup_Controller_DEVSTATUS_BOD_Msk (0x10000UL)             /*!< Wakeup_Controller DEVSTATUS: BOD (Bitfield-Mask: 0x01) */
#define Wakeup_Controller_DEVSTATUS_ECC2_Pos (17UL)                 /*!< Wakeup_Controller DEVSTATUS: ECC2 (Bit 17)            */
#define Wakeup_Controller_DEVSTATUS_ECC2_Msk (0x20000UL)            /*!< Wakeup_Controller DEVSTATUS: ECC2 (Bitfield-Mask: 0x01) */
#define Wakeup_Controller_DEVSTATUS_WDOG_Pos (18UL)                 /*!< Wakeup_Controller DEVSTATUS: WDOG (Bit 18)            */
#define Wakeup_Controller_DEVSTATUS_WDOG_Msk (0x40000UL)            /*!< Wakeup_Controller DEVSTATUS: WDOG (Bitfield-Mask: 0x01) */
#define Wakeup_Controller_DEVSTATUS_POR_Pos (19UL)                  /*!< Wakeup_Controller DEVSTATUS: POR (Bit 19)             */
#define Wakeup_Controller_DEVSTATUS_POR_Msk (0x80000UL)             /*!< Wakeup_Controller DEVSTATUS: POR (Bitfield-Mask: 0x01) */
#define Wakeup_Controller_DEVSTATUS_SRESET_Pos (20UL)               /*!< Wakeup_Controller DEVSTATUS: SRESET (Bit 20)          */
#define Wakeup_Controller_DEVSTATUS_SRESET_Msk (0x100000UL)         /*!< Wakeup_Controller DEVSTATUS: SRESET (Bitfield-Mask: 0x01) */
#define Wakeup_Controller_DEVSTATUS_TDET_Pos (21UL)                 /*!< Wakeup_Controller DEVSTATUS: TDET (Bit 21)            */
#define Wakeup_Controller_DEVSTATUS_TDET_Msk (0x200000UL)           /*!< Wakeup_Controller DEVSTATUS: TDET (Bitfield-Mask: 0x01) */
#define Wakeup_Controller_DEVSTATUS_UVR_Pos (22UL)                  /*!< Wakeup_Controller DEVSTATUS: UVR (Bit 22)             */
#define Wakeup_Controller_DEVSTATUS_UVR_Msk (0x400000UL)            /*!< Wakeup_Controller DEVSTATUS: UVR (Bitfield-Mask: 0x01) */
#define Wakeup_Controller_DEVSTATUS_WUPDWN_Pos (23UL)               /*!< Wakeup_Controller DEVSTATUS: WUPDWN (Bit 23)          */
#define Wakeup_Controller_DEVSTATUS_WUPDWN_Msk (0x800000UL)         /*!< Wakeup_Controller DEVSTATUS: WUPDWN (Bitfield-Mask: 0x01) */
#define Wakeup_Controller_DEVSTATUS_ITINIT_STATUS_Pos (27UL)        /*!< Wakeup_Controller DEVSTATUS: ITINIT_STATUS (Bit 27)   */
#define Wakeup_Controller_DEVSTATUS_ITINIT_STATUS_Msk (0x8000000UL) /*!< Wakeup_Controller DEVSTATUS: ITINIT_STATUS (Bitfield-Mask: 0x01) */
#define Wakeup_Controller_DEVSTATUS_LFINIT_STATUS_Pos (28UL)        /*!< Wakeup_Controller DEVSTATUS: LFINIT_STATUS (Bit 28)   */
#define Wakeup_Controller_DEVSTATUS_LFINIT_STATUS_Msk (0x10000000UL) /*!< Wakeup_Controller DEVSTATUS: LFINIT_STATUS (Bitfield-Mask: 0x01) */
#define Wakeup_Controller_DEVSTATUS_LFRXON_Pos (29UL)               /*!< Wakeup_Controller DEVSTATUS: LFRXON (Bit 29)          */
#define Wakeup_Controller_DEVSTATUS_LFRXON_Msk (0x20000000UL)       /*!< Wakeup_Controller DEVSTATUS: LFRXON (Bitfield-Mask: 0x01) */
/* ========================================================  DEVCTRL  ======================================================== */
#define Wakeup_Controller_DEVCTRL_CD_MASK_Pos (0UL)                 /*!< Wakeup_Controller DEVCTRL: CD_MASK (Bit 0)            */
#define Wakeup_Controller_DEVCTRL_CD_MASK_Msk (0x1UL)               /*!< Wakeup_Controller DEVCTRL: CD_MASK (Bitfield-Mask: 0x01) */
#define Wakeup_Controller_DEVCTRL_SYNC_MASK_Pos (1UL)               /*!< Wakeup_Controller DEVCTRL: SYNC_MASK (Bit 1)          */
#define Wakeup_Controller_DEVCTRL_SYNC_MASK_Msk (0x2UL)             /*!< Wakeup_Controller DEVCTRL: SYNC_MASK (Bitfield-Mask: 0x01) */
#define Wakeup_Controller_DEVCTRL_PM0_MASK_Pos (2UL)                /*!< Wakeup_Controller DEVCTRL: PM0_MASK (Bit 2)           */
#define Wakeup_Controller_DEVCTRL_PM0_MASK_Msk (0x4UL)              /*!< Wakeup_Controller DEVCTRL: PM0_MASK (Bitfield-Mask: 0x01) */
#define Wakeup_Controller_DEVCTRL_PM1_MASK_Pos (3UL)                /*!< Wakeup_Controller DEVCTRL: PM1_MASK (Bit 3)           */
#define Wakeup_Controller_DEVCTRL_PM1_MASK_Msk (0x8UL)              /*!< Wakeup_Controller DEVCTRL: PM1_MASK (Bitfield-Mask: 0x01) */
#define Wakeup_Controller_DEVCTRL_PM2_MASK_Pos (4UL)                /*!< Wakeup_Controller DEVCTRL: PM2_MASK (Bit 4)           */
#define Wakeup_Controller_DEVCTRL_PM2_MASK_Msk (0x10UL)             /*!< Wakeup_Controller DEVCTRL: PM2_MASK (Bitfield-Mask: 0x01) */
#define Wakeup_Controller_DEVCTRL_PM3_MASK_Pos (5UL)                /*!< Wakeup_Controller DEVCTRL: PM3_MASK (Bit 5)           */
#define Wakeup_Controller_DEVCTRL_PM3_MASK_Msk (0x20UL)             /*!< Wakeup_Controller DEVCTRL: PM3_MASK (Bitfield-Mask: 0x01) */
#define Wakeup_Controller_DEVCTRL_EOM_MASK_Pos (6UL)                /*!< Wakeup_Controller DEVCTRL: EOM_MASK (Bit 6)           */
#define Wakeup_Controller_DEVCTRL_EOM_MASK_Msk (0x40UL)             /*!< Wakeup_Controller DEVCTRL: EOM_MASK (Bitfield-Mask: 0x01) */
#define Wakeup_Controller_DEVCTRL_BF_MASK_Pos (7UL)                 /*!< Wakeup_Controller DEVCTRL: BF_MASK (Bit 7)            */
#define Wakeup_Controller_DEVCTRL_BF_MASK_Msk (0x80UL)              /*!< Wakeup_Controller DEVCTRL: BF_MASK (Bitfield-Mask: 0x01) */
#define Wakeup_Controller_DEVCTRL_ITIM_MASK_Pos (8UL)               /*!< Wakeup_Controller DEVCTRL: ITIM_MASK (Bit 8)          */
#define Wakeup_Controller_DEVCTRL_ITIM_MASK_Msk (0x100UL)           /*!< Wakeup_Controller DEVCTRL: ITIM_MASK (Bitfield-Mask: 0x01) */
#define Wakeup_Controller_DEVCTRL_EXT_MASK_Pos (9UL)                /*!< Wakeup_Controller DEVCTRL: EXT_MASK (Bit 9)           */
#define Wakeup_Controller_DEVCTRL_EXT_MASK_Msk (0x200UL)            /*!< Wakeup_Controller DEVCTRL: EXT_MASK (Bitfield-Mask: 0x01) */
#define Wakeup_Controller_DEVCTRL_LPMP_MASK_Pos (10UL)              /*!< Wakeup_Controller DEVCTRL: LPMP_MASK (Bit 10)         */
#define Wakeup_Controller_DEVCTRL_LPMP_MASK_Msk (0x400UL)           /*!< Wakeup_Controller DEVCTRL: LPMP_MASK (Bitfield-Mask: 0x01) */
#define Wakeup_Controller_DEVCTRL_LPMT_MASK_Pos (11UL)              /*!< Wakeup_Controller DEVCTRL: LPMT_MASK (Bit 11)         */
#define Wakeup_Controller_DEVCTRL_LPMT_MASK_Msk (0x800UL)           /*!< Wakeup_Controller DEVCTRL: LPMT_MASK (Bitfield-Mask: 0x01) */
#define Wakeup_Controller_DEVCTRL_LPMA_MASK_Pos (12UL)              /*!< Wakeup_Controller DEVCTRL: LPMA_MASK (Bit 12)         */
#define Wakeup_Controller_DEVCTRL_LPMA_MASK_Msk (0x1000UL)          /*!< Wakeup_Controller DEVCTRL: LPMA_MASK (Bitfield-Mask: 0x01) */
#define Wakeup_Controller_DEVCTRL_WUP_PIN_SEL_Pos (14UL)            /*!< Wakeup_Controller DEVCTRL: WUP_PIN_SEL (Bit 14)       */
#define Wakeup_Controller_DEVCTRL_WUP_PIN_SEL_Msk (0x4000UL)        /*!< Wakeup_Controller DEVCTRL: WUP_PIN_SEL (Bitfield-Mask: 0x01) */
#define Wakeup_Controller_DEVCTRL_ITINIT_Pos (16UL)                 /*!< Wakeup_Controller DEVCTRL: ITINIT (Bit 16)            */
#define Wakeup_Controller_DEVCTRL_ITINIT_Msk (0x10000UL)            /*!< Wakeup_Controller DEVCTRL: ITINIT (Bitfield-Mask: 0x01) */
#define Wakeup_Controller_DEVCTRL_SOFTRESET_Pos (17UL)              /*!< Wakeup_Controller DEVCTRL: SOFTRESET (Bit 17)         */
#define Wakeup_Controller_DEVCTRL_SOFTRESET_Msk (0x20000UL)         /*!< Wakeup_Controller DEVCTRL: SOFTRESET (Bitfield-Mask: 0x01) */
#define Wakeup_Controller_DEVCTRL_I2CEN_Pos (23UL)                  /*!< Wakeup_Controller DEVCTRL: I2CEN (Bit 23)             */
#define Wakeup_Controller_DEVCTRL_I2CEN_Msk (0x800000UL)            /*!< Wakeup_Controller DEVCTRL: I2CEN (Bitfield-Mask: 0x01) */
#define Wakeup_Controller_DEVCTRL_LFOOTIMEN_Pos (24UL)              /*!< Wakeup_Controller DEVCTRL: LFOOTIMEN (Bit 24)         */
#define Wakeup_Controller_DEVCTRL_LFOOTIMEN_Msk (0x1000000UL)       /*!< Wakeup_Controller DEVCTRL: LFOOTIMEN (Bitfield-Mask: 0x01) */
#define Wakeup_Controller_DEVCTRL_LFRXEN_Pos (25UL)                 /*!< Wakeup_Controller DEVCTRL: LFRXEN (Bit 25)            */
#define Wakeup_Controller_DEVCTRL_LFRXEN_Msk (0x2000000UL)          /*!< Wakeup_Controller DEVCTRL: LFRXEN (Bitfield-Mask: 0x01) */
#define Wakeup_Controller_DEVCTRL_LFMODEPOL_Pos (26UL)              /*!< Wakeup_Controller DEVCTRL: LFMODEPOL (Bit 26)         */
#define Wakeup_Controller_DEVCTRL_LFMODEPOL_Msk (0x4000000UL)       /*!< Wakeup_Controller DEVCTRL: LFMODEPOL (Bitfield-Mask: 0x01) */
#define Wakeup_Controller_DEVCTRL_LFOOTIMPOL_Pos (27UL)             /*!< Wakeup_Controller DEVCTRL: LFOOTIMPOL (Bit 27)        */
#define Wakeup_Controller_DEVCTRL_LFOOTIMPOL_Msk (0x8000000UL)      /*!< Wakeup_Controller DEVCTRL: LFOOTIMPOL (Bitfield-Mask: 0x01) */
#define Wakeup_Controller_DEVCTRL_LFINIT_Pos (28UL)                 /*!< Wakeup_Controller DEVCTRL: LFINIT (Bit 28)            */
#define Wakeup_Controller_DEVCTRL_LFINIT_Msk (0x10000000UL)         /*!< Wakeup_Controller DEVCTRL: LFINIT (Bitfield-Mask: 0x01) */
#define Wakeup_Controller_DEVCTRL_RETMEM0_Pos (29UL)                /*!< Wakeup_Controller DEVCTRL: RETMEM0 (Bit 29)           */
#define Wakeup_Controller_DEVCTRL_RETMEM0_Msk (0x20000000UL)        /*!< Wakeup_Controller DEVCTRL: RETMEM0 (Bitfield-Mask: 0x01) */
#define Wakeup_Controller_DEVCTRL_RETMEM1_Pos (30UL)                /*!< Wakeup_Controller DEVCTRL: RETMEM1 (Bit 30)           */
#define Wakeup_Controller_DEVCTRL_RETMEM1_Msk (0x40000000UL)        /*!< Wakeup_Controller DEVCTRL: RETMEM1 (Bitfield-Mask: 0x01) */
#define Wakeup_Controller_DEVCTRL_RETMEM2_Pos (31UL)                /*!< Wakeup_Controller DEVCTRL: RETMEM2 (Bit 31)           */
#define Wakeup_Controller_DEVCTRL_RETMEM2_Msk (0x80000000UL)        /*!< Wakeup_Controller DEVCTRL: RETMEM2 (Bitfield-Mask: 0x01) */

/** @} */ /* End of group PosMask_peripherals */


#ifdef __cplusplus
}
#endif

#endif /* SP49_H */


/** @} */ /* End of group SP49 */

/** @} */ /* End of group  */
